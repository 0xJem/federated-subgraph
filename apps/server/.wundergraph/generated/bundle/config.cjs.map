{
  "version": 3,
  "sources": ["../../wundergraph.config.ts", "../../wundergraph.server.ts", "../../wundergraph.operations.ts"],
  "sourcesContent": ["import { configureWunderGraphApplication, cors, EnvironmentVariable, introspect, templates } from '@wundergraph/sdk';\nimport server from './wundergraph.server';\nimport operations from './wundergraph.operations';\n\nconst treasuryEthereum = introspect.graphql({\n\tapiNamespace: \"treasuryEthereum\",\n\turl: new EnvironmentVariable(\"SUBGRAPH_ETHEREUM\"),\n});\n\nconst treasuryArbitrum = introspect.graphql({\n\tapiNamespace: \"treasuryArbitrum\",\n\turl: \"https://api.thegraph.com/subgraphs/name/olympusdao/protocol-metrics-arbitrum\",\n});\n\nconst treasuryFantom = introspect.graphql({\n\tapiNamespace: \"treasuryFantom\",\n\turl: \"https://api.thegraph.com/subgraphs/name/olympusdao/protocol-metrics-fantom\",\n});\n\nconst treasuryPolygon = introspect.graphql({\n\tapiNamespace: \"treasuryPolygon\",\n\turl: \"https://api.thegraph.com/subgraphs/name/olympusdao/protocol-metrics-polygon\",\n});\n\n// configureWunderGraph emits the configuration\nconfigureWunderGraphApplication({\n\tapis: [treasuryArbitrum, treasuryEthereum, treasuryFantom, treasuryPolygon],\n\tserver,\n\toperations,\n\tcodeGenerators: [\n\t\t{\n\t\t\ttemplates: [\n\t\t\t\ttemplates.typescript.client\n\t\t\t],\n\t\t},\n\t],\n\tcors: {\n\t\t...cors.allowAll,\n\t\tallowedOrigins:\n\t\t\tprocess.env.NODE_ENV === 'production'\n\t\t\t\t? [\n\t\t\t\t\t// change this before deploying to production to the actual domain where you're deploying your app\n\t\t\t\t\t'http://localhost:3000',\n\t\t\t\t]\n\t\t\t\t: ['http://localhost:3000', new EnvironmentVariable('WG_ALLOWED_ORIGIN')],\n\t},\n\tsecurity: {\n\t\tenableGraphQLEndpoint: process.env.NODE_ENV !== 'production' || process.env.GITPOD_WORKSPACE_ID !== undefined,\n\t},\n});\n", "import { configureWunderGraphServer } from '@wundergraph/sdk/server';\nimport type { HooksConfig } from './generated/wundergraph.hooks';\nimport type { InternalClient } from './generated/wundergraph.internal.client';\n\nexport default configureWunderGraphServer<HooksConfig, InternalClient>(() => ({\n\thooks: {\n\t\tqueries: {},\n\t\tmutations: {},\n\t},\n}));\n", "import { configureWunderGraphOperations } from '@wundergraph/sdk';\nimport type { OperationsConfiguration } from './generated/wundergraph.operations';\n\nexport default configureWunderGraphOperations<OperationsConfiguration>({\n\toperations: {\n\t\tdefaultConfig: {\n\t\t\tauthentication: {\n\t\t\t\trequired: false,\n\t\t\t},\n\t\t},\n\t\tqueries: (config) => ({\n\t\t\t...config,\n\t\t\tcaching: {\n\t\t\t\tenable: true,\n\t\t\t\tstaleWhileRevalidate: 60,\n\t\t\t\tmaxAge: 60,\n\t\t\t\tpublic: true,\n\t\t\t},\n\t\t\tliveQuery: {\n\t\t\t\tenable: true,\n\t\t\t\tpollingIntervalSeconds: 1,\n\t\t\t},\n\t\t}),\n\t\tmutations: (config) => ({\n\t\t\t...config,\n\t\t}),\n\t\tsubscriptions: (config) => ({\n\t\t\t...config,\n\t\t}),\n\t\tcustom: {},\n\t},\n});\n"],
  "mappings": "AAAA,IAAAA,EAAkG,4BCAlG,IAAAC,EAA2C,mCAIpCC,KAAQ,8BAAwD,KAAO,CAC7E,MAAO,CACN,QAAS,CAAC,EACV,UAAW,CAAC,CACb,CACD,EAAE,ECTF,IAAAC,EAA+C,4BAGxCC,KAAQ,kCAAwD,CACtE,WAAY,CACX,cAAe,CACd,eAAgB,CACf,SAAU,EACX,CACD,EACA,QAAUC,IAAY,CACrB,GAAGA,EACH,QAAS,CACR,OAAQ,GACR,qBAAsB,GACtB,OAAQ,GACR,OAAQ,EACT,EACA,UAAW,CACV,OAAQ,GACR,uBAAwB,CACzB,CACD,GACA,UAAYA,IAAY,CACvB,GAAGA,CACJ,GACA,cAAgBA,IAAY,CAC3B,GAAGA,CACJ,GACA,OAAQ,CAAC,CACV,CACD,CAAC,EF3BD,IAAMC,EAAmB,aAAW,QAAQ,CAC3C,aAAc,mBACd,IAAK,IAAI,sBAAoB,mBAAmB,CACjD,CAAC,EAEKC,EAAmB,aAAW,QAAQ,CAC3C,aAAc,mBACd,IAAK,8EACN,CAAC,EAEKC,EAAiB,aAAW,QAAQ,CACzC,aAAc,iBACd,IAAK,4EACN,CAAC,EAEKC,EAAkB,aAAW,QAAQ,CAC1C,aAAc,kBACd,IAAK,6EACN,CAAC,KAGD,mCAAgC,CAC/B,KAAM,CAACF,EAAkBD,EAAkBE,EAAgBC,CAAe,EAC1E,OAAAC,EACA,WAAAC,EACA,eAAgB,CACf,CACC,UAAW,CACV,YAAU,WAAW,MACtB,CACD,CACD,EACA,KAAM,CACL,GAAG,OAAK,SACR,eACC,QAAQ,IAAI,WAAa,aACtB,CAED,uBACD,EACE,CAAC,wBAAyB,IAAI,sBAAoB,mBAAmB,CAAC,CAC3E,EACA,SAAU,CACT,sBAAuB,QAAQ,IAAI,WAAa,cAAgB,QAAQ,IAAI,sBAAwB,MACrG,CACD,CAAC",
  "names": ["import_sdk", "import_server", "wundergraph_server_default", "import_sdk", "wundergraph_operations_default", "config", "treasuryEthereum", "treasuryArbitrum", "treasuryFantom", "treasuryPolygon", "wundergraph_server_default", "wundergraph_operations_default"]
}
