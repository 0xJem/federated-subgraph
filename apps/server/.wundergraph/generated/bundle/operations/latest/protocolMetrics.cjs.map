{
  "version": 3,
  "sources": ["../../../../operations/latest/protocolMetrics.ts", "../../../wundergraph.factory.ts"],
  "sourcesContent": ["import { createOperation } from '../../generated/wundergraph.factory';\nimport { ProtocolMetricsLatestResponseData } from '../../generated/models';\n\n/**\n * This custom query will return a flat array containing the latest ProtocolMetric objects for\n * each endpoint.\n */\nexport default createOperation.query({\n  handler: async (ctx) => {\n    console.log(`Commencing latest query for ProtocolMetric`);\n\n    // Combine across pages and endpoints\n    const combinedProtocolMetrics: ProtocolMetricsLatestResponseData[\"treasuryEthereum_protocolMetrics\"] = [];\n\n    const queryResult = await ctx.operations.query({\n      operationName: \"protocolMetricsLatest\",\n    });\n\n    if (queryResult.data) {\n      console.log(`Got ${queryResult.data.treasuryArbitrum_protocolMetrics.length} Arbitrum records.`);\n      combinedProtocolMetrics.push(...queryResult.data.treasuryArbitrum_protocolMetrics);\n      console.log(`Got ${queryResult.data.treasuryEthereum_protocolMetrics.length} Ethereum records.`);\n      combinedProtocolMetrics.push(...queryResult.data.treasuryEthereum_protocolMetrics);\n      console.log(`Got ${queryResult.data.treasuryFantom_protocolMetrics.length} Fantom records.`);\n      combinedProtocolMetrics.push(...queryResult.data.treasuryFantom_protocolMetrics);\n      console.log(`Got ${queryResult.data.treasuryPolygon_protocolMetrics.length} Polygon records.`);\n      combinedProtocolMetrics.push(...queryResult.data.treasuryPolygon_protocolMetrics);\n    }\n\n    console.log(`Returning ${combinedProtocolMetrics.length} records.`);\n    return combinedProtocolMetrics;\n  },\n});\n", "// Code generated by wunderctl. DO NOT EDIT.\n\nimport type { InternalClient } from \"./wundergraph.internal.client\";\nimport { InternalOperationsClient } from \"./wundergraph.internal.operations.client\";\nimport type { Role } from \"./wundergraph.server\";\nimport type { CustomClaims } from \"./claims\";\nimport { createOperationFactory } from \"@wundergraph/sdk/operations\";\n\nexport {z, AuthorizationError} from \"@wundergraph/sdk/operations\";\nexport const createOperation = createOperationFactory<InternalClient, Role, CustomClaims, InternalOperationsClient>();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACMA,wBAAuC;AAEvC,IAAAA,qBAAoC;AAC7B,IAAM,sBAAkB,0CAAqF;;;ADFpH,IAAO,0BAAQ,gBAAgB,MAAM;AAAA,EACnC,SAAS,OAAO,QAAQ;AACtB,YAAQ,IAAI,4CAA4C;AAGxD,UAAM,0BAAiG,CAAC;AAExG,UAAM,cAAc,MAAM,IAAI,WAAW,MAAM;AAAA,MAC7C,eAAe;AAAA,IACjB,CAAC;AAED,QAAI,YAAY,MAAM;AACpB,cAAQ,IAAI,OAAO,YAAY,KAAK,iCAAiC,0BAA0B;AAC/F,8BAAwB,KAAK,GAAG,YAAY,KAAK,gCAAgC;AACjF,cAAQ,IAAI,OAAO,YAAY,KAAK,iCAAiC,0BAA0B;AAC/F,8BAAwB,KAAK,GAAG,YAAY,KAAK,gCAAgC;AACjF,cAAQ,IAAI,OAAO,YAAY,KAAK,+BAA+B,wBAAwB;AAC3F,8BAAwB,KAAK,GAAG,YAAY,KAAK,8BAA8B;AAC/E,cAAQ,IAAI,OAAO,YAAY,KAAK,gCAAgC,yBAAyB;AAC7F,8BAAwB,KAAK,GAAG,YAAY,KAAK,+BAA+B;AAAA,IAClF;AAEA,YAAQ,IAAI,aAAa,wBAAwB,iBAAiB;AAClE,WAAO;AAAA,EACT;AACF,CAAC;",
  "names": ["import_operations"]
}
