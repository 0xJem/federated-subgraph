{
  "apiId": "",
  "environmentIds": [
    ""
  ],
  "api": {
    "enableGraphqlEndpoint": false,
    "operations": [
      {
        "content": "query ProtocolMetrics($pageSize: Int! = 1000, $startDate: String!, $endDate: String!) {\n  treasuryArbitrum_protocolMetrics(\n    first: $pageSize\n    orderBy: date\n    orderDirection: desc\n    where: {date_gte: $startDate, date_lt: $endDate}\n  ) {\n    id\n    block\n    currentAPY\n    currentIndex\n    date\n    gOhmPrice\n    gOhmTotalSupply\n    nextDistributedOhm\n    nextEpochRebase\n    ohmPrice\n    ohmTotalSupply\n    sOhmCirculatingSupply\n    timestamp\n    totalValueLocked\n  }\n  treasuryEthereum_protocolMetrics(\n    first: $pageSize\n    orderBy: date\n    orderDirection: desc\n    where: {date_gte: $startDate, date_lt: $endDate}\n  ) {\n    id\n    block\n    currentAPY\n    currentIndex\n    date\n    gOhmPrice\n    gOhmTotalSupply\n    nextDistributedOhm\n    nextEpochRebase\n    ohmPrice\n    ohmTotalSupply\n    sOhmCirculatingSupply\n    timestamp\n    totalValueLocked\n  }\n  treasuryFantom_protocolMetrics(\n    first: $pageSize\n    orderBy: date\n    orderDirection: desc\n    where: {date_gte: $startDate, date_lt: $endDate}\n  ) {\n    id\n    block\n    currentAPY\n    currentIndex\n    date\n    gOhmPrice\n    gOhmTotalSupply\n    nextDistributedOhm\n    nextEpochRebase\n    ohmPrice\n    ohmTotalSupply\n    sOhmCirculatingSupply\n    timestamp\n    totalValueLocked\n  }\n  treasuryPolygon_protocolMetrics(\n    first: $pageSize\n    orderBy: date\n    orderDirection: desc\n    where: {date_gte: $startDate, date_lt: $endDate}\n  ) {\n    id\n    block\n    currentAPY\n    currentIndex\n    date\n    gOhmPrice\n    gOhmTotalSupply\n    nextDistributedOhm\n    nextEpochRebase\n    ohmPrice\n    ohmTotalSupply\n    sOhmCirculatingSupply\n    timestamp\n    totalValueLocked\n  }\n}",
        "name": "ProtocolMetrics",
        "path": "protocolMetrics",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"treasuryArbitrum_protocolMetrics\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"currentAPY\":{\"type\":\"string\"},\"currentIndex\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"gOhmPrice\":{\"type\":\"string\"},\"gOhmTotalSupply\":{\"type\":\"string\"},\"nextDistributedOhm\":{\"type\":\"string\"},\"nextEpochRebase\":{\"type\":\"string\"},\"ohmPrice\":{\"type\":\"string\"},\"ohmTotalSupply\":{\"type\":\"string\"},\"sOhmCirculatingSupply\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"totalValueLocked\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"block\",\"currentAPY\",\"currentIndex\",\"date\",\"gOhmPrice\",\"gOhmTotalSupply\",\"nextDistributedOhm\",\"nextEpochRebase\",\"ohmPrice\",\"ohmTotalSupply\",\"sOhmCirculatingSupply\",\"timestamp\",\"totalValueLocked\"]}},\"treasuryEthereum_protocolMetrics\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"currentAPY\":{\"type\":\"string\"},\"currentIndex\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"gOhmPrice\":{\"type\":\"string\"},\"gOhmTotalSupply\":{\"type\":\"string\"},\"nextDistributedOhm\":{\"type\":\"string\"},\"nextEpochRebase\":{\"type\":\"string\"},\"ohmPrice\":{\"type\":\"string\"},\"ohmTotalSupply\":{\"type\":\"string\"},\"sOhmCirculatingSupply\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"totalValueLocked\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"block\",\"currentAPY\",\"currentIndex\",\"date\",\"gOhmPrice\",\"gOhmTotalSupply\",\"nextDistributedOhm\",\"nextEpochRebase\",\"ohmPrice\",\"ohmTotalSupply\",\"sOhmCirculatingSupply\",\"timestamp\",\"totalValueLocked\"]}},\"treasuryFantom_protocolMetrics\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"currentAPY\":{\"type\":\"string\"},\"currentIndex\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"gOhmPrice\":{\"type\":\"string\"},\"gOhmTotalSupply\":{\"type\":\"string\"},\"nextDistributedOhm\":{\"type\":\"string\"},\"nextEpochRebase\":{\"type\":\"string\"},\"ohmPrice\":{\"type\":\"string\"},\"ohmTotalSupply\":{\"type\":\"string\"},\"sOhmCirculatingSupply\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"totalValueLocked\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"block\",\"currentAPY\",\"currentIndex\",\"date\",\"gOhmPrice\",\"gOhmTotalSupply\",\"nextDistributedOhm\",\"nextEpochRebase\",\"ohmPrice\",\"ohmTotalSupply\",\"sOhmCirculatingSupply\",\"timestamp\",\"totalValueLocked\"]}},\"treasuryPolygon_protocolMetrics\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"currentAPY\":{\"type\":\"string\"},\"currentIndex\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"gOhmPrice\":{\"type\":\"string\"},\"gOhmTotalSupply\":{\"type\":\"string\"},\"nextDistributedOhm\":{\"type\":\"string\"},\"nextEpochRebase\":{\"type\":\"string\"},\"ohmPrice\":{\"type\":\"string\"},\"ohmTotalSupply\":{\"type\":\"string\"},\"sOhmCirculatingSupply\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"totalValueLocked\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"block\",\"currentAPY\",\"currentIndex\",\"date\",\"gOhmPrice\",\"gOhmTotalSupply\",\"nextDistributedOhm\",\"nextEpochRebase\",\"ohmPrice\",\"ohmTotalSupply\",\"sOhmCirculatingSupply\",\"timestamp\",\"totalValueLocked\"]}}},\"additionalProperties\":false,\"required\":[\"treasuryArbitrum_protocolMetrics\",\"treasuryEthereum_protocolMetrics\",\"treasuryFantom_protocolMetrics\",\"treasuryPolygon_protocolMetrics\"]}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"pageSize\":{\"type\":\"integer\"},\"startDate\":{\"type\":\"string\"},\"endDate\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"startDate\",\"endDate\"]}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{\"pageSize\":{\"type\":\"integer\"},\"startDate\":{\"type\":\"string\"},\"endDate\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"startDate\",\"endDate\"]}",
        "operationType": 0,
        "engine": 0,
        "cacheConfig": {
          "enable": true,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 1
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "query ProtocolMetricsLatest {\n  treasuryArbitrum_protocolMetrics(orderBy: date, orderDirection: desc, first: 1) {\n    id\n    block\n    currentAPY\n    currentIndex\n    date\n    gOhmPrice\n    gOhmTotalSupply\n    nextDistributedOhm\n    nextEpochRebase\n    ohmPrice\n    ohmTotalSupply\n    sOhmCirculatingSupply\n    timestamp\n    totalValueLocked\n  }\n  treasuryEthereum_protocolMetrics(orderBy: date, orderDirection: desc, first: 1) {\n    id\n    block\n    currentAPY\n    currentIndex\n    date\n    gOhmPrice\n    gOhmTotalSupply\n    nextDistributedOhm\n    nextEpochRebase\n    ohmPrice\n    ohmTotalSupply\n    sOhmCirculatingSupply\n    timestamp\n    totalValueLocked\n  }\n  treasuryFantom_protocolMetrics(orderBy: date, orderDirection: desc, first: 1) {\n    id\n    block\n    currentAPY\n    currentIndex\n    date\n    gOhmPrice\n    gOhmTotalSupply\n    nextDistributedOhm\n    nextEpochRebase\n    ohmPrice\n    ohmTotalSupply\n    sOhmCirculatingSupply\n    timestamp\n    totalValueLocked\n  }\n  treasuryPolygon_protocolMetrics(orderBy: date, orderDirection: desc, first: 1) {\n    id\n    block\n    currentAPY\n    currentIndex\n    date\n    gOhmPrice\n    gOhmTotalSupply\n    nextDistributedOhm\n    nextEpochRebase\n    ohmPrice\n    ohmTotalSupply\n    sOhmCirculatingSupply\n    timestamp\n    totalValueLocked\n  }\n}",
        "name": "ProtocolMetricsLatest",
        "path": "protocolMetricsLatest",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"treasuryArbitrum_protocolMetrics\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"currentAPY\":{\"type\":\"string\"},\"currentIndex\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"gOhmPrice\":{\"type\":\"string\"},\"gOhmTotalSupply\":{\"type\":\"string\"},\"nextDistributedOhm\":{\"type\":\"string\"},\"nextEpochRebase\":{\"type\":\"string\"},\"ohmPrice\":{\"type\":\"string\"},\"ohmTotalSupply\":{\"type\":\"string\"},\"sOhmCirculatingSupply\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"totalValueLocked\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"block\",\"currentAPY\",\"currentIndex\",\"date\",\"gOhmPrice\",\"gOhmTotalSupply\",\"nextDistributedOhm\",\"nextEpochRebase\",\"ohmPrice\",\"ohmTotalSupply\",\"sOhmCirculatingSupply\",\"timestamp\",\"totalValueLocked\"]}},\"treasuryEthereum_protocolMetrics\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"currentAPY\":{\"type\":\"string\"},\"currentIndex\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"gOhmPrice\":{\"type\":\"string\"},\"gOhmTotalSupply\":{\"type\":\"string\"},\"nextDistributedOhm\":{\"type\":\"string\"},\"nextEpochRebase\":{\"type\":\"string\"},\"ohmPrice\":{\"type\":\"string\"},\"ohmTotalSupply\":{\"type\":\"string\"},\"sOhmCirculatingSupply\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"totalValueLocked\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"block\",\"currentAPY\",\"currentIndex\",\"date\",\"gOhmPrice\",\"gOhmTotalSupply\",\"nextDistributedOhm\",\"nextEpochRebase\",\"ohmPrice\",\"ohmTotalSupply\",\"sOhmCirculatingSupply\",\"timestamp\",\"totalValueLocked\"]}},\"treasuryFantom_protocolMetrics\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"currentAPY\":{\"type\":\"string\"},\"currentIndex\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"gOhmPrice\":{\"type\":\"string\"},\"gOhmTotalSupply\":{\"type\":\"string\"},\"nextDistributedOhm\":{\"type\":\"string\"},\"nextEpochRebase\":{\"type\":\"string\"},\"ohmPrice\":{\"type\":\"string\"},\"ohmTotalSupply\":{\"type\":\"string\"},\"sOhmCirculatingSupply\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"totalValueLocked\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"block\",\"currentAPY\",\"currentIndex\",\"date\",\"gOhmPrice\",\"gOhmTotalSupply\",\"nextDistributedOhm\",\"nextEpochRebase\",\"ohmPrice\",\"ohmTotalSupply\",\"sOhmCirculatingSupply\",\"timestamp\",\"totalValueLocked\"]}},\"treasuryPolygon_protocolMetrics\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"currentAPY\":{\"type\":\"string\"},\"currentIndex\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"gOhmPrice\":{\"type\":\"string\"},\"gOhmTotalSupply\":{\"type\":\"string\"},\"nextDistributedOhm\":{\"type\":\"string\"},\"nextEpochRebase\":{\"type\":\"string\"},\"ohmPrice\":{\"type\":\"string\"},\"ohmTotalSupply\":{\"type\":\"string\"},\"sOhmCirculatingSupply\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"totalValueLocked\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"block\",\"currentAPY\",\"currentIndex\",\"date\",\"gOhmPrice\",\"gOhmTotalSupply\",\"nextDistributedOhm\",\"nextEpochRebase\",\"ohmPrice\",\"ohmTotalSupply\",\"sOhmCirculatingSupply\",\"timestamp\",\"totalValueLocked\"]}}},\"additionalProperties\":false,\"required\":[\"treasuryArbitrum_protocolMetrics\",\"treasuryEthereum_protocolMetrics\",\"treasuryFantom_protocolMetrics\",\"treasuryPolygon_protocolMetrics\"]}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false}",
        "operationType": 0,
        "engine": 0,
        "cacheConfig": {
          "enable": true,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 1
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "query TokenRecords($pageSize: Int! = 1000, $startDate: String!, $endDate: String!) {\n  treasuryArbitrum_tokenRecords(\n    first: $pageSize\n    orderBy: date\n    orderDirection: desc\n    where: {date_gte: $startDate, date_lt: $endDate}\n  ) {\n    id\n    balance\n    block\n    blockchain\n    category\n    date\n    isBluechip\n    isLiquid\n    multiplier\n    rate\n    source\n    sourceAddress\n    timestamp\n    token\n    tokenAddress\n    value\n    valueExcludingOhm\n  }\n  treasuryEthereum_tokenRecords(\n    first: $pageSize\n    orderBy: date\n    orderDirection: desc\n    where: {date_gte: $startDate, date_lt: $endDate}\n  ) {\n    id\n    balance\n    block\n    blockchain\n    category\n    date\n    isBluechip\n    isLiquid\n    multiplier\n    rate\n    source\n    sourceAddress\n    timestamp\n    token\n    tokenAddress\n    value\n    valueExcludingOhm\n  }\n  treasuryFantom_tokenRecords(\n    first: $pageSize\n    orderBy: date\n    orderDirection: desc\n    where: {date_gte: $startDate, date_lt: $endDate}\n  ) {\n    id\n    balance\n    block\n    blockchain\n    category\n    date\n    isBluechip\n    isLiquid\n    multiplier\n    rate\n    source\n    sourceAddress\n    timestamp\n    token\n    tokenAddress\n    value\n    valueExcludingOhm\n  }\n  treasuryPolygon_tokenRecords(\n    first: $pageSize\n    orderBy: date\n    orderDirection: desc\n    where: {date_gte: $startDate, date_lt: $endDate}\n  ) {\n    id\n    balance\n    block\n    blockchain\n    category\n    date\n    isBluechip\n    isLiquid\n    multiplier\n    rate\n    source\n    sourceAddress\n    timestamp\n    token\n    tokenAddress\n    value\n    valueExcludingOhm\n  }\n}",
        "name": "TokenRecords",
        "path": "tokenRecords",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"treasuryArbitrum_tokenRecords\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"blockchain\":{\"type\":\"string\"},\"category\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"isBluechip\":{\"type\":\"boolean\"},\"isLiquid\":{\"type\":\"boolean\"},\"multiplier\":{\"type\":\"string\"},\"rate\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"},\"valueExcludingOhm\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"balance\",\"block\",\"blockchain\",\"category\",\"date\",\"isBluechip\",\"isLiquid\",\"multiplier\",\"rate\",\"source\",\"sourceAddress\",\"timestamp\",\"token\",\"tokenAddress\",\"value\",\"valueExcludingOhm\"]}},\"treasuryEthereum_tokenRecords\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"blockchain\":{\"type\":\"string\"},\"category\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"isBluechip\":{\"type\":\"boolean\"},\"isLiquid\":{\"type\":\"boolean\"},\"multiplier\":{\"type\":\"string\"},\"rate\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"},\"valueExcludingOhm\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"balance\",\"block\",\"blockchain\",\"category\",\"date\",\"isBluechip\",\"isLiquid\",\"multiplier\",\"rate\",\"source\",\"sourceAddress\",\"timestamp\",\"token\",\"tokenAddress\",\"value\",\"valueExcludingOhm\"]}},\"treasuryFantom_tokenRecords\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"blockchain\":{\"type\":\"string\"},\"category\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"isBluechip\":{\"type\":\"boolean\"},\"isLiquid\":{\"type\":\"boolean\"},\"multiplier\":{\"type\":\"string\"},\"rate\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"},\"valueExcludingOhm\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"balance\",\"block\",\"blockchain\",\"category\",\"date\",\"isBluechip\",\"isLiquid\",\"multiplier\",\"rate\",\"source\",\"sourceAddress\",\"timestamp\",\"token\",\"tokenAddress\",\"value\",\"valueExcludingOhm\"]}},\"treasuryPolygon_tokenRecords\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"blockchain\":{\"type\":\"string\"},\"category\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"isBluechip\":{\"type\":\"boolean\"},\"isLiquid\":{\"type\":\"boolean\"},\"multiplier\":{\"type\":\"string\"},\"rate\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"},\"valueExcludingOhm\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"balance\",\"block\",\"blockchain\",\"category\",\"date\",\"isBluechip\",\"isLiquid\",\"multiplier\",\"rate\",\"source\",\"sourceAddress\",\"timestamp\",\"token\",\"tokenAddress\",\"value\",\"valueExcludingOhm\"]}}},\"additionalProperties\":false,\"required\":[\"treasuryArbitrum_tokenRecords\",\"treasuryEthereum_tokenRecords\",\"treasuryFantom_tokenRecords\",\"treasuryPolygon_tokenRecords\"]}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"pageSize\":{\"type\":\"integer\"},\"startDate\":{\"type\":\"string\"},\"endDate\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"startDate\",\"endDate\"]}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{\"pageSize\":{\"type\":\"integer\"},\"startDate\":{\"type\":\"string\"},\"endDate\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"startDate\",\"endDate\"]}",
        "operationType": 0,
        "engine": 0,
        "cacheConfig": {
          "enable": true,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 1
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "query TokenRecordsLatest {\n  treasuryArbitrum_tokenRecords(orderBy: date, orderDirection: desc, first: 1) {\n    id\n    balance\n    block\n    blockchain\n    category\n    date\n    isBluechip\n    isLiquid\n    multiplier\n    rate\n    source\n    sourceAddress\n    timestamp\n    token\n    tokenAddress\n    value\n    valueExcludingOhm\n  }\n  treasuryEthereum_tokenRecords(orderBy: date, orderDirection: desc, first: 1) {\n    id\n    balance\n    block\n    blockchain\n    category\n    date\n    isBluechip\n    isLiquid\n    multiplier\n    rate\n    source\n    sourceAddress\n    timestamp\n    token\n    tokenAddress\n    value\n    valueExcludingOhm\n  }\n  treasuryFantom_tokenRecords(orderBy: date, orderDirection: desc, first: 1) {\n    id\n    balance\n    block\n    blockchain\n    category\n    date\n    isBluechip\n    isLiquid\n    multiplier\n    rate\n    source\n    sourceAddress\n    timestamp\n    token\n    tokenAddress\n    value\n    valueExcludingOhm\n  }\n  treasuryPolygon_tokenRecords(orderBy: date, orderDirection: desc, first: 1) {\n    id\n    balance\n    block\n    blockchain\n    category\n    date\n    isBluechip\n    isLiquid\n    multiplier\n    rate\n    source\n    sourceAddress\n    timestamp\n    token\n    tokenAddress\n    value\n    valueExcludingOhm\n  }\n}",
        "name": "TokenRecordsLatest",
        "path": "tokenRecordsLatest",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"treasuryArbitrum_tokenRecords\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"blockchain\":{\"type\":\"string\"},\"category\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"isBluechip\":{\"type\":\"boolean\"},\"isLiquid\":{\"type\":\"boolean\"},\"multiplier\":{\"type\":\"string\"},\"rate\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"},\"valueExcludingOhm\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"balance\",\"block\",\"blockchain\",\"category\",\"date\",\"isBluechip\",\"isLiquid\",\"multiplier\",\"rate\",\"source\",\"sourceAddress\",\"timestamp\",\"token\",\"tokenAddress\",\"value\",\"valueExcludingOhm\"]}},\"treasuryEthereum_tokenRecords\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"blockchain\":{\"type\":\"string\"},\"category\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"isBluechip\":{\"type\":\"boolean\"},\"isLiquid\":{\"type\":\"boolean\"},\"multiplier\":{\"type\":\"string\"},\"rate\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"},\"valueExcludingOhm\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"balance\",\"block\",\"blockchain\",\"category\",\"date\",\"isBluechip\",\"isLiquid\",\"multiplier\",\"rate\",\"source\",\"sourceAddress\",\"timestamp\",\"token\",\"tokenAddress\",\"value\",\"valueExcludingOhm\"]}},\"treasuryFantom_tokenRecords\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"blockchain\":{\"type\":\"string\"},\"category\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"isBluechip\":{\"type\":\"boolean\"},\"isLiquid\":{\"type\":\"boolean\"},\"multiplier\":{\"type\":\"string\"},\"rate\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"},\"valueExcludingOhm\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"balance\",\"block\",\"blockchain\",\"category\",\"date\",\"isBluechip\",\"isLiquid\",\"multiplier\",\"rate\",\"source\",\"sourceAddress\",\"timestamp\",\"token\",\"tokenAddress\",\"value\",\"valueExcludingOhm\"]}},\"treasuryPolygon_tokenRecords\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"blockchain\":{\"type\":\"string\"},\"category\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"isBluechip\":{\"type\":\"boolean\"},\"isLiquid\":{\"type\":\"boolean\"},\"multiplier\":{\"type\":\"string\"},\"rate\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"},\"valueExcludingOhm\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"balance\",\"block\",\"blockchain\",\"category\",\"date\",\"isBluechip\",\"isLiquid\",\"multiplier\",\"rate\",\"source\",\"sourceAddress\",\"timestamp\",\"token\",\"tokenAddress\",\"value\",\"valueExcludingOhm\"]}}},\"additionalProperties\":false,\"required\":[\"treasuryArbitrum_tokenRecords\",\"treasuryEthereum_tokenRecords\",\"treasuryFantom_tokenRecords\",\"treasuryPolygon_tokenRecords\"]}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false}",
        "operationType": 0,
        "engine": 0,
        "cacheConfig": {
          "enable": true,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 1
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "query TokenSupplies($pageSize: Int! = 1000, $startDate: String!, $endDate: String!) {\n  treasuryArbitrum_tokenSupplies(\n    first: $pageSize\n    orderBy: date\n    orderDirection: desc\n    where: {date_gte: $startDate, date_lt: $endDate}\n  ) {\n    id\n    balance\n    block\n    date\n    pool\n    poolAddress\n    source\n    sourceAddress\n    supplyBalance\n    timestamp\n    token\n    tokenAddress\n    type\n  }\n  treasuryEthereum_tokenSupplies(\n    first: $pageSize\n    orderBy: date\n    orderDirection: desc\n    where: {date_gte: $startDate, date_lt: $endDate}\n  ) {\n    id\n    balance\n    block\n    date\n    pool\n    poolAddress\n    source\n    sourceAddress\n    supplyBalance\n    timestamp\n    token\n    tokenAddress\n    type\n  }\n  treasuryFantom_tokenSupplies(\n    first: $pageSize\n    orderBy: date\n    orderDirection: desc\n    where: {date_gte: $startDate, date_lt: $endDate}\n  ) {\n    id\n    balance\n    block\n    date\n    pool\n    poolAddress\n    source\n    sourceAddress\n    supplyBalance\n    timestamp\n    token\n    tokenAddress\n    type\n  }\n  treasuryPolygon_tokenSupplies(\n    first: $pageSize\n    orderBy: date\n    orderDirection: desc\n    where: {date_gte: $startDate, date_lt: $endDate}\n  ) {\n    id\n    balance\n    block\n    date\n    pool\n    poolAddress\n    source\n    sourceAddress\n    supplyBalance\n    timestamp\n    token\n    tokenAddress\n    type\n  }\n}",
        "name": "TokenSupplies",
        "path": "tokenSupplies",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"treasuryArbitrum_tokenSupplies\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"pool\":{\"type\":\"string\"},\"poolAddress\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"supplyBalance\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"balance\",\"block\",\"date\",\"supplyBalance\",\"timestamp\",\"token\",\"tokenAddress\",\"type\"]}},\"treasuryEthereum_tokenSupplies\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"pool\":{\"type\":\"string\"},\"poolAddress\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"supplyBalance\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"balance\",\"block\",\"date\",\"supplyBalance\",\"timestamp\",\"token\",\"tokenAddress\",\"type\"]}},\"treasuryFantom_tokenSupplies\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"pool\":{\"type\":\"string\"},\"poolAddress\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"supplyBalance\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"balance\",\"block\",\"date\",\"supplyBalance\",\"timestamp\",\"token\",\"tokenAddress\",\"type\"]}},\"treasuryPolygon_tokenSupplies\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"pool\":{\"type\":\"string\"},\"poolAddress\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"supplyBalance\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"balance\",\"block\",\"date\",\"supplyBalance\",\"timestamp\",\"token\",\"tokenAddress\",\"type\"]}}},\"additionalProperties\":false,\"required\":[\"treasuryArbitrum_tokenSupplies\",\"treasuryEthereum_tokenSupplies\",\"treasuryFantom_tokenSupplies\",\"treasuryPolygon_tokenSupplies\"]}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"pageSize\":{\"type\":\"integer\"},\"startDate\":{\"type\":\"string\"},\"endDate\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"startDate\",\"endDate\"]}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{\"pageSize\":{\"type\":\"integer\"},\"startDate\":{\"type\":\"string\"},\"endDate\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"startDate\",\"endDate\"]}",
        "operationType": 0,
        "engine": 0,
        "cacheConfig": {
          "enable": true,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 1
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "query TokenSuppliesLatest {\n  treasuryArbitrum_tokenSupplies(orderBy: date, orderDirection: desc, first: 1) {\n    id\n    balance\n    block\n    date\n    pool\n    poolAddress\n    source\n    sourceAddress\n    supplyBalance\n    timestamp\n    token\n    tokenAddress\n    type\n  }\n  treasuryEthereum_tokenSupplies(orderBy: date, orderDirection: desc, first: 1) {\n    id\n    balance\n    block\n    date\n    pool\n    poolAddress\n    source\n    sourceAddress\n    supplyBalance\n    timestamp\n    token\n    tokenAddress\n    type\n  }\n  treasuryFantom_tokenSupplies(orderBy: date, orderDirection: desc, first: 1) {\n    id\n    balance\n    block\n    date\n    pool\n    poolAddress\n    source\n    sourceAddress\n    supplyBalance\n    timestamp\n    token\n    tokenAddress\n    type\n  }\n  treasuryPolygon_tokenSupplies(orderBy: date, orderDirection: desc, first: 1) {\n    id\n    balance\n    block\n    date\n    pool\n    poolAddress\n    source\n    sourceAddress\n    supplyBalance\n    timestamp\n    token\n    tokenAddress\n    type\n  }\n}",
        "name": "TokenSuppliesLatest",
        "path": "tokenSuppliesLatest",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"treasuryArbitrum_tokenSupplies\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"pool\":{\"type\":\"string\"},\"poolAddress\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"supplyBalance\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"balance\",\"block\",\"date\",\"supplyBalance\",\"timestamp\",\"token\",\"tokenAddress\",\"type\"]}},\"treasuryEthereum_tokenSupplies\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"pool\":{\"type\":\"string\"},\"poolAddress\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"supplyBalance\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"balance\",\"block\",\"date\",\"supplyBalance\",\"timestamp\",\"token\",\"tokenAddress\",\"type\"]}},\"treasuryFantom_tokenSupplies\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"pool\":{\"type\":\"string\"},\"poolAddress\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"supplyBalance\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"balance\",\"block\",\"date\",\"supplyBalance\",\"timestamp\",\"token\",\"tokenAddress\",\"type\"]}},\"treasuryPolygon_tokenSupplies\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"pool\":{\"type\":\"string\"},\"poolAddress\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"supplyBalance\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"balance\",\"block\",\"date\",\"supplyBalance\",\"timestamp\",\"token\",\"tokenAddress\",\"type\"]}}},\"additionalProperties\":false,\"required\":[\"treasuryArbitrum_tokenSupplies\",\"treasuryEthereum_tokenSupplies\",\"treasuryFantom_tokenSupplies\",\"treasuryPolygon_tokenSupplies\"]}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false}",
        "operationType": 0,
        "engine": 0,
        "cacheConfig": {
          "enable": true,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 1
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "",
        "name": "LatestProtocolMetrics",
        "path": "latest/protocolMetrics",
        "responseSchema": "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"currentAPY\":{\"type\":\"string\"},\"currentIndex\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"gOhmPrice\":{\"type\":\"string\"},\"gOhmTotalSupply\":{\"type\":\"string\"},\"nextDistributedOhm\":{\"type\":\"string\"},\"nextEpochRebase\":{\"type\":\"string\"},\"ohmPrice\":{\"type\":\"string\"},\"ohmTotalSupply\":{\"type\":\"string\"},\"sOhmCirculatingSupply\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"totalValueLocked\":{\"type\":\"string\"}},\"required\":[\"block\",\"currentAPY\",\"currentIndex\",\"date\",\"gOhmPrice\",\"gOhmTotalSupply\",\"id\",\"nextDistributedOhm\",\"nextEpochRebase\",\"ohmPrice\",\"ohmTotalSupply\",\"sOhmCirculatingSupply\",\"timestamp\",\"totalValueLocked\"]}}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{}}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{}}",
        "operationType": 0,
        "engine": 1,
        "cacheConfig": {
          "enable": true,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 5
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "",
        "name": "LatestTokenRecords",
        "path": "latest/tokenRecords",
        "responseSchema": "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"blockchain\":{\"type\":\"string\"},\"category\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"isBluechip\":{\"type\":\"boolean\"},\"isLiquid\":{\"type\":\"boolean\"},\"multiplier\":{\"type\":\"string\"},\"rate\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"},\"valueExcludingOhm\":{\"type\":\"string\"}},\"required\":[\"balance\",\"block\",\"blockchain\",\"category\",\"date\",\"id\",\"isBluechip\",\"isLiquid\",\"multiplier\",\"rate\",\"source\",\"sourceAddress\",\"timestamp\",\"token\",\"tokenAddress\",\"value\",\"valueExcludingOhm\"]}}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{}}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{}}",
        "operationType": 0,
        "engine": 1,
        "cacheConfig": {
          "enable": true,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 5
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "",
        "name": "LatestTokenSupplies",
        "path": "latest/tokenSupplies",
        "responseSchema": "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"pool\":{\"type\":\"string\"},\"poolAddress\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"supplyBalance\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}},\"required\":[\"balance\",\"block\",\"date\",\"id\",\"supplyBalance\",\"timestamp\",\"token\",\"tokenAddress\",\"type\"]}}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{}}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{}}",
        "operationType": 0,
        "engine": 1,
        "cacheConfig": {
          "enable": true,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 5
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "",
        "name": "PaginatedProtocolMetrics",
        "path": "paginated/protocolMetrics",
        "responseSchema": "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"currentAPY\":{\"type\":\"string\"},\"currentIndex\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"gOhmPrice\":{\"type\":\"string\"},\"gOhmTotalSupply\":{\"type\":\"string\"},\"nextDistributedOhm\":{\"type\":\"string\"},\"nextEpochRebase\":{\"type\":\"string\"},\"ohmPrice\":{\"type\":\"string\"},\"ohmTotalSupply\":{\"type\":\"string\"},\"sOhmCirculatingSupply\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"totalValueLocked\":{\"type\":\"string\"}},\"required\":[\"block\",\"currentAPY\",\"currentIndex\",\"date\",\"gOhmPrice\",\"gOhmTotalSupply\",\"id\",\"nextDistributedOhm\",\"nextEpochRebase\",\"ohmPrice\",\"ohmTotalSupply\",\"sOhmCirculatingSupply\",\"timestamp\",\"totalValueLocked\"]}}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"startDate\":{\"type\":\"string\",\"description\":\"The start date in the YYYY-MM-DD format.\"},\"dateOffset\":{\"type\":\"number\",\"description\":\"The number of days to paginate by. Reduce the value if data is missing.\"}},\"required\":[\"startDate\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{}}",
        "operationType": 0,
        "engine": 1,
        "cacheConfig": {
          "enable": true,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 5
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "",
        "name": "PaginatedTokenRecords",
        "path": "paginated/tokenRecords",
        "responseSchema": "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"blockchain\":{\"type\":\"string\"},\"category\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"isBluechip\":{\"type\":\"boolean\"},\"isLiquid\":{\"type\":\"boolean\"},\"multiplier\":{\"type\":\"string\"},\"rate\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"},\"valueExcludingOhm\":{\"type\":\"string\"}},\"required\":[\"balance\",\"block\",\"blockchain\",\"category\",\"date\",\"id\",\"isBluechip\",\"isLiquid\",\"multiplier\",\"rate\",\"source\",\"sourceAddress\",\"timestamp\",\"token\",\"tokenAddress\",\"value\",\"valueExcludingOhm\"]}}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"startDate\":{\"type\":\"string\",\"description\":\"The start date in the YYYY-MM-DD format.\"},\"dateOffset\":{\"type\":\"number\",\"description\":\"The number of days to paginate by. Reduce the value if data is missing.\"}},\"required\":[\"startDate\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{}}",
        "operationType": 0,
        "engine": 1,
        "cacheConfig": {
          "enable": true,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 5
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "",
        "name": "PaginatedTokenSupplies",
        "path": "paginated/tokenSupplies",
        "responseSchema": "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"balance\":{\"type\":\"string\"},\"block\":{\"type\":\"string\"},\"date\":{\"type\":\"string\"},\"pool\":{\"type\":\"string\"},\"poolAddress\":{\"type\":\"string\"},\"source\":{\"type\":\"string\"},\"sourceAddress\":{\"type\":\"string\"},\"supplyBalance\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"},\"tokenAddress\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}},\"required\":[\"balance\",\"block\",\"date\",\"id\",\"supplyBalance\",\"timestamp\",\"token\",\"tokenAddress\",\"type\"]}}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"startDate\":{\"type\":\"string\",\"description\":\"The start date in the YYYY-MM-DD format.\"},\"dateOffset\":{\"type\":\"number\",\"description\":\"The number of days to paginate by. Reduce the value if data is missing.\"},\"pageSize\":{\"type\":\"number\",\"description\":\"The number of records per page. Increase the value if data is missing.\"}},\"required\":[\"startDate\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{}}",
        "operationType": 0,
        "engine": 1,
        "cacheConfig": {
          "enable": true,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 5
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      }
    ],
    "invalidOperationNames": [],
    "engineConfiguration": {
      "defaultFlushInterval": 500,
      "graphqlSchema": "\"\"\"\ncreates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.\n\"\"\"\ndirective @treasuryArbitrum_derivedFrom(field: String!) on FIELD_DEFINITION\n\n\"\"\"\nMarks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.\n\"\"\"\ndirective @treasuryArbitrum_entity on OBJECT\n\n\"\"\"Defined a Subgraph ID for an object type\"\"\"\ndirective @treasuryArbitrum_subgraphId(id: String!) on OBJECT\n\n\"\"\"\ncreates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.\n\"\"\"\ndirective @treasuryEthereum_derivedFrom(field: String!) on FIELD_DEFINITION\n\n\"\"\"\nMarks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.\n\"\"\"\ndirective @treasuryEthereum_entity on OBJECT\n\n\"\"\"Defined a Subgraph ID for an object type\"\"\"\ndirective @treasuryEthereum_subgraphId(id: String!) on OBJECT\n\n\"\"\"\ncreates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.\n\"\"\"\ndirective @treasuryFantom_derivedFrom(field: String!) on FIELD_DEFINITION\n\n\"\"\"\nMarks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.\n\"\"\"\ndirective @treasuryFantom_entity on OBJECT\n\n\"\"\"Defined a Subgraph ID for an object type\"\"\"\ndirective @treasuryFantom_subgraphId(id: String!) on OBJECT\n\n\"\"\"\ncreates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.\n\"\"\"\ndirective @treasuryPolygon_derivedFrom(field: String!) on FIELD_DEFINITION\n\n\"\"\"\nMarks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.\n\"\"\"\ndirective @treasuryPolygon_entity on OBJECT\n\n\"\"\"Defined a Subgraph ID for an object type\"\"\"\ndirective @treasuryPolygon_subgraphId(id: String!) on OBJECT\n\n\"\"\"\nThe @removeNullVariables directive allows you to remove variables with null value from your GraphQL Query or Mutation Operations.\n\nA potential use-case could be that you have a graphql upstream which is not accepting null values for variables.\nBy enabling this directive all variables with null values will be removed from upstream query.\n\nquery ($say: String, $name: String) @removeNullVariables {\n\thello(say: $say, name: $name)\n}\n\nDirective will transform variables json and remove top level null values.\n{ \"say\": null, \"name\": \"world\" }\n\nSo upstream will receive the following variables:\n\n{ \"name\": \"world\" }\n\"\"\"\ndirective @removeNullVariables on QUERY | MUTATION\n\ndirective @hooksVariable on VARIABLE_DEFINITION\n\ndirective @jsonSchema(\n  \"\"\"\n  The value of both of these keywords MUST be a string.\n  \n  Both of these keywords can be used to decorate a user interface with\n  information about the data produced by this user interface.  A title\n  will preferably be short, whereas a description will provide\n  explanation about the purpose of the instance described by this\n  schema.\n  \"\"\"\n  title: String\n  \"\"\"\n  The value of both of these keywords MUST be a string.\n  \n  Both of these keywords can be used to decorate a user interface with\n  information about the data produced by this user interface.  A title\n  will preferably be short, whereas a description will provide\n  explanation about the purpose of the instance described by this\n  schema.\n  \"\"\"\n  description: String\n  \"\"\"\n  The value of \"multipleOf\" MUST be a number, strictly greater than 0.\n  \n  A numeric instance is valid only if division by this keyword's value\n  results in an integer.\n  \"\"\"\n  multipleOf: Int\n  \"\"\"\n  The value of \"maximum\" MUST be a number, representing an inclusive\n  upper limit for a numeric instance.\n  \n  If the instance is a number, then this keyword validates only if the\n  instance is less than or exactly equal to \"maximum\".\n  \"\"\"\n  maximum: Int\n  \"\"\"\n  The value of \"exclusiveMaximum\" MUST be number, representing an\n  exclusive upper limit for a numeric instance.\n  \n  If the instance is a number, then the instance is valid only if it\n  has a value strictly less than (not equal to) \"exclusiveMaximum\".\n  \"\"\"\n  exclusiveMaximum: Int\n  \"\"\"\n  The value of \"minimum\" MUST be a number, representing an inclusive\n  lower limit for a numeric instance.\n  \n  If the instance is a number, then this keyword validates only if the\n  instance is greater than or exactly equal to \"minimum\".\n  \"\"\"\n  minimum: Int\n  \"\"\"\n  The value of \"exclusiveMinimum\" MUST be number, representing an\n  exclusive lower limit for a numeric instance.\n  \n  If the instance is a number, then the instance is valid only if it\n  has a value strictly greater than (not equal to) \"exclusiveMinimum\".\n  \"\"\"\n  exclusiveMinimum: Int\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  A string instance is valid against this keyword if its length is less\n  than, or equal to, the value of this keyword.\n  \n  The length of a string instance is defined as the number of its\n  characters as defined by RFC 7159 [RFC7159].\n  \"\"\"\n  maxLength: Int\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  A string instance is valid against this keyword if its length is\n  greater than, or equal to, the value of this keyword.\n  \n  The length of a string instance is defined as the number of its\n  characters as defined by RFC 7159 [RFC7159].\n  \n  Omitting this keyword has the same behavior as a value of 0.\n  \"\"\"\n  minLength: Int\n  \"\"\"\n  The value of this keyword MUST be a string.  This string SHOULD be a\n  valid regular expression, according to the ECMA 262 regular\n  expression dialect.\n  \n  A string instance is considered valid if the regular expression\n  matches the instance successfully.  Recall: regular expressions are\n  not implicitly anchored.\n  \"\"\"\n  pattern: String\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  An array instance is valid against \"maxItems\" if its size is less\n  than, or equal to, the value of this keyword.\n  \"\"\"\n  maxItems: Int\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  An array instance is valid against \"minItems\" if its size is greater\n  than, or equal to, the value of this keyword.\n  \n  Omitting this keyword has the same behavior as a value of 0.\n  \"\"\"\n  minItems: Int\n  \"\"\"\n  The value of this keyword MUST be a boolean.\n  \n  If this keyword has boolean value false, the instance validates\n  successfully.  If it has boolean value true, the instance validates\n  successfully if all of its elements are unique.\n  \n  Omitting this keyword has the same behavior as a value of false.\n  \"\"\"\n  uniqueItems: Boolean\n  commonPattern: COMMON_REGEX_PATTERN\n  \"\"\"Optional field to apply the JSON schema to\"\"\"\n  on: String\n) repeatable on VARIABLE_DEFINITION\n\ndirective @rbac(\n  \"\"\"the user must match all roles\"\"\"\n  requireMatchAll: [WG_ROLE]\n  \"\"\"the user must match at least one of the roles\"\"\"\n  requireMatchAny: [WG_ROLE]\n  \"\"\"the user must not match all of the roles\"\"\"\n  denyMatchAll: [WG_ROLE]\n  \"\"\"the user must not match any of the roles\"\"\"\n  denyMatchAny: [WG_ROLE]\n) on QUERY | MUTATION | SUBSCRIPTION\n\n\"\"\"\nThe @fromClaim directive sets the variable to the value retrieved from the given a claim.\nAdding this directive makes the operation require authentication.\n\"\"\"\ndirective @fromClaim(name: WG_CLAIM, on: String = \"\") repeatable on VARIABLE_DEFINITION\n\n\"\"\"\nThe directive @injectCurrentDateTime injects a DateTime string of the current date and time into the variable.\nThis variable MUST be a string compatible scalar. \n\nThe default format, is: ISO 8601\nIf no format is chosen, the default format is used.\nCustom formats are allowed by specifying a format conforming to the Golang specification for specifying a date time format.\n\"\"\"\ndirective @injectCurrentDateTime(\n  format: WunderGraphDateTimeFormat = ISO8601\n  \"\"\"\n  customFormat must conform to the Golang specification for specifying a date time format\n  \"\"\"\n  customFormat: String\n  on: String = \"\"\n) repeatable on VARIABLE_DEFINITION\n\n\"\"\"\nThe directive @injectGeneratedUUID injects a generated UUID into the variable.\nThis variable MUST be a string.\nAt the same time, it removes the variable from the input definition,\ndisallowing the user to supply it.\n\nThis means, the UUID is 100% generated server-side and can be considered untempered.\n\"\"\"\ndirective @injectGeneratedUUID(on: String = \"\") repeatable on VARIABLE_DEFINITION\n\n\"\"\"\nThe @internalOperation Directive marks an Operation as internal.\nBy doing so, the Operation is no longer accessible from the public API.\nIt can only be accessed by internal services, like hooks.\n\"\"\"\ndirective @internalOperation on QUERY | MUTATION | SUBSCRIPTION\n\n\"\"\"\nThe directive @injectEnvironmentVariable allows you to inject an environment variable into the variable definition.\n\"\"\"\ndirective @injectEnvironmentVariable(name: String!, on: String = \"\") repeatable on VARIABLE_DEFINITION\n\n\"\"\"\nThe @export directive instructs the Execution Planner to export the field during the execution into the variable of the 'as' argument.\nAs the execution is depth first, a field can only be used after it has been exported.\nAdditionally, a field can only be used after using the '_join' field or on a different data source.\nIt's not possible to export a field and use it in for the same data source.\n\nNote that the @export directive only works on fields that return a single value.\nIt's not possible to export a list or object field.\n\"\"\"\ndirective @export(\n  \"\"\"The argument 'as' is the name of the variable to export the field to.\"\"\"\n  as: String!\n) on FIELD\n\n\"\"\"\nThe directive @internal marks a variable definition as internal so that clients can't access it.\nThe field is also not visible in the public API.\nIt's only being used as an internal variable to export fields into.\n\"\"\"\ndirective @internal on VARIABLE_DEFINITION\n\n\"\"\"\nThe @transform directive allows to apply transformations to the response.\nBy applying the directive, the shape of the response can be altered,\nwhich will also modify the JSON-Schema of the response.\nThat is, you will keep full type safety and code-generation for transformed fields.\n\"\"\"\ndirective @transform(\n  \"\"\"\n  Using the 'get' transformation allows you to extract a nested field using a JSON path.\n  This is useful to unnest data, e.g. when using the '_join' field, which adds an extra layer of nesting.\n  \n  Example:\n  \n  query GetName {\n      name: me @transform(get: \"info.name\") {\n          info {\n              name\n          }\n      }\n  }\n  \n  Before the transformation, the resolve looks like this:\n  \n  {\n      \"name\": {\n          \"info\": {\n              \"name\": \"John Doe\"\n          }\n      }\n  }\n  \n  With the transformation applied, the response will be reshaped like this:\n  \n  {\n      \"name\": \"John Doe\"\n  }\n  \"\"\"\n  get: String\n) on FIELD\n\ntype treasuryArbitrum_BalancerPoolSnapshot {\n  balances: [treasuryArbitrum_BigDecimal!]!\n  block: BigInt!\n  decimals: Int!\n  id: ID!\n  pool: treasuryArbitrum_Bytes!\n  poolToken: treasuryArbitrum_Bytes!\n  tokens: [treasuryArbitrum_Bytes!]!\n  totalSupply: treasuryArbitrum_BigDecimal!\n  weights: [treasuryArbitrum_BigDecimal!]!\n  _join: Query!\n}\n\ninput treasuryArbitrum_BalancerPoolSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryArbitrum_BlockChangedFilter\n  and: [treasuryArbitrum_BalancerPoolSnapshot_filter]\n  balances: [treasuryArbitrum_BigDecimal!]\n  balances_contains: [treasuryArbitrum_BigDecimal!]\n  balances_contains_nocase: [treasuryArbitrum_BigDecimal!]\n  balances_not: [treasuryArbitrum_BigDecimal!]\n  balances_not_contains: [treasuryArbitrum_BigDecimal!]\n  balances_not_contains_nocase: [treasuryArbitrum_BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryArbitrum_BalancerPoolSnapshot_filter]\n  pool: treasuryArbitrum_Bytes\n  poolToken: treasuryArbitrum_Bytes\n  poolToken_contains: treasuryArbitrum_Bytes\n  poolToken_gt: treasuryArbitrum_Bytes\n  poolToken_gte: treasuryArbitrum_Bytes\n  poolToken_in: [treasuryArbitrum_Bytes!]\n  poolToken_lt: treasuryArbitrum_Bytes\n  poolToken_lte: treasuryArbitrum_Bytes\n  poolToken_not: treasuryArbitrum_Bytes\n  poolToken_not_contains: treasuryArbitrum_Bytes\n  poolToken_not_in: [treasuryArbitrum_Bytes!]\n  pool_contains: treasuryArbitrum_Bytes\n  pool_gt: treasuryArbitrum_Bytes\n  pool_gte: treasuryArbitrum_Bytes\n  pool_in: [treasuryArbitrum_Bytes!]\n  pool_lt: treasuryArbitrum_Bytes\n  pool_lte: treasuryArbitrum_Bytes\n  pool_not: treasuryArbitrum_Bytes\n  pool_not_contains: treasuryArbitrum_Bytes\n  pool_not_in: [treasuryArbitrum_Bytes!]\n  tokens: [treasuryArbitrum_Bytes!]\n  tokens_contains: [treasuryArbitrum_Bytes!]\n  tokens_contains_nocase: [treasuryArbitrum_Bytes!]\n  tokens_not: [treasuryArbitrum_Bytes!]\n  tokens_not_contains: [treasuryArbitrum_Bytes!]\n  tokens_not_contains_nocase: [treasuryArbitrum_Bytes!]\n  totalSupply: treasuryArbitrum_BigDecimal\n  totalSupply_gt: treasuryArbitrum_BigDecimal\n  totalSupply_gte: treasuryArbitrum_BigDecimal\n  totalSupply_in: [treasuryArbitrum_BigDecimal!]\n  totalSupply_lt: treasuryArbitrum_BigDecimal\n  totalSupply_lte: treasuryArbitrum_BigDecimal\n  totalSupply_not: treasuryArbitrum_BigDecimal\n  totalSupply_not_in: [treasuryArbitrum_BigDecimal!]\n  weights: [treasuryArbitrum_BigDecimal!]\n  weights_contains: [treasuryArbitrum_BigDecimal!]\n  weights_contains_nocase: [treasuryArbitrum_BigDecimal!]\n  weights_not: [treasuryArbitrum_BigDecimal!]\n  weights_not_contains: [treasuryArbitrum_BigDecimal!]\n  weights_not_contains_nocase: [treasuryArbitrum_BigDecimal!]\n}\n\nenum treasuryArbitrum_BalancerPoolSnapshot_orderBy {\n  balances\n  block\n  decimals\n  id\n  pool\n  poolToken\n  tokens\n  totalSupply\n  weights\n}\n\nscalar treasuryArbitrum_BigDecimal\n\nscalar BigInt\n\ninput treasuryArbitrum_BlockChangedFilter {\n  number_gte: Int!\n}\n\ninput treasuryArbitrum_Block_height {\n  hash: treasuryArbitrum_Bytes\n  number: Int\n  number_gte: Int\n}\n\ntype treasuryArbitrum_BondDiscount {\n  dai_discount: treasuryArbitrum_BigDecimal!\n  eth_discount: treasuryArbitrum_BigDecimal!\n  frax_discount: treasuryArbitrum_BigDecimal!\n  id: ID!\n  lusd_discount: treasuryArbitrum_BigDecimal!\n  ohmdai_discount: treasuryArbitrum_BigDecimal!\n  ohmfrax_discount: treasuryArbitrum_BigDecimal!\n  ohmlusd_discount: treasuryArbitrum_BigDecimal!\n  timestamp: BigInt!\n  _join: Query!\n}\n\ninput treasuryArbitrum_BondDiscount_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryArbitrum_BlockChangedFilter\n  and: [treasuryArbitrum_BondDiscount_filter]\n  dai_discount: treasuryArbitrum_BigDecimal\n  dai_discount_gt: treasuryArbitrum_BigDecimal\n  dai_discount_gte: treasuryArbitrum_BigDecimal\n  dai_discount_in: [treasuryArbitrum_BigDecimal!]\n  dai_discount_lt: treasuryArbitrum_BigDecimal\n  dai_discount_lte: treasuryArbitrum_BigDecimal\n  dai_discount_not: treasuryArbitrum_BigDecimal\n  dai_discount_not_in: [treasuryArbitrum_BigDecimal!]\n  eth_discount: treasuryArbitrum_BigDecimal\n  eth_discount_gt: treasuryArbitrum_BigDecimal\n  eth_discount_gte: treasuryArbitrum_BigDecimal\n  eth_discount_in: [treasuryArbitrum_BigDecimal!]\n  eth_discount_lt: treasuryArbitrum_BigDecimal\n  eth_discount_lte: treasuryArbitrum_BigDecimal\n  eth_discount_not: treasuryArbitrum_BigDecimal\n  eth_discount_not_in: [treasuryArbitrum_BigDecimal!]\n  frax_discount: treasuryArbitrum_BigDecimal\n  frax_discount_gt: treasuryArbitrum_BigDecimal\n  frax_discount_gte: treasuryArbitrum_BigDecimal\n  frax_discount_in: [treasuryArbitrum_BigDecimal!]\n  frax_discount_lt: treasuryArbitrum_BigDecimal\n  frax_discount_lte: treasuryArbitrum_BigDecimal\n  frax_discount_not: treasuryArbitrum_BigDecimal\n  frax_discount_not_in: [treasuryArbitrum_BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  lusd_discount: treasuryArbitrum_BigDecimal\n  lusd_discount_gt: treasuryArbitrum_BigDecimal\n  lusd_discount_gte: treasuryArbitrum_BigDecimal\n  lusd_discount_in: [treasuryArbitrum_BigDecimal!]\n  lusd_discount_lt: treasuryArbitrum_BigDecimal\n  lusd_discount_lte: treasuryArbitrum_BigDecimal\n  lusd_discount_not: treasuryArbitrum_BigDecimal\n  lusd_discount_not_in: [treasuryArbitrum_BigDecimal!]\n  ohmdai_discount: treasuryArbitrum_BigDecimal\n  ohmdai_discount_gt: treasuryArbitrum_BigDecimal\n  ohmdai_discount_gte: treasuryArbitrum_BigDecimal\n  ohmdai_discount_in: [treasuryArbitrum_BigDecimal!]\n  ohmdai_discount_lt: treasuryArbitrum_BigDecimal\n  ohmdai_discount_lte: treasuryArbitrum_BigDecimal\n  ohmdai_discount_not: treasuryArbitrum_BigDecimal\n  ohmdai_discount_not_in: [treasuryArbitrum_BigDecimal!]\n  ohmfrax_discount: treasuryArbitrum_BigDecimal\n  ohmfrax_discount_gt: treasuryArbitrum_BigDecimal\n  ohmfrax_discount_gte: treasuryArbitrum_BigDecimal\n  ohmfrax_discount_in: [treasuryArbitrum_BigDecimal!]\n  ohmfrax_discount_lt: treasuryArbitrum_BigDecimal\n  ohmfrax_discount_lte: treasuryArbitrum_BigDecimal\n  ohmfrax_discount_not: treasuryArbitrum_BigDecimal\n  ohmfrax_discount_not_in: [treasuryArbitrum_BigDecimal!]\n  ohmlusd_discount: treasuryArbitrum_BigDecimal\n  ohmlusd_discount_gt: treasuryArbitrum_BigDecimal\n  ohmlusd_discount_gte: treasuryArbitrum_BigDecimal\n  ohmlusd_discount_in: [treasuryArbitrum_BigDecimal!]\n  ohmlusd_discount_lt: treasuryArbitrum_BigDecimal\n  ohmlusd_discount_lte: treasuryArbitrum_BigDecimal\n  ohmlusd_discount_not: treasuryArbitrum_BigDecimal\n  ohmlusd_discount_not_in: [treasuryArbitrum_BigDecimal!]\n  or: [treasuryArbitrum_BondDiscount_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n}\n\nenum treasuryArbitrum_BondDiscount_orderBy {\n  dai_discount\n  eth_discount\n  frax_discount\n  id\n  lusd_discount\n  ohmdai_discount\n  ohmfrax_discount\n  ohmlusd_discount\n  timestamp\n}\n\nscalar treasuryArbitrum_Bytes\n\ntype treasuryArbitrum_ConvexRewardPoolSnapshot {\n  address: treasuryArbitrum_Bytes!\n  block: BigInt!\n  id: ID!\n  stakingToken: treasuryArbitrum_Bytes!\n  _join: Query!\n}\n\ninput treasuryArbitrum_ConvexRewardPoolSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryArbitrum_BlockChangedFilter\n  address: treasuryArbitrum_Bytes\n  address_contains: treasuryArbitrum_Bytes\n  address_gt: treasuryArbitrum_Bytes\n  address_gte: treasuryArbitrum_Bytes\n  address_in: [treasuryArbitrum_Bytes!]\n  address_lt: treasuryArbitrum_Bytes\n  address_lte: treasuryArbitrum_Bytes\n  address_not: treasuryArbitrum_Bytes\n  address_not_contains: treasuryArbitrum_Bytes\n  address_not_in: [treasuryArbitrum_Bytes!]\n  and: [treasuryArbitrum_ConvexRewardPoolSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryArbitrum_ConvexRewardPoolSnapshot_filter]\n  stakingToken: treasuryArbitrum_Bytes\n  stakingToken_contains: treasuryArbitrum_Bytes\n  stakingToken_gt: treasuryArbitrum_Bytes\n  stakingToken_gte: treasuryArbitrum_Bytes\n  stakingToken_in: [treasuryArbitrum_Bytes!]\n  stakingToken_lt: treasuryArbitrum_Bytes\n  stakingToken_lte: treasuryArbitrum_Bytes\n  stakingToken_not: treasuryArbitrum_Bytes\n  stakingToken_not_contains: treasuryArbitrum_Bytes\n  stakingToken_not_in: [treasuryArbitrum_Bytes!]\n}\n\nenum treasuryArbitrum_ConvexRewardPoolSnapshot_orderBy {\n  address\n  block\n  id\n  stakingToken\n}\n\ntype treasuryArbitrum_DailyBond {\n  amount: treasuryArbitrum_BigDecimal!\n  id: ID!\n  timestamp: BigInt!\n  token: treasuryArbitrum_Token!\n  value: treasuryArbitrum_BigDecimal!\n  _join: Query!\n}\n\ninput treasuryArbitrum_DailyBond_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryArbitrum_BlockChangedFilter\n  amount: treasuryArbitrum_BigDecimal\n  amount_gt: treasuryArbitrum_BigDecimal\n  amount_gte: treasuryArbitrum_BigDecimal\n  amount_in: [treasuryArbitrum_BigDecimal!]\n  amount_lt: treasuryArbitrum_BigDecimal\n  amount_lte: treasuryArbitrum_BigDecimal\n  amount_not: treasuryArbitrum_BigDecimal\n  amount_not_in: [treasuryArbitrum_BigDecimal!]\n  and: [treasuryArbitrum_DailyBond_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryArbitrum_DailyBond_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  token_: treasuryArbitrum_Token_filter\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  value: treasuryArbitrum_BigDecimal\n  value_gt: treasuryArbitrum_BigDecimal\n  value_gte: treasuryArbitrum_BigDecimal\n  value_in: [treasuryArbitrum_BigDecimal!]\n  value_lt: treasuryArbitrum_BigDecimal\n  value_lte: treasuryArbitrum_BigDecimal\n  value_not: treasuryArbitrum_BigDecimal\n  value_not_in: [treasuryArbitrum_BigDecimal!]\n}\n\nenum treasuryArbitrum_DailyBond_orderBy {\n  amount\n  id\n  timestamp\n  token\n  token__id\n  value\n}\n\ntype treasuryArbitrum_DailyStakingReward {\n  amount: treasuryArbitrum_BigDecimal!\n  id: ID!\n  timestamp: BigInt!\n  value: treasuryArbitrum_BigDecimal!\n  _join: Query!\n}\n\ninput treasuryArbitrum_DailyStakingReward_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryArbitrum_BlockChangedFilter\n  amount: treasuryArbitrum_BigDecimal\n  amount_gt: treasuryArbitrum_BigDecimal\n  amount_gte: treasuryArbitrum_BigDecimal\n  amount_in: [treasuryArbitrum_BigDecimal!]\n  amount_lt: treasuryArbitrum_BigDecimal\n  amount_lte: treasuryArbitrum_BigDecimal\n  amount_not: treasuryArbitrum_BigDecimal\n  amount_not_in: [treasuryArbitrum_BigDecimal!]\n  and: [treasuryArbitrum_DailyStakingReward_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryArbitrum_DailyStakingReward_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  value: treasuryArbitrum_BigDecimal\n  value_gt: treasuryArbitrum_BigDecimal\n  value_gte: treasuryArbitrum_BigDecimal\n  value_in: [treasuryArbitrum_BigDecimal!]\n  value_lt: treasuryArbitrum_BigDecimal\n  value_lte: treasuryArbitrum_BigDecimal\n  value_not: treasuryArbitrum_BigDecimal\n  value_not_in: [treasuryArbitrum_BigDecimal!]\n}\n\nenum treasuryArbitrum_DailyStakingReward_orderBy {\n  amount\n  id\n  timestamp\n  value\n}\n\ntype treasuryArbitrum_ERC20TokenSnapshot {\n  address: treasuryArbitrum_Bytes!\n  decimals: Int!\n  id: ID!\n  totalSupply: treasuryArbitrum_BigDecimal\n  _join: Query!\n}\n\ninput treasuryArbitrum_ERC20TokenSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryArbitrum_BlockChangedFilter\n  address: treasuryArbitrum_Bytes\n  address_contains: treasuryArbitrum_Bytes\n  address_gt: treasuryArbitrum_Bytes\n  address_gte: treasuryArbitrum_Bytes\n  address_in: [treasuryArbitrum_Bytes!]\n  address_lt: treasuryArbitrum_Bytes\n  address_lte: treasuryArbitrum_Bytes\n  address_not: treasuryArbitrum_Bytes\n  address_not_contains: treasuryArbitrum_Bytes\n  address_not_in: [treasuryArbitrum_Bytes!]\n  and: [treasuryArbitrum_ERC20TokenSnapshot_filter]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryArbitrum_ERC20TokenSnapshot_filter]\n  totalSupply: treasuryArbitrum_BigDecimal\n  totalSupply_gt: treasuryArbitrum_BigDecimal\n  totalSupply_gte: treasuryArbitrum_BigDecimal\n  totalSupply_in: [treasuryArbitrum_BigDecimal!]\n  totalSupply_lt: treasuryArbitrum_BigDecimal\n  totalSupply_lte: treasuryArbitrum_BigDecimal\n  totalSupply_not: treasuryArbitrum_BigDecimal\n  totalSupply_not_in: [treasuryArbitrum_BigDecimal!]\n}\n\nenum treasuryArbitrum_ERC20TokenSnapshot_orderBy {\n  address\n  decimals\n  id\n  totalSupply\n}\n\ntype treasuryArbitrum_GnosisAuction {\n  auctionCloseTimestamp: BigInt\n  auctionOpenTimestamp: BigInt!\n  bidQuantity: treasuryArbitrum_BigDecimal\n  id: ID!\n  payoutCapacity: treasuryArbitrum_BigDecimal!\n  termSeconds: BigInt!\n  _join: Query!\n}\n\ntype treasuryArbitrum_GnosisAuctionRoot {\n  id: ID!\n  markets: [BigInt!]!\n  _join: Query!\n}\n\ninput treasuryArbitrum_GnosisAuctionRoot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryArbitrum_BlockChangedFilter\n  and: [treasuryArbitrum_GnosisAuctionRoot_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  markets: [BigInt!]\n  markets_contains: [BigInt!]\n  markets_contains_nocase: [BigInt!]\n  markets_not: [BigInt!]\n  markets_not_contains: [BigInt!]\n  markets_not_contains_nocase: [BigInt!]\n  or: [treasuryArbitrum_GnosisAuctionRoot_filter]\n}\n\nenum treasuryArbitrum_GnosisAuctionRoot_orderBy {\n  id\n  markets\n}\n\ninput treasuryArbitrum_GnosisAuction_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryArbitrum_BlockChangedFilter\n  and: [treasuryArbitrum_GnosisAuction_filter]\n  auctionCloseTimestamp: BigInt\n  auctionCloseTimestamp_gt: BigInt\n  auctionCloseTimestamp_gte: BigInt\n  auctionCloseTimestamp_in: [BigInt!]\n  auctionCloseTimestamp_lt: BigInt\n  auctionCloseTimestamp_lte: BigInt\n  auctionCloseTimestamp_not: BigInt\n  auctionCloseTimestamp_not_in: [BigInt!]\n  auctionOpenTimestamp: BigInt\n  auctionOpenTimestamp_gt: BigInt\n  auctionOpenTimestamp_gte: BigInt\n  auctionOpenTimestamp_in: [BigInt!]\n  auctionOpenTimestamp_lt: BigInt\n  auctionOpenTimestamp_lte: BigInt\n  auctionOpenTimestamp_not: BigInt\n  auctionOpenTimestamp_not_in: [BigInt!]\n  bidQuantity: treasuryArbitrum_BigDecimal\n  bidQuantity_gt: treasuryArbitrum_BigDecimal\n  bidQuantity_gte: treasuryArbitrum_BigDecimal\n  bidQuantity_in: [treasuryArbitrum_BigDecimal!]\n  bidQuantity_lt: treasuryArbitrum_BigDecimal\n  bidQuantity_lte: treasuryArbitrum_BigDecimal\n  bidQuantity_not: treasuryArbitrum_BigDecimal\n  bidQuantity_not_in: [treasuryArbitrum_BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryArbitrum_GnosisAuction_filter]\n  payoutCapacity: treasuryArbitrum_BigDecimal\n  payoutCapacity_gt: treasuryArbitrum_BigDecimal\n  payoutCapacity_gte: treasuryArbitrum_BigDecimal\n  payoutCapacity_in: [treasuryArbitrum_BigDecimal!]\n  payoutCapacity_lt: treasuryArbitrum_BigDecimal\n  payoutCapacity_lte: treasuryArbitrum_BigDecimal\n  payoutCapacity_not: treasuryArbitrum_BigDecimal\n  payoutCapacity_not_in: [treasuryArbitrum_BigDecimal!]\n  termSeconds: BigInt\n  termSeconds_gt: BigInt\n  termSeconds_gte: BigInt\n  termSeconds_in: [BigInt!]\n  termSeconds_lt: BigInt\n  termSeconds_lte: BigInt\n  termSeconds_not: BigInt\n  termSeconds_not_in: [BigInt!]\n}\n\nenum treasuryArbitrum_GnosisAuction_orderBy {\n  auctionCloseTimestamp\n  auctionOpenTimestamp\n  bidQuantity\n  id\n  payoutCapacity\n  termSeconds\n}\n\n\"\"\"Defines the order direction, either ascending or descending\"\"\"\nenum treasuryArbitrum_OrderDirection {\n  asc\n  desc\n}\n\ntype treasuryArbitrum_PoolSnapshot {\n  balances: [treasuryArbitrum_BigDecimal!]!\n  block: BigInt!\n  decimals: Int!\n  id: ID!\n  pool: treasuryArbitrum_Bytes!\n  poolToken: treasuryArbitrum_Bytes\n  tokens: [treasuryArbitrum_Bytes!]!\n  totalSupply: treasuryArbitrum_BigDecimal!\n  weights: [treasuryArbitrum_BigDecimal!]\n  _join: Query!\n}\n\ninput treasuryArbitrum_PoolSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryArbitrum_BlockChangedFilter\n  and: [treasuryArbitrum_PoolSnapshot_filter]\n  balances: [treasuryArbitrum_BigDecimal!]\n  balances_contains: [treasuryArbitrum_BigDecimal!]\n  balances_contains_nocase: [treasuryArbitrum_BigDecimal!]\n  balances_not: [treasuryArbitrum_BigDecimal!]\n  balances_not_contains: [treasuryArbitrum_BigDecimal!]\n  balances_not_contains_nocase: [treasuryArbitrum_BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryArbitrum_PoolSnapshot_filter]\n  pool: treasuryArbitrum_Bytes\n  poolToken: treasuryArbitrum_Bytes\n  poolToken_contains: treasuryArbitrum_Bytes\n  poolToken_gt: treasuryArbitrum_Bytes\n  poolToken_gte: treasuryArbitrum_Bytes\n  poolToken_in: [treasuryArbitrum_Bytes!]\n  poolToken_lt: treasuryArbitrum_Bytes\n  poolToken_lte: treasuryArbitrum_Bytes\n  poolToken_not: treasuryArbitrum_Bytes\n  poolToken_not_contains: treasuryArbitrum_Bytes\n  poolToken_not_in: [treasuryArbitrum_Bytes!]\n  pool_contains: treasuryArbitrum_Bytes\n  pool_gt: treasuryArbitrum_Bytes\n  pool_gte: treasuryArbitrum_Bytes\n  pool_in: [treasuryArbitrum_Bytes!]\n  pool_lt: treasuryArbitrum_Bytes\n  pool_lte: treasuryArbitrum_Bytes\n  pool_not: treasuryArbitrum_Bytes\n  pool_not_contains: treasuryArbitrum_Bytes\n  pool_not_in: [treasuryArbitrum_Bytes!]\n  tokens: [treasuryArbitrum_Bytes!]\n  tokens_contains: [treasuryArbitrum_Bytes!]\n  tokens_contains_nocase: [treasuryArbitrum_Bytes!]\n  tokens_not: [treasuryArbitrum_Bytes!]\n  tokens_not_contains: [treasuryArbitrum_Bytes!]\n  tokens_not_contains_nocase: [treasuryArbitrum_Bytes!]\n  totalSupply: treasuryArbitrum_BigDecimal\n  totalSupply_gt: treasuryArbitrum_BigDecimal\n  totalSupply_gte: treasuryArbitrum_BigDecimal\n  totalSupply_in: [treasuryArbitrum_BigDecimal!]\n  totalSupply_lt: treasuryArbitrum_BigDecimal\n  totalSupply_lte: treasuryArbitrum_BigDecimal\n  totalSupply_not: treasuryArbitrum_BigDecimal\n  totalSupply_not_in: [treasuryArbitrum_BigDecimal!]\n  weights: [treasuryArbitrum_BigDecimal!]\n  weights_contains: [treasuryArbitrum_BigDecimal!]\n  weights_contains_nocase: [treasuryArbitrum_BigDecimal!]\n  weights_not: [treasuryArbitrum_BigDecimal!]\n  weights_not_contains: [treasuryArbitrum_BigDecimal!]\n  weights_not_contains_nocase: [treasuryArbitrum_BigDecimal!]\n}\n\nenum treasuryArbitrum_PoolSnapshot_orderBy {\n  balances\n  block\n  decimals\n  id\n  pool\n  poolToken\n  tokens\n  totalSupply\n  weights\n}\n\ntype treasuryArbitrum_PriceSnapshot {\n  block: BigInt!\n  date: String!\n  id: ID!\n  priceGOhm: treasuryArbitrum_BigDecimal!\n  priceOhm: treasuryArbitrum_BigDecimal!\n  timestamp: BigInt!\n  _join: Query!\n}\n\ninput treasuryArbitrum_PriceSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryArbitrum_BlockChangedFilter\n  and: [treasuryArbitrum_PriceSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryArbitrum_PriceSnapshot_filter]\n  priceGOhm: treasuryArbitrum_BigDecimal\n  priceGOhm_gt: treasuryArbitrum_BigDecimal\n  priceGOhm_gte: treasuryArbitrum_BigDecimal\n  priceGOhm_in: [treasuryArbitrum_BigDecimal!]\n  priceGOhm_lt: treasuryArbitrum_BigDecimal\n  priceGOhm_lte: treasuryArbitrum_BigDecimal\n  priceGOhm_not: treasuryArbitrum_BigDecimal\n  priceGOhm_not_in: [treasuryArbitrum_BigDecimal!]\n  priceOhm: treasuryArbitrum_BigDecimal\n  priceOhm_gt: treasuryArbitrum_BigDecimal\n  priceOhm_gte: treasuryArbitrum_BigDecimal\n  priceOhm_in: [treasuryArbitrum_BigDecimal!]\n  priceOhm_lt: treasuryArbitrum_BigDecimal\n  priceOhm_lte: treasuryArbitrum_BigDecimal\n  priceOhm_not: treasuryArbitrum_BigDecimal\n  priceOhm_not_in: [treasuryArbitrum_BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n}\n\nenum treasuryArbitrum_PriceSnapshot_orderBy {\n  block\n  date\n  id\n  priceGOhm\n  priceOhm\n  timestamp\n}\n\ntype treasuryArbitrum_ProtocolMetric {\n  block: BigInt!\n  currentAPY: treasuryArbitrum_BigDecimal!\n  currentIndex: treasuryArbitrum_BigDecimal!\n  date: String!\n  gOhmPrice: treasuryArbitrum_BigDecimal!\n  gOhmSyntheticSupply: treasuryArbitrum_BigDecimal\n  gOhmTotalSupply: treasuryArbitrum_BigDecimal!\n  id: ID!\n  marketCap: treasuryArbitrum_BigDecimal\n  nextDistributedOhm: treasuryArbitrum_BigDecimal!\n  nextEpochRebase: treasuryArbitrum_BigDecimal!\n  ohmCirculatingSupply: treasuryArbitrum_BigDecimal\n  ohmFloatingSupply: treasuryArbitrum_BigDecimal\n  ohmPrice: treasuryArbitrum_BigDecimal!\n  ohmTotalSupply: treasuryArbitrum_BigDecimal!\n  sOhmCirculatingSupply: treasuryArbitrum_BigDecimal!\n  timestamp: BigInt!\n  totalValueLocked: treasuryArbitrum_BigDecimal!\n  treasuryLiquidBacking: treasuryArbitrum_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic: treasuryArbitrum_BigDecimal\n  treasuryLiquidBackingPerOhmFloating: treasuryArbitrum_BigDecimal\n  treasuryMarketValue: treasuryArbitrum_BigDecimal\n  _join: Query!\n}\n\ninput treasuryArbitrum_ProtocolMetric_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryArbitrum_BlockChangedFilter\n  and: [treasuryArbitrum_ProtocolMetric_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  currentAPY: treasuryArbitrum_BigDecimal\n  currentAPY_gt: treasuryArbitrum_BigDecimal\n  currentAPY_gte: treasuryArbitrum_BigDecimal\n  currentAPY_in: [treasuryArbitrum_BigDecimal!]\n  currentAPY_lt: treasuryArbitrum_BigDecimal\n  currentAPY_lte: treasuryArbitrum_BigDecimal\n  currentAPY_not: treasuryArbitrum_BigDecimal\n  currentAPY_not_in: [treasuryArbitrum_BigDecimal!]\n  currentIndex: treasuryArbitrum_BigDecimal\n  currentIndex_gt: treasuryArbitrum_BigDecimal\n  currentIndex_gte: treasuryArbitrum_BigDecimal\n  currentIndex_in: [treasuryArbitrum_BigDecimal!]\n  currentIndex_lt: treasuryArbitrum_BigDecimal\n  currentIndex_lte: treasuryArbitrum_BigDecimal\n  currentIndex_not: treasuryArbitrum_BigDecimal\n  currentIndex_not_in: [treasuryArbitrum_BigDecimal!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  gOhmPrice: treasuryArbitrum_BigDecimal\n  gOhmPrice_gt: treasuryArbitrum_BigDecimal\n  gOhmPrice_gte: treasuryArbitrum_BigDecimal\n  gOhmPrice_in: [treasuryArbitrum_BigDecimal!]\n  gOhmPrice_lt: treasuryArbitrum_BigDecimal\n  gOhmPrice_lte: treasuryArbitrum_BigDecimal\n  gOhmPrice_not: treasuryArbitrum_BigDecimal\n  gOhmPrice_not_in: [treasuryArbitrum_BigDecimal!]\n  gOhmSyntheticSupply: treasuryArbitrum_BigDecimal\n  gOhmSyntheticSupply_gt: treasuryArbitrum_BigDecimal\n  gOhmSyntheticSupply_gte: treasuryArbitrum_BigDecimal\n  gOhmSyntheticSupply_in: [treasuryArbitrum_BigDecimal!]\n  gOhmSyntheticSupply_lt: treasuryArbitrum_BigDecimal\n  gOhmSyntheticSupply_lte: treasuryArbitrum_BigDecimal\n  gOhmSyntheticSupply_not: treasuryArbitrum_BigDecimal\n  gOhmSyntheticSupply_not_in: [treasuryArbitrum_BigDecimal!]\n  gOhmTotalSupply: treasuryArbitrum_BigDecimal\n  gOhmTotalSupply_gt: treasuryArbitrum_BigDecimal\n  gOhmTotalSupply_gte: treasuryArbitrum_BigDecimal\n  gOhmTotalSupply_in: [treasuryArbitrum_BigDecimal!]\n  gOhmTotalSupply_lt: treasuryArbitrum_BigDecimal\n  gOhmTotalSupply_lte: treasuryArbitrum_BigDecimal\n  gOhmTotalSupply_not: treasuryArbitrum_BigDecimal\n  gOhmTotalSupply_not_in: [treasuryArbitrum_BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  marketCap: treasuryArbitrum_BigDecimal\n  marketCap_gt: treasuryArbitrum_BigDecimal\n  marketCap_gte: treasuryArbitrum_BigDecimal\n  marketCap_in: [treasuryArbitrum_BigDecimal!]\n  marketCap_lt: treasuryArbitrum_BigDecimal\n  marketCap_lte: treasuryArbitrum_BigDecimal\n  marketCap_not: treasuryArbitrum_BigDecimal\n  marketCap_not_in: [treasuryArbitrum_BigDecimal!]\n  nextDistributedOhm: treasuryArbitrum_BigDecimal\n  nextDistributedOhm_gt: treasuryArbitrum_BigDecimal\n  nextDistributedOhm_gte: treasuryArbitrum_BigDecimal\n  nextDistributedOhm_in: [treasuryArbitrum_BigDecimal!]\n  nextDistributedOhm_lt: treasuryArbitrum_BigDecimal\n  nextDistributedOhm_lte: treasuryArbitrum_BigDecimal\n  nextDistributedOhm_not: treasuryArbitrum_BigDecimal\n  nextDistributedOhm_not_in: [treasuryArbitrum_BigDecimal!]\n  nextEpochRebase: treasuryArbitrum_BigDecimal\n  nextEpochRebase_gt: treasuryArbitrum_BigDecimal\n  nextEpochRebase_gte: treasuryArbitrum_BigDecimal\n  nextEpochRebase_in: [treasuryArbitrum_BigDecimal!]\n  nextEpochRebase_lt: treasuryArbitrum_BigDecimal\n  nextEpochRebase_lte: treasuryArbitrum_BigDecimal\n  nextEpochRebase_not: treasuryArbitrum_BigDecimal\n  nextEpochRebase_not_in: [treasuryArbitrum_BigDecimal!]\n  ohmCirculatingSupply: treasuryArbitrum_BigDecimal\n  ohmCirculatingSupply_gt: treasuryArbitrum_BigDecimal\n  ohmCirculatingSupply_gte: treasuryArbitrum_BigDecimal\n  ohmCirculatingSupply_in: [treasuryArbitrum_BigDecimal!]\n  ohmCirculatingSupply_lt: treasuryArbitrum_BigDecimal\n  ohmCirculatingSupply_lte: treasuryArbitrum_BigDecimal\n  ohmCirculatingSupply_not: treasuryArbitrum_BigDecimal\n  ohmCirculatingSupply_not_in: [treasuryArbitrum_BigDecimal!]\n  ohmFloatingSupply: treasuryArbitrum_BigDecimal\n  ohmFloatingSupply_gt: treasuryArbitrum_BigDecimal\n  ohmFloatingSupply_gte: treasuryArbitrum_BigDecimal\n  ohmFloatingSupply_in: [treasuryArbitrum_BigDecimal!]\n  ohmFloatingSupply_lt: treasuryArbitrum_BigDecimal\n  ohmFloatingSupply_lte: treasuryArbitrum_BigDecimal\n  ohmFloatingSupply_not: treasuryArbitrum_BigDecimal\n  ohmFloatingSupply_not_in: [treasuryArbitrum_BigDecimal!]\n  ohmPrice: treasuryArbitrum_BigDecimal\n  ohmPrice_gt: treasuryArbitrum_BigDecimal\n  ohmPrice_gte: treasuryArbitrum_BigDecimal\n  ohmPrice_in: [treasuryArbitrum_BigDecimal!]\n  ohmPrice_lt: treasuryArbitrum_BigDecimal\n  ohmPrice_lte: treasuryArbitrum_BigDecimal\n  ohmPrice_not: treasuryArbitrum_BigDecimal\n  ohmPrice_not_in: [treasuryArbitrum_BigDecimal!]\n  ohmTotalSupply: treasuryArbitrum_BigDecimal\n  ohmTotalSupply_gt: treasuryArbitrum_BigDecimal\n  ohmTotalSupply_gte: treasuryArbitrum_BigDecimal\n  ohmTotalSupply_in: [treasuryArbitrum_BigDecimal!]\n  ohmTotalSupply_lt: treasuryArbitrum_BigDecimal\n  ohmTotalSupply_lte: treasuryArbitrum_BigDecimal\n  ohmTotalSupply_not: treasuryArbitrum_BigDecimal\n  ohmTotalSupply_not_in: [treasuryArbitrum_BigDecimal!]\n  or: [treasuryArbitrum_ProtocolMetric_filter]\n  sOhmCirculatingSupply: treasuryArbitrum_BigDecimal\n  sOhmCirculatingSupply_gt: treasuryArbitrum_BigDecimal\n  sOhmCirculatingSupply_gte: treasuryArbitrum_BigDecimal\n  sOhmCirculatingSupply_in: [treasuryArbitrum_BigDecimal!]\n  sOhmCirculatingSupply_lt: treasuryArbitrum_BigDecimal\n  sOhmCirculatingSupply_lte: treasuryArbitrum_BigDecimal\n  sOhmCirculatingSupply_not: treasuryArbitrum_BigDecimal\n  sOhmCirculatingSupply_not_in: [treasuryArbitrum_BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  totalValueLocked: treasuryArbitrum_BigDecimal\n  totalValueLocked_gt: treasuryArbitrum_BigDecimal\n  totalValueLocked_gte: treasuryArbitrum_BigDecimal\n  totalValueLocked_in: [treasuryArbitrum_BigDecimal!]\n  totalValueLocked_lt: treasuryArbitrum_BigDecimal\n  totalValueLocked_lte: treasuryArbitrum_BigDecimal\n  totalValueLocked_not: treasuryArbitrum_BigDecimal\n  totalValueLocked_not_in: [treasuryArbitrum_BigDecimal!]\n  treasuryLiquidBacking: treasuryArbitrum_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic: treasuryArbitrum_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_gt: treasuryArbitrum_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_gte: treasuryArbitrum_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_in: [treasuryArbitrum_BigDecimal!]\n  treasuryLiquidBackingPerGOhmSynthetic_lt: treasuryArbitrum_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_lte: treasuryArbitrum_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_not: treasuryArbitrum_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_not_in: [treasuryArbitrum_BigDecimal!]\n  treasuryLiquidBackingPerOhmFloating: treasuryArbitrum_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_gt: treasuryArbitrum_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_gte: treasuryArbitrum_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_in: [treasuryArbitrum_BigDecimal!]\n  treasuryLiquidBackingPerOhmFloating_lt: treasuryArbitrum_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_lte: treasuryArbitrum_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_not: treasuryArbitrum_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_not_in: [treasuryArbitrum_BigDecimal!]\n  treasuryLiquidBacking_gt: treasuryArbitrum_BigDecimal\n  treasuryLiquidBacking_gte: treasuryArbitrum_BigDecimal\n  treasuryLiquidBacking_in: [treasuryArbitrum_BigDecimal!]\n  treasuryLiquidBacking_lt: treasuryArbitrum_BigDecimal\n  treasuryLiquidBacking_lte: treasuryArbitrum_BigDecimal\n  treasuryLiquidBacking_not: treasuryArbitrum_BigDecimal\n  treasuryLiquidBacking_not_in: [treasuryArbitrum_BigDecimal!]\n  treasuryMarketValue: treasuryArbitrum_BigDecimal\n  treasuryMarketValue_gt: treasuryArbitrum_BigDecimal\n  treasuryMarketValue_gte: treasuryArbitrum_BigDecimal\n  treasuryMarketValue_in: [treasuryArbitrum_BigDecimal!]\n  treasuryMarketValue_lt: treasuryArbitrum_BigDecimal\n  treasuryMarketValue_lte: treasuryArbitrum_BigDecimal\n  treasuryMarketValue_not: treasuryArbitrum_BigDecimal\n  treasuryMarketValue_not_in: [treasuryArbitrum_BigDecimal!]\n}\n\nenum treasuryArbitrum_ProtocolMetric_orderBy {\n  block\n  currentAPY\n  currentIndex\n  date\n  gOhmPrice\n  gOhmSyntheticSupply\n  gOhmTotalSupply\n  id\n  marketCap\n  nextDistributedOhm\n  nextEpochRebase\n  ohmCirculatingSupply\n  ohmFloatingSupply\n  ohmPrice\n  ohmTotalSupply\n  sOhmCirculatingSupply\n  timestamp\n  totalValueLocked\n  treasuryLiquidBacking\n  treasuryLiquidBackingPerGOhmSynthetic\n  treasuryLiquidBackingPerOhmFloating\n  treasuryMarketValue\n}\n\ntype Query {\n  \"\"\"Access to subgraph metadata\"\"\"\n  treasuryArbitrum__meta(block: treasuryArbitrum_Block_height): treasuryArbitrum__Meta_\n  treasuryArbitrum_balancerPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_BalancerPoolSnapshot\n  treasuryArbitrum_balancerPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_BalancerPoolSnapshot_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_BalancerPoolSnapshot_filter\n  ): [treasuryArbitrum_BalancerPoolSnapshot!]!\n  treasuryArbitrum_bondDiscount(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_BondDiscount\n  treasuryArbitrum_bondDiscounts(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_BondDiscount_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_BondDiscount_filter\n  ): [treasuryArbitrum_BondDiscount!]!\n  treasuryArbitrum_convexRewardPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_ConvexRewardPoolSnapshot\n  treasuryArbitrum_convexRewardPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_ConvexRewardPoolSnapshot_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_ConvexRewardPoolSnapshot_filter\n  ): [treasuryArbitrum_ConvexRewardPoolSnapshot!]!\n  treasuryArbitrum_dailyBond(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_DailyBond\n  treasuryArbitrum_dailyBonds(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_DailyBond_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_DailyBond_filter\n  ): [treasuryArbitrum_DailyBond!]!\n  treasuryArbitrum_dailyStakingReward(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_DailyStakingReward\n  treasuryArbitrum_dailyStakingRewards(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_DailyStakingReward_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_DailyStakingReward_filter\n  ): [treasuryArbitrum_DailyStakingReward!]!\n  treasuryArbitrum_erc20TokenSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_ERC20TokenSnapshot\n  treasuryArbitrum_erc20TokenSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_ERC20TokenSnapshot_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_ERC20TokenSnapshot_filter\n  ): [treasuryArbitrum_ERC20TokenSnapshot!]!\n  treasuryArbitrum_gnosisAuction(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_GnosisAuction\n  treasuryArbitrum_gnosisAuctionRoot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_GnosisAuctionRoot\n  treasuryArbitrum_gnosisAuctionRoots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_GnosisAuctionRoot_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_GnosisAuctionRoot_filter\n  ): [treasuryArbitrum_GnosisAuctionRoot!]!\n  treasuryArbitrum_gnosisAuctions(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_GnosisAuction_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_GnosisAuction_filter\n  ): [treasuryArbitrum_GnosisAuction!]!\n  treasuryArbitrum_poolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_PoolSnapshot\n  treasuryArbitrum_poolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_PoolSnapshot_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_PoolSnapshot_filter\n  ): [treasuryArbitrum_PoolSnapshot!]!\n  treasuryArbitrum_priceSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_PriceSnapshot\n  treasuryArbitrum_priceSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_PriceSnapshot_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_PriceSnapshot_filter\n  ): [treasuryArbitrum_PriceSnapshot!]!\n  treasuryArbitrum_protocolMetric(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_ProtocolMetric\n  treasuryArbitrum_protocolMetrics(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_ProtocolMetric_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_ProtocolMetric_filter\n  ): [treasuryArbitrum_ProtocolMetric!]!\n  treasuryArbitrum_rebase(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_Rebase\n  treasuryArbitrum_rebases(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_Rebase_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_Rebase_filter\n  ): [treasuryArbitrum_Rebase!]!\n  treasuryArbitrum_stakingPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_StakingPoolSnapshot\n  treasuryArbitrum_stakingPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_StakingPoolSnapshot_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_StakingPoolSnapshot_filter\n  ): [treasuryArbitrum_StakingPoolSnapshot!]!\n  treasuryArbitrum_token(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_Token\n  treasuryArbitrum_tokenPriceSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_TokenPriceSnapshot\n  treasuryArbitrum_tokenPriceSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_TokenPriceSnapshot_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_TokenPriceSnapshot_filter\n  ): [treasuryArbitrum_TokenPriceSnapshot!]!\n  treasuryArbitrum_tokenRecord(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_TokenRecord\n  treasuryArbitrum_tokenRecords(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_TokenRecord_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_TokenRecord_filter\n  ): [treasuryArbitrum_TokenRecord!]!\n  treasuryArbitrum_tokenSupplies(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_TokenSupply_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_TokenSupply_filter\n  ): [treasuryArbitrum_TokenSupply!]!\n  treasuryArbitrum_tokenSupply(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_TokenSupply\n  treasuryArbitrum_tokens(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_Token_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_Token_filter\n  ): [treasuryArbitrum_Token!]!\n  \"\"\"Access to subgraph metadata\"\"\"\n  treasuryEthereum__meta(block: treasuryEthereum_Block_height): treasuryEthereum__Meta_\n  treasuryEthereum_balancerPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_BalancerPoolSnapshot\n  treasuryEthereum_balancerPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_BalancerPoolSnapshot_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_BalancerPoolSnapshot_filter\n  ): [treasuryEthereum_BalancerPoolSnapshot!]!\n  treasuryEthereum_bondDiscount(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_BondDiscount\n  treasuryEthereum_bondDiscounts(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_BondDiscount_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_BondDiscount_filter\n  ): [treasuryEthereum_BondDiscount!]!\n  treasuryEthereum_convexRewardPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_ConvexRewardPoolSnapshot\n  treasuryEthereum_convexRewardPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_ConvexRewardPoolSnapshot_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_ConvexRewardPoolSnapshot_filter\n  ): [treasuryEthereum_ConvexRewardPoolSnapshot!]!\n  treasuryEthereum_dailyBond(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_DailyBond\n  treasuryEthereum_dailyBonds(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_DailyBond_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_DailyBond_filter\n  ): [treasuryEthereum_DailyBond!]!\n  treasuryEthereum_dailyStakingReward(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_DailyStakingReward\n  treasuryEthereum_dailyStakingRewards(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_DailyStakingReward_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_DailyStakingReward_filter\n  ): [treasuryEthereum_DailyStakingReward!]!\n  treasuryEthereum_erc20TokenSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_ERC20TokenSnapshot\n  treasuryEthereum_erc20TokenSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_ERC20TokenSnapshot_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_ERC20TokenSnapshot_filter\n  ): [treasuryEthereum_ERC20TokenSnapshot!]!\n  treasuryEthereum_gnosisAuction(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_GnosisAuction\n  treasuryEthereum_gnosisAuctionRoot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_GnosisAuctionRoot\n  treasuryEthereum_gnosisAuctionRoots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_GnosisAuctionRoot_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_GnosisAuctionRoot_filter\n  ): [treasuryEthereum_GnosisAuctionRoot!]!\n  treasuryEthereum_gnosisAuctions(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_GnosisAuction_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_GnosisAuction_filter\n  ): [treasuryEthereum_GnosisAuction!]!\n  treasuryEthereum_poolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_PoolSnapshot\n  treasuryEthereum_poolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_PoolSnapshot_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_PoolSnapshot_filter\n  ): [treasuryEthereum_PoolSnapshot!]!\n  treasuryEthereum_priceSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_PriceSnapshot\n  treasuryEthereum_priceSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_PriceSnapshot_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_PriceSnapshot_filter\n  ): [treasuryEthereum_PriceSnapshot!]!\n  treasuryEthereum_protocolMetric(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_ProtocolMetric\n  treasuryEthereum_protocolMetrics(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_ProtocolMetric_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_ProtocolMetric_filter\n  ): [treasuryEthereum_ProtocolMetric!]!\n  treasuryEthereum_rebase(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_Rebase\n  treasuryEthereum_rebases(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_Rebase_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_Rebase_filter\n  ): [treasuryEthereum_Rebase!]!\n  treasuryEthereum_stakingPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_StakingPoolSnapshot\n  treasuryEthereum_stakingPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_StakingPoolSnapshot_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_StakingPoolSnapshot_filter\n  ): [treasuryEthereum_StakingPoolSnapshot!]!\n  treasuryEthereum_token(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_Token\n  treasuryEthereum_tokenPriceSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_TokenPriceSnapshot\n  treasuryEthereum_tokenPriceSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_TokenPriceSnapshot_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_TokenPriceSnapshot_filter\n  ): [treasuryEthereum_TokenPriceSnapshot!]!\n  treasuryEthereum_tokenRecord(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_TokenRecord\n  treasuryEthereum_tokenRecords(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_TokenRecord_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_TokenRecord_filter\n  ): [treasuryEthereum_TokenRecord!]!\n  treasuryEthereum_tokenSupplies(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_TokenSupply_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_TokenSupply_filter\n  ): [treasuryEthereum_TokenSupply!]!\n  treasuryEthereum_tokenSupply(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_TokenSupply\n  treasuryEthereum_tokens(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_Token_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_Token_filter\n  ): [treasuryEthereum_Token!]!\n  \"\"\"Access to subgraph metadata\"\"\"\n  treasuryFantom__meta(block: treasuryFantom_Block_height): treasuryFantom__Meta_\n  treasuryFantom_balancerPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_BalancerPoolSnapshot\n  treasuryFantom_balancerPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_BalancerPoolSnapshot_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_BalancerPoolSnapshot_filter\n  ): [treasuryFantom_BalancerPoolSnapshot!]!\n  treasuryFantom_bondDiscount(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_BondDiscount\n  treasuryFantom_bondDiscounts(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_BondDiscount_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_BondDiscount_filter\n  ): [treasuryFantom_BondDiscount!]!\n  treasuryFantom_convexRewardPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_ConvexRewardPoolSnapshot\n  treasuryFantom_convexRewardPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_ConvexRewardPoolSnapshot_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_ConvexRewardPoolSnapshot_filter\n  ): [treasuryFantom_ConvexRewardPoolSnapshot!]!\n  treasuryFantom_dailyBond(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_DailyBond\n  treasuryFantom_dailyBonds(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_DailyBond_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_DailyBond_filter\n  ): [treasuryFantom_DailyBond!]!\n  treasuryFantom_dailyStakingReward(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_DailyStakingReward\n  treasuryFantom_dailyStakingRewards(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_DailyStakingReward_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_DailyStakingReward_filter\n  ): [treasuryFantom_DailyStakingReward!]!\n  treasuryFantom_erc20TokenSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_ERC20TokenSnapshot\n  treasuryFantom_erc20TokenSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_ERC20TokenSnapshot_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_ERC20TokenSnapshot_filter\n  ): [treasuryFantom_ERC20TokenSnapshot!]!\n  treasuryFantom_gnosisAuction(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_GnosisAuction\n  treasuryFantom_gnosisAuctionRoot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_GnosisAuctionRoot\n  treasuryFantom_gnosisAuctionRoots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_GnosisAuctionRoot_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_GnosisAuctionRoot_filter\n  ): [treasuryFantom_GnosisAuctionRoot!]!\n  treasuryFantom_gnosisAuctions(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_GnosisAuction_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_GnosisAuction_filter\n  ): [treasuryFantom_GnosisAuction!]!\n  treasuryFantom_poolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_PoolSnapshot\n  treasuryFantom_poolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_PoolSnapshot_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_PoolSnapshot_filter\n  ): [treasuryFantom_PoolSnapshot!]!\n  treasuryFantom_priceSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_PriceSnapshot\n  treasuryFantom_priceSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_PriceSnapshot_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_PriceSnapshot_filter\n  ): [treasuryFantom_PriceSnapshot!]!\n  treasuryFantom_protocolMetric(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_ProtocolMetric\n  treasuryFantom_protocolMetrics(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_ProtocolMetric_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_ProtocolMetric_filter\n  ): [treasuryFantom_ProtocolMetric!]!\n  treasuryFantom_rebase(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_Rebase\n  treasuryFantom_rebases(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_Rebase_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_Rebase_filter\n  ): [treasuryFantom_Rebase!]!\n  treasuryFantom_stakingPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_StakingPoolSnapshot\n  treasuryFantom_stakingPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_StakingPoolSnapshot_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_StakingPoolSnapshot_filter\n  ): [treasuryFantom_StakingPoolSnapshot!]!\n  treasuryFantom_token(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_Token\n  treasuryFantom_tokenPriceSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_TokenPriceSnapshot\n  treasuryFantom_tokenPriceSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_TokenPriceSnapshot_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_TokenPriceSnapshot_filter\n  ): [treasuryFantom_TokenPriceSnapshot!]!\n  treasuryFantom_tokenRecord(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_TokenRecord\n  treasuryFantom_tokenRecords(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_TokenRecord_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_TokenRecord_filter\n  ): [treasuryFantom_TokenRecord!]!\n  treasuryFantom_tokenSupplies(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_TokenSupply_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_TokenSupply_filter\n  ): [treasuryFantom_TokenSupply!]!\n  treasuryFantom_tokenSupply(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_TokenSupply\n  treasuryFantom_tokens(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_Token_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_Token_filter\n  ): [treasuryFantom_Token!]!\n  \"\"\"Access to subgraph metadata\"\"\"\n  treasuryPolygon__meta(block: treasuryPolygon_Block_height): treasuryPolygon__Meta_\n  treasuryPolygon_balancerPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_BalancerPoolSnapshot\n  treasuryPolygon_balancerPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_BalancerPoolSnapshot_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_BalancerPoolSnapshot_filter\n  ): [treasuryPolygon_BalancerPoolSnapshot!]!\n  treasuryPolygon_bondDiscount(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_BondDiscount\n  treasuryPolygon_bondDiscounts(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_BondDiscount_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_BondDiscount_filter\n  ): [treasuryPolygon_BondDiscount!]!\n  treasuryPolygon_convexRewardPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_ConvexRewardPoolSnapshot\n  treasuryPolygon_convexRewardPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_ConvexRewardPoolSnapshot_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_ConvexRewardPoolSnapshot_filter\n  ): [treasuryPolygon_ConvexRewardPoolSnapshot!]!\n  treasuryPolygon_dailyBond(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_DailyBond\n  treasuryPolygon_dailyBonds(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_DailyBond_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_DailyBond_filter\n  ): [treasuryPolygon_DailyBond!]!\n  treasuryPolygon_dailyStakingReward(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_DailyStakingReward\n  treasuryPolygon_dailyStakingRewards(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_DailyStakingReward_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_DailyStakingReward_filter\n  ): [treasuryPolygon_DailyStakingReward!]!\n  treasuryPolygon_erc20TokenSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_ERC20TokenSnapshot\n  treasuryPolygon_erc20TokenSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_ERC20TokenSnapshot_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_ERC20TokenSnapshot_filter\n  ): [treasuryPolygon_ERC20TokenSnapshot!]!\n  treasuryPolygon_gnosisAuction(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_GnosisAuction\n  treasuryPolygon_gnosisAuctionRoot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_GnosisAuctionRoot\n  treasuryPolygon_gnosisAuctionRoots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_GnosisAuctionRoot_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_GnosisAuctionRoot_filter\n  ): [treasuryPolygon_GnosisAuctionRoot!]!\n  treasuryPolygon_gnosisAuctions(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_GnosisAuction_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_GnosisAuction_filter\n  ): [treasuryPolygon_GnosisAuction!]!\n  treasuryPolygon_poolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_PoolSnapshot\n  treasuryPolygon_poolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_PoolSnapshot_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_PoolSnapshot_filter\n  ): [treasuryPolygon_PoolSnapshot!]!\n  treasuryPolygon_priceSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_PriceSnapshot\n  treasuryPolygon_priceSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_PriceSnapshot_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_PriceSnapshot_filter\n  ): [treasuryPolygon_PriceSnapshot!]!\n  treasuryPolygon_protocolMetric(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_ProtocolMetric\n  treasuryPolygon_protocolMetrics(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_ProtocolMetric_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_ProtocolMetric_filter\n  ): [treasuryPolygon_ProtocolMetric!]!\n  treasuryPolygon_rebase(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_Rebase\n  treasuryPolygon_rebases(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_Rebase_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_Rebase_filter\n  ): [treasuryPolygon_Rebase!]!\n  treasuryPolygon_stakingPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_StakingPoolSnapshot\n  treasuryPolygon_stakingPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_StakingPoolSnapshot_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_StakingPoolSnapshot_filter\n  ): [treasuryPolygon_StakingPoolSnapshot!]!\n  treasuryPolygon_token(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_Token\n  treasuryPolygon_tokenPriceSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_TokenPriceSnapshot\n  treasuryPolygon_tokenPriceSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_TokenPriceSnapshot_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_TokenPriceSnapshot_filter\n  ): [treasuryPolygon_TokenPriceSnapshot!]!\n  treasuryPolygon_tokenRecord(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_TokenRecord\n  treasuryPolygon_tokenRecords(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_TokenRecord_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_TokenRecord_filter\n  ): [treasuryPolygon_TokenRecord!]!\n  treasuryPolygon_tokenSupplies(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_TokenSupply_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_TokenSupply_filter\n  ): [treasuryPolygon_TokenSupply!]!\n  treasuryPolygon_tokenSupply(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_TokenSupply\n  treasuryPolygon_tokens(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_Token_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_Token_filter\n  ): [treasuryPolygon_Token!]!\n}\n\ntype treasuryArbitrum_Rebase {\n  amount: treasuryArbitrum_BigDecimal!\n  contract: String!\n  id: ID!\n  percentage: treasuryArbitrum_BigDecimal!\n  stakedOhms: treasuryArbitrum_BigDecimal!\n  timestamp: BigInt!\n  value: treasuryArbitrum_BigDecimal!\n  _join: Query!\n}\n\ninput treasuryArbitrum_Rebase_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryArbitrum_BlockChangedFilter\n  amount: treasuryArbitrum_BigDecimal\n  amount_gt: treasuryArbitrum_BigDecimal\n  amount_gte: treasuryArbitrum_BigDecimal\n  amount_in: [treasuryArbitrum_BigDecimal!]\n  amount_lt: treasuryArbitrum_BigDecimal\n  amount_lte: treasuryArbitrum_BigDecimal\n  amount_not: treasuryArbitrum_BigDecimal\n  amount_not_in: [treasuryArbitrum_BigDecimal!]\n  and: [treasuryArbitrum_Rebase_filter]\n  contract: String\n  contract_contains: String\n  contract_contains_nocase: String\n  contract_ends_with: String\n  contract_ends_with_nocase: String\n  contract_gt: String\n  contract_gte: String\n  contract_in: [String!]\n  contract_lt: String\n  contract_lte: String\n  contract_not: String\n  contract_not_contains: String\n  contract_not_contains_nocase: String\n  contract_not_ends_with: String\n  contract_not_ends_with_nocase: String\n  contract_not_in: [String!]\n  contract_not_starts_with: String\n  contract_not_starts_with_nocase: String\n  contract_starts_with: String\n  contract_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryArbitrum_Rebase_filter]\n  percentage: treasuryArbitrum_BigDecimal\n  percentage_gt: treasuryArbitrum_BigDecimal\n  percentage_gte: treasuryArbitrum_BigDecimal\n  percentage_in: [treasuryArbitrum_BigDecimal!]\n  percentage_lt: treasuryArbitrum_BigDecimal\n  percentage_lte: treasuryArbitrum_BigDecimal\n  percentage_not: treasuryArbitrum_BigDecimal\n  percentage_not_in: [treasuryArbitrum_BigDecimal!]\n  stakedOhms: treasuryArbitrum_BigDecimal\n  stakedOhms_gt: treasuryArbitrum_BigDecimal\n  stakedOhms_gte: treasuryArbitrum_BigDecimal\n  stakedOhms_in: [treasuryArbitrum_BigDecimal!]\n  stakedOhms_lt: treasuryArbitrum_BigDecimal\n  stakedOhms_lte: treasuryArbitrum_BigDecimal\n  stakedOhms_not: treasuryArbitrum_BigDecimal\n  stakedOhms_not_in: [treasuryArbitrum_BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  value: treasuryArbitrum_BigDecimal\n  value_gt: treasuryArbitrum_BigDecimal\n  value_gte: treasuryArbitrum_BigDecimal\n  value_in: [treasuryArbitrum_BigDecimal!]\n  value_lt: treasuryArbitrum_BigDecimal\n  value_lte: treasuryArbitrum_BigDecimal\n  value_not: treasuryArbitrum_BigDecimal\n  value_not_in: [treasuryArbitrum_BigDecimal!]\n}\n\nenum treasuryArbitrum_Rebase_orderBy {\n  amount\n  contract\n  id\n  percentage\n  stakedOhms\n  timestamp\n  value\n}\n\ntype treasuryArbitrum_StakingPoolSnapshot {\n  block: BigInt!\n  contractAddress: treasuryArbitrum_Bytes!\n  id: ID!\n  stakingToken: treasuryArbitrum_Bytes\n  _join: Query!\n}\n\ninput treasuryArbitrum_StakingPoolSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryArbitrum_BlockChangedFilter\n  and: [treasuryArbitrum_StakingPoolSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  contractAddress: treasuryArbitrum_Bytes\n  contractAddress_contains: treasuryArbitrum_Bytes\n  contractAddress_gt: treasuryArbitrum_Bytes\n  contractAddress_gte: treasuryArbitrum_Bytes\n  contractAddress_in: [treasuryArbitrum_Bytes!]\n  contractAddress_lt: treasuryArbitrum_Bytes\n  contractAddress_lte: treasuryArbitrum_Bytes\n  contractAddress_not: treasuryArbitrum_Bytes\n  contractAddress_not_contains: treasuryArbitrum_Bytes\n  contractAddress_not_in: [treasuryArbitrum_Bytes!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryArbitrum_StakingPoolSnapshot_filter]\n  stakingToken: treasuryArbitrum_Bytes\n  stakingToken_contains: treasuryArbitrum_Bytes\n  stakingToken_gt: treasuryArbitrum_Bytes\n  stakingToken_gte: treasuryArbitrum_Bytes\n  stakingToken_in: [treasuryArbitrum_Bytes!]\n  stakingToken_lt: treasuryArbitrum_Bytes\n  stakingToken_lte: treasuryArbitrum_Bytes\n  stakingToken_not: treasuryArbitrum_Bytes\n  stakingToken_not_contains: treasuryArbitrum_Bytes\n  stakingToken_not_in: [treasuryArbitrum_Bytes!]\n}\n\nenum treasuryArbitrum_StakingPoolSnapshot_orderBy {\n  block\n  contractAddress\n  id\n  stakingToken\n}\n\ntype Subscription {\n  \"\"\"Access to subgraph metadata\"\"\"\n  treasuryArbitrum__meta(block: treasuryArbitrum_Block_height): treasuryArbitrum__Meta_\n  treasuryArbitrum_balancerPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_BalancerPoolSnapshot\n  treasuryArbitrum_balancerPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_BalancerPoolSnapshot_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_BalancerPoolSnapshot_filter\n  ): [treasuryArbitrum_BalancerPoolSnapshot!]!\n  treasuryArbitrum_bondDiscount(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_BondDiscount\n  treasuryArbitrum_bondDiscounts(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_BondDiscount_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_BondDiscount_filter\n  ): [treasuryArbitrum_BondDiscount!]!\n  treasuryArbitrum_convexRewardPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_ConvexRewardPoolSnapshot\n  treasuryArbitrum_convexRewardPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_ConvexRewardPoolSnapshot_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_ConvexRewardPoolSnapshot_filter\n  ): [treasuryArbitrum_ConvexRewardPoolSnapshot!]!\n  treasuryArbitrum_dailyBond(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_DailyBond\n  treasuryArbitrum_dailyBonds(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_DailyBond_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_DailyBond_filter\n  ): [treasuryArbitrum_DailyBond!]!\n  treasuryArbitrum_dailyStakingReward(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_DailyStakingReward\n  treasuryArbitrum_dailyStakingRewards(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_DailyStakingReward_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_DailyStakingReward_filter\n  ): [treasuryArbitrum_DailyStakingReward!]!\n  treasuryArbitrum_erc20TokenSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_ERC20TokenSnapshot\n  treasuryArbitrum_erc20TokenSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_ERC20TokenSnapshot_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_ERC20TokenSnapshot_filter\n  ): [treasuryArbitrum_ERC20TokenSnapshot!]!\n  treasuryArbitrum_gnosisAuction(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_GnosisAuction\n  treasuryArbitrum_gnosisAuctionRoot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_GnosisAuctionRoot\n  treasuryArbitrum_gnosisAuctionRoots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_GnosisAuctionRoot_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_GnosisAuctionRoot_filter\n  ): [treasuryArbitrum_GnosisAuctionRoot!]!\n  treasuryArbitrum_gnosisAuctions(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_GnosisAuction_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_GnosisAuction_filter\n  ): [treasuryArbitrum_GnosisAuction!]!\n  treasuryArbitrum_poolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_PoolSnapshot\n  treasuryArbitrum_poolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_PoolSnapshot_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_PoolSnapshot_filter\n  ): [treasuryArbitrum_PoolSnapshot!]!\n  treasuryArbitrum_priceSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_PriceSnapshot\n  treasuryArbitrum_priceSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_PriceSnapshot_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_PriceSnapshot_filter\n  ): [treasuryArbitrum_PriceSnapshot!]!\n  treasuryArbitrum_protocolMetric(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_ProtocolMetric\n  treasuryArbitrum_protocolMetrics(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_ProtocolMetric_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_ProtocolMetric_filter\n  ): [treasuryArbitrum_ProtocolMetric!]!\n  treasuryArbitrum_rebase(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_Rebase\n  treasuryArbitrum_rebases(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_Rebase_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_Rebase_filter\n  ): [treasuryArbitrum_Rebase!]!\n  treasuryArbitrum_stakingPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_StakingPoolSnapshot\n  treasuryArbitrum_stakingPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_StakingPoolSnapshot_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_StakingPoolSnapshot_filter\n  ): [treasuryArbitrum_StakingPoolSnapshot!]!\n  treasuryArbitrum_token(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_Token\n  treasuryArbitrum_tokenPriceSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_TokenPriceSnapshot\n  treasuryArbitrum_tokenPriceSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_TokenPriceSnapshot_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_TokenPriceSnapshot_filter\n  ): [treasuryArbitrum_TokenPriceSnapshot!]!\n  treasuryArbitrum_tokenRecord(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_TokenRecord\n  treasuryArbitrum_tokenRecords(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_TokenRecord_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_TokenRecord_filter\n  ): [treasuryArbitrum_TokenRecord!]!\n  treasuryArbitrum_tokenSupplies(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_TokenSupply_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_TokenSupply_filter\n  ): [treasuryArbitrum_TokenSupply!]!\n  treasuryArbitrum_tokenSupply(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n  ): treasuryArbitrum_TokenSupply\n  treasuryArbitrum_tokens(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryArbitrum_Block_height\n    first: Int = 100\n    orderBy: treasuryArbitrum_Token_orderBy\n    orderDirection: treasuryArbitrum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny\n    where: treasuryArbitrum_Token_filter\n  ): [treasuryArbitrum_Token!]!\n  \"\"\"Access to subgraph metadata\"\"\"\n  treasuryEthereum__meta(block: treasuryEthereum_Block_height): treasuryEthereum__Meta_\n  treasuryEthereum_balancerPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_BalancerPoolSnapshot\n  treasuryEthereum_balancerPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_BalancerPoolSnapshot_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_BalancerPoolSnapshot_filter\n  ): [treasuryEthereum_BalancerPoolSnapshot!]!\n  treasuryEthereum_bondDiscount(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_BondDiscount\n  treasuryEthereum_bondDiscounts(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_BondDiscount_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_BondDiscount_filter\n  ): [treasuryEthereum_BondDiscount!]!\n  treasuryEthereum_convexRewardPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_ConvexRewardPoolSnapshot\n  treasuryEthereum_convexRewardPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_ConvexRewardPoolSnapshot_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_ConvexRewardPoolSnapshot_filter\n  ): [treasuryEthereum_ConvexRewardPoolSnapshot!]!\n  treasuryEthereum_dailyBond(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_DailyBond\n  treasuryEthereum_dailyBonds(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_DailyBond_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_DailyBond_filter\n  ): [treasuryEthereum_DailyBond!]!\n  treasuryEthereum_dailyStakingReward(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_DailyStakingReward\n  treasuryEthereum_dailyStakingRewards(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_DailyStakingReward_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_DailyStakingReward_filter\n  ): [treasuryEthereum_DailyStakingReward!]!\n  treasuryEthereum_erc20TokenSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_ERC20TokenSnapshot\n  treasuryEthereum_erc20TokenSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_ERC20TokenSnapshot_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_ERC20TokenSnapshot_filter\n  ): [treasuryEthereum_ERC20TokenSnapshot!]!\n  treasuryEthereum_gnosisAuction(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_GnosisAuction\n  treasuryEthereum_gnosisAuctionRoot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_GnosisAuctionRoot\n  treasuryEthereum_gnosisAuctionRoots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_GnosisAuctionRoot_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_GnosisAuctionRoot_filter\n  ): [treasuryEthereum_GnosisAuctionRoot!]!\n  treasuryEthereum_gnosisAuctions(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_GnosisAuction_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_GnosisAuction_filter\n  ): [treasuryEthereum_GnosisAuction!]!\n  treasuryEthereum_poolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_PoolSnapshot\n  treasuryEthereum_poolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_PoolSnapshot_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_PoolSnapshot_filter\n  ): [treasuryEthereum_PoolSnapshot!]!\n  treasuryEthereum_priceSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_PriceSnapshot\n  treasuryEthereum_priceSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_PriceSnapshot_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_PriceSnapshot_filter\n  ): [treasuryEthereum_PriceSnapshot!]!\n  treasuryEthereum_protocolMetric(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_ProtocolMetric\n  treasuryEthereum_protocolMetrics(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_ProtocolMetric_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_ProtocolMetric_filter\n  ): [treasuryEthereum_ProtocolMetric!]!\n  treasuryEthereum_rebase(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_Rebase\n  treasuryEthereum_rebases(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_Rebase_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_Rebase_filter\n  ): [treasuryEthereum_Rebase!]!\n  treasuryEthereum_stakingPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_StakingPoolSnapshot\n  treasuryEthereum_stakingPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_StakingPoolSnapshot_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_StakingPoolSnapshot_filter\n  ): [treasuryEthereum_StakingPoolSnapshot!]!\n  treasuryEthereum_token(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_Token\n  treasuryEthereum_tokenPriceSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_TokenPriceSnapshot\n  treasuryEthereum_tokenPriceSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_TokenPriceSnapshot_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_TokenPriceSnapshot_filter\n  ): [treasuryEthereum_TokenPriceSnapshot!]!\n  treasuryEthereum_tokenRecord(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_TokenRecord\n  treasuryEthereum_tokenRecords(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_TokenRecord_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_TokenRecord_filter\n  ): [treasuryEthereum_TokenRecord!]!\n  treasuryEthereum_tokenSupplies(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_TokenSupply_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_TokenSupply_filter\n  ): [treasuryEthereum_TokenSupply!]!\n  treasuryEthereum_tokenSupply(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n  ): treasuryEthereum_TokenSupply\n  treasuryEthereum_tokens(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryEthereum_Block_height\n    first: Int = 100\n    orderBy: treasuryEthereum_Token_orderBy\n    orderDirection: treasuryEthereum_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny\n    where: treasuryEthereum_Token_filter\n  ): [treasuryEthereum_Token!]!\n  \"\"\"Access to subgraph metadata\"\"\"\n  treasuryFantom__meta(block: treasuryFantom_Block_height): treasuryFantom__Meta_\n  treasuryFantom_balancerPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_BalancerPoolSnapshot\n  treasuryFantom_balancerPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_BalancerPoolSnapshot_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_BalancerPoolSnapshot_filter\n  ): [treasuryFantom_BalancerPoolSnapshot!]!\n  treasuryFantom_bondDiscount(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_BondDiscount\n  treasuryFantom_bondDiscounts(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_BondDiscount_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_BondDiscount_filter\n  ): [treasuryFantom_BondDiscount!]!\n  treasuryFantom_convexRewardPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_ConvexRewardPoolSnapshot\n  treasuryFantom_convexRewardPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_ConvexRewardPoolSnapshot_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_ConvexRewardPoolSnapshot_filter\n  ): [treasuryFantom_ConvexRewardPoolSnapshot!]!\n  treasuryFantom_dailyBond(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_DailyBond\n  treasuryFantom_dailyBonds(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_DailyBond_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_DailyBond_filter\n  ): [treasuryFantom_DailyBond!]!\n  treasuryFantom_dailyStakingReward(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_DailyStakingReward\n  treasuryFantom_dailyStakingRewards(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_DailyStakingReward_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_DailyStakingReward_filter\n  ): [treasuryFantom_DailyStakingReward!]!\n  treasuryFantom_erc20TokenSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_ERC20TokenSnapshot\n  treasuryFantom_erc20TokenSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_ERC20TokenSnapshot_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_ERC20TokenSnapshot_filter\n  ): [treasuryFantom_ERC20TokenSnapshot!]!\n  treasuryFantom_gnosisAuction(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_GnosisAuction\n  treasuryFantom_gnosisAuctionRoot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_GnosisAuctionRoot\n  treasuryFantom_gnosisAuctionRoots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_GnosisAuctionRoot_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_GnosisAuctionRoot_filter\n  ): [treasuryFantom_GnosisAuctionRoot!]!\n  treasuryFantom_gnosisAuctions(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_GnosisAuction_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_GnosisAuction_filter\n  ): [treasuryFantom_GnosisAuction!]!\n  treasuryFantom_poolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_PoolSnapshot\n  treasuryFantom_poolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_PoolSnapshot_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_PoolSnapshot_filter\n  ): [treasuryFantom_PoolSnapshot!]!\n  treasuryFantom_priceSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_PriceSnapshot\n  treasuryFantom_priceSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_PriceSnapshot_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_PriceSnapshot_filter\n  ): [treasuryFantom_PriceSnapshot!]!\n  treasuryFantom_protocolMetric(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_ProtocolMetric\n  treasuryFantom_protocolMetrics(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_ProtocolMetric_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_ProtocolMetric_filter\n  ): [treasuryFantom_ProtocolMetric!]!\n  treasuryFantom_rebase(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_Rebase\n  treasuryFantom_rebases(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_Rebase_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_Rebase_filter\n  ): [treasuryFantom_Rebase!]!\n  treasuryFantom_stakingPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_StakingPoolSnapshot\n  treasuryFantom_stakingPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_StakingPoolSnapshot_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_StakingPoolSnapshot_filter\n  ): [treasuryFantom_StakingPoolSnapshot!]!\n  treasuryFantom_token(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_Token\n  treasuryFantom_tokenPriceSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_TokenPriceSnapshot\n  treasuryFantom_tokenPriceSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_TokenPriceSnapshot_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_TokenPriceSnapshot_filter\n  ): [treasuryFantom_TokenPriceSnapshot!]!\n  treasuryFantom_tokenRecord(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_TokenRecord\n  treasuryFantom_tokenRecords(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_TokenRecord_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_TokenRecord_filter\n  ): [treasuryFantom_TokenRecord!]!\n  treasuryFantom_tokenSupplies(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_TokenSupply_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_TokenSupply_filter\n  ): [treasuryFantom_TokenSupply!]!\n  treasuryFantom_tokenSupply(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n  ): treasuryFantom_TokenSupply\n  treasuryFantom_tokens(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryFantom_Block_height\n    first: Int = 100\n    orderBy: treasuryFantom_Token_orderBy\n    orderDirection: treasuryFantom_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny\n    where: treasuryFantom_Token_filter\n  ): [treasuryFantom_Token!]!\n  \"\"\"Access to subgraph metadata\"\"\"\n  treasuryPolygon__meta(block: treasuryPolygon_Block_height): treasuryPolygon__Meta_\n  treasuryPolygon_balancerPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_BalancerPoolSnapshot\n  treasuryPolygon_balancerPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_BalancerPoolSnapshot_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_BalancerPoolSnapshot_filter\n  ): [treasuryPolygon_BalancerPoolSnapshot!]!\n  treasuryPolygon_bondDiscount(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_BondDiscount\n  treasuryPolygon_bondDiscounts(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_BondDiscount_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_BondDiscount_filter\n  ): [treasuryPolygon_BondDiscount!]!\n  treasuryPolygon_convexRewardPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_ConvexRewardPoolSnapshot\n  treasuryPolygon_convexRewardPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_ConvexRewardPoolSnapshot_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_ConvexRewardPoolSnapshot_filter\n  ): [treasuryPolygon_ConvexRewardPoolSnapshot!]!\n  treasuryPolygon_dailyBond(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_DailyBond\n  treasuryPolygon_dailyBonds(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_DailyBond_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_DailyBond_filter\n  ): [treasuryPolygon_DailyBond!]!\n  treasuryPolygon_dailyStakingReward(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_DailyStakingReward\n  treasuryPolygon_dailyStakingRewards(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_DailyStakingReward_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_DailyStakingReward_filter\n  ): [treasuryPolygon_DailyStakingReward!]!\n  treasuryPolygon_erc20TokenSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_ERC20TokenSnapshot\n  treasuryPolygon_erc20TokenSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_ERC20TokenSnapshot_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_ERC20TokenSnapshot_filter\n  ): [treasuryPolygon_ERC20TokenSnapshot!]!\n  treasuryPolygon_gnosisAuction(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_GnosisAuction\n  treasuryPolygon_gnosisAuctionRoot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_GnosisAuctionRoot\n  treasuryPolygon_gnosisAuctionRoots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_GnosisAuctionRoot_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_GnosisAuctionRoot_filter\n  ): [treasuryPolygon_GnosisAuctionRoot!]!\n  treasuryPolygon_gnosisAuctions(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_GnosisAuction_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_GnosisAuction_filter\n  ): [treasuryPolygon_GnosisAuction!]!\n  treasuryPolygon_poolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_PoolSnapshot\n  treasuryPolygon_poolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_PoolSnapshot_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_PoolSnapshot_filter\n  ): [treasuryPolygon_PoolSnapshot!]!\n  treasuryPolygon_priceSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_PriceSnapshot\n  treasuryPolygon_priceSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_PriceSnapshot_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_PriceSnapshot_filter\n  ): [treasuryPolygon_PriceSnapshot!]!\n  treasuryPolygon_protocolMetric(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_ProtocolMetric\n  treasuryPolygon_protocolMetrics(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_ProtocolMetric_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_ProtocolMetric_filter\n  ): [treasuryPolygon_ProtocolMetric!]!\n  treasuryPolygon_rebase(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_Rebase\n  treasuryPolygon_rebases(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_Rebase_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_Rebase_filter\n  ): [treasuryPolygon_Rebase!]!\n  treasuryPolygon_stakingPoolSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_StakingPoolSnapshot\n  treasuryPolygon_stakingPoolSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_StakingPoolSnapshot_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_StakingPoolSnapshot_filter\n  ): [treasuryPolygon_StakingPoolSnapshot!]!\n  treasuryPolygon_token(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_Token\n  treasuryPolygon_tokenPriceSnapshot(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_TokenPriceSnapshot\n  treasuryPolygon_tokenPriceSnapshots(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_TokenPriceSnapshot_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_TokenPriceSnapshot_filter\n  ): [treasuryPolygon_TokenPriceSnapshot!]!\n  treasuryPolygon_tokenRecord(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_TokenRecord\n  treasuryPolygon_tokenRecords(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_TokenRecord_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_TokenRecord_filter\n  ): [treasuryPolygon_TokenRecord!]!\n  treasuryPolygon_tokenSupplies(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_TokenSupply_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_TokenSupply_filter\n  ): [treasuryPolygon_TokenSupply!]!\n  treasuryPolygon_tokenSupply(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    id: ID!\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n  ): treasuryPolygon_TokenSupply\n  treasuryPolygon_tokens(\n    \"\"\"\n    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\n    \"\"\"\n    block: treasuryPolygon_Block_height\n    first: Int = 100\n    orderBy: treasuryPolygon_Token_orderBy\n    orderDirection: treasuryPolygon_OrderDirection\n    skip: Int = 0\n    \"\"\"\n    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\n    \"\"\"\n    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny\n    where: treasuryPolygon_Token_filter\n  ): [treasuryPolygon_Token!]!\n}\n\ntype treasuryArbitrum_Token {\n  id: ID!\n  _join: Query!\n}\n\ntype treasuryArbitrum_TokenPriceSnapshot {\n  block: BigInt!\n  id: ID!\n  price: treasuryArbitrum_BigDecimal!\n  token: treasuryArbitrum_Bytes!\n  _join: Query!\n}\n\ninput treasuryArbitrum_TokenPriceSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryArbitrum_BlockChangedFilter\n  and: [treasuryArbitrum_TokenPriceSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryArbitrum_TokenPriceSnapshot_filter]\n  price: treasuryArbitrum_BigDecimal\n  price_gt: treasuryArbitrum_BigDecimal\n  price_gte: treasuryArbitrum_BigDecimal\n  price_in: [treasuryArbitrum_BigDecimal!]\n  price_lt: treasuryArbitrum_BigDecimal\n  price_lte: treasuryArbitrum_BigDecimal\n  price_not: treasuryArbitrum_BigDecimal\n  price_not_in: [treasuryArbitrum_BigDecimal!]\n  token: treasuryArbitrum_Bytes\n  token_contains: treasuryArbitrum_Bytes\n  token_gt: treasuryArbitrum_Bytes\n  token_gte: treasuryArbitrum_Bytes\n  token_in: [treasuryArbitrum_Bytes!]\n  token_lt: treasuryArbitrum_Bytes\n  token_lte: treasuryArbitrum_Bytes\n  token_not: treasuryArbitrum_Bytes\n  token_not_contains: treasuryArbitrum_Bytes\n  token_not_in: [treasuryArbitrum_Bytes!]\n}\n\nenum treasuryArbitrum_TokenPriceSnapshot_orderBy {\n  block\n  id\n  price\n  token\n}\n\ntype treasuryArbitrum_TokenRecord {\n  balance: treasuryArbitrum_BigDecimal!\n  block: BigInt!\n  blockchain: String!\n  category: String!\n  date: String!\n  id: ID!\n  isBluechip: Boolean!\n  isLiquid: Boolean!\n  multiplier: treasuryArbitrum_BigDecimal!\n  rate: treasuryArbitrum_BigDecimal!\n  source: String!\n  sourceAddress: String!\n  timestamp: BigInt!\n  token: String!\n  tokenAddress: String!\n  value: treasuryArbitrum_BigDecimal!\n  valueExcludingOhm: treasuryArbitrum_BigDecimal!\n  _join: Query!\n}\n\ninput treasuryArbitrum_TokenRecord_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryArbitrum_BlockChangedFilter\n  and: [treasuryArbitrum_TokenRecord_filter]\n  balance: treasuryArbitrum_BigDecimal\n  balance_gt: treasuryArbitrum_BigDecimal\n  balance_gte: treasuryArbitrum_BigDecimal\n  balance_in: [treasuryArbitrum_BigDecimal!]\n  balance_lt: treasuryArbitrum_BigDecimal\n  balance_lte: treasuryArbitrum_BigDecimal\n  balance_not: treasuryArbitrum_BigDecimal\n  balance_not_in: [treasuryArbitrum_BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  blockchain: String\n  blockchain_contains: String\n  blockchain_contains_nocase: String\n  blockchain_ends_with: String\n  blockchain_ends_with_nocase: String\n  blockchain_gt: String\n  blockchain_gte: String\n  blockchain_in: [String!]\n  blockchain_lt: String\n  blockchain_lte: String\n  blockchain_not: String\n  blockchain_not_contains: String\n  blockchain_not_contains_nocase: String\n  blockchain_not_ends_with: String\n  blockchain_not_ends_with_nocase: String\n  blockchain_not_in: [String!]\n  blockchain_not_starts_with: String\n  blockchain_not_starts_with_nocase: String\n  blockchain_starts_with: String\n  blockchain_starts_with_nocase: String\n  category: String\n  category_contains: String\n  category_contains_nocase: String\n  category_ends_with: String\n  category_ends_with_nocase: String\n  category_gt: String\n  category_gte: String\n  category_in: [String!]\n  category_lt: String\n  category_lte: String\n  category_not: String\n  category_not_contains: String\n  category_not_contains_nocase: String\n  category_not_ends_with: String\n  category_not_ends_with_nocase: String\n  category_not_in: [String!]\n  category_not_starts_with: String\n  category_not_starts_with_nocase: String\n  category_starts_with: String\n  category_starts_with_nocase: String\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  isBluechip: Boolean\n  isBluechip_in: [Boolean!]\n  isBluechip_not: Boolean\n  isBluechip_not_in: [Boolean!]\n  isLiquid: Boolean\n  isLiquid_in: [Boolean!]\n  isLiquid_not: Boolean\n  isLiquid_not_in: [Boolean!]\n  multiplier: treasuryArbitrum_BigDecimal\n  multiplier_gt: treasuryArbitrum_BigDecimal\n  multiplier_gte: treasuryArbitrum_BigDecimal\n  multiplier_in: [treasuryArbitrum_BigDecimal!]\n  multiplier_lt: treasuryArbitrum_BigDecimal\n  multiplier_lte: treasuryArbitrum_BigDecimal\n  multiplier_not: treasuryArbitrum_BigDecimal\n  multiplier_not_in: [treasuryArbitrum_BigDecimal!]\n  or: [treasuryArbitrum_TokenRecord_filter]\n  rate: treasuryArbitrum_BigDecimal\n  rate_gt: treasuryArbitrum_BigDecimal\n  rate_gte: treasuryArbitrum_BigDecimal\n  rate_in: [treasuryArbitrum_BigDecimal!]\n  rate_lt: treasuryArbitrum_BigDecimal\n  rate_lte: treasuryArbitrum_BigDecimal\n  rate_not: treasuryArbitrum_BigDecimal\n  rate_not_in: [treasuryArbitrum_BigDecimal!]\n  source: String\n  sourceAddress: String\n  sourceAddress_contains: String\n  sourceAddress_contains_nocase: String\n  sourceAddress_ends_with: String\n  sourceAddress_ends_with_nocase: String\n  sourceAddress_gt: String\n  sourceAddress_gte: String\n  sourceAddress_in: [String!]\n  sourceAddress_lt: String\n  sourceAddress_lte: String\n  sourceAddress_not: String\n  sourceAddress_not_contains: String\n  sourceAddress_not_contains_nocase: String\n  sourceAddress_not_ends_with: String\n  sourceAddress_not_ends_with_nocase: String\n  sourceAddress_not_in: [String!]\n  sourceAddress_not_starts_with: String\n  sourceAddress_not_starts_with_nocase: String\n  sourceAddress_starts_with: String\n  sourceAddress_starts_with_nocase: String\n  source_contains: String\n  source_contains_nocase: String\n  source_ends_with: String\n  source_ends_with_nocase: String\n  source_gt: String\n  source_gte: String\n  source_in: [String!]\n  source_lt: String\n  source_lte: String\n  source_not: String\n  source_not_contains: String\n  source_not_contains_nocase: String\n  source_not_ends_with: String\n  source_not_ends_with_nocase: String\n  source_not_in: [String!]\n  source_not_starts_with: String\n  source_not_starts_with_nocase: String\n  source_starts_with: String\n  source_starts_with_nocase: String\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  tokenAddress: String\n  tokenAddress_contains: String\n  tokenAddress_contains_nocase: String\n  tokenAddress_ends_with: String\n  tokenAddress_ends_with_nocase: String\n  tokenAddress_gt: String\n  tokenAddress_gte: String\n  tokenAddress_in: [String!]\n  tokenAddress_lt: String\n  tokenAddress_lte: String\n  tokenAddress_not: String\n  tokenAddress_not_contains: String\n  tokenAddress_not_contains_nocase: String\n  tokenAddress_not_ends_with: String\n  tokenAddress_not_ends_with_nocase: String\n  tokenAddress_not_in: [String!]\n  tokenAddress_not_starts_with: String\n  tokenAddress_not_starts_with_nocase: String\n  tokenAddress_starts_with: String\n  tokenAddress_starts_with_nocase: String\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  value: treasuryArbitrum_BigDecimal\n  valueExcludingOhm: treasuryArbitrum_BigDecimal\n  valueExcludingOhm_gt: treasuryArbitrum_BigDecimal\n  valueExcludingOhm_gte: treasuryArbitrum_BigDecimal\n  valueExcludingOhm_in: [treasuryArbitrum_BigDecimal!]\n  valueExcludingOhm_lt: treasuryArbitrum_BigDecimal\n  valueExcludingOhm_lte: treasuryArbitrum_BigDecimal\n  valueExcludingOhm_not: treasuryArbitrum_BigDecimal\n  valueExcludingOhm_not_in: [treasuryArbitrum_BigDecimal!]\n  value_gt: treasuryArbitrum_BigDecimal\n  value_gte: treasuryArbitrum_BigDecimal\n  value_in: [treasuryArbitrum_BigDecimal!]\n  value_lt: treasuryArbitrum_BigDecimal\n  value_lte: treasuryArbitrum_BigDecimal\n  value_not: treasuryArbitrum_BigDecimal\n  value_not_in: [treasuryArbitrum_BigDecimal!]\n}\n\nenum treasuryArbitrum_TokenRecord_orderBy {\n  balance\n  block\n  blockchain\n  category\n  date\n  id\n  isBluechip\n  isLiquid\n  multiplier\n  rate\n  source\n  sourceAddress\n  timestamp\n  token\n  tokenAddress\n  value\n  valueExcludingOhm\n}\n\ntype treasuryArbitrum_TokenSupply {\n  balance: treasuryArbitrum_BigDecimal!\n  block: BigInt!\n  date: String!\n  id: ID!\n  pool: String\n  poolAddress: String\n  source: String\n  sourceAddress: String\n  supplyBalance: treasuryArbitrum_BigDecimal!\n  timestamp: BigInt!\n  token: String!\n  tokenAddress: String!\n  type: String!\n  _join: Query!\n}\n\ninput treasuryArbitrum_TokenSupply_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryArbitrum_BlockChangedFilter\n  and: [treasuryArbitrum_TokenSupply_filter]\n  balance: treasuryArbitrum_BigDecimal\n  balance_gt: treasuryArbitrum_BigDecimal\n  balance_gte: treasuryArbitrum_BigDecimal\n  balance_in: [treasuryArbitrum_BigDecimal!]\n  balance_lt: treasuryArbitrum_BigDecimal\n  balance_lte: treasuryArbitrum_BigDecimal\n  balance_not: treasuryArbitrum_BigDecimal\n  balance_not_in: [treasuryArbitrum_BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryArbitrum_TokenSupply_filter]\n  pool: String\n  poolAddress: String\n  poolAddress_contains: String\n  poolAddress_contains_nocase: String\n  poolAddress_ends_with: String\n  poolAddress_ends_with_nocase: String\n  poolAddress_gt: String\n  poolAddress_gte: String\n  poolAddress_in: [String!]\n  poolAddress_lt: String\n  poolAddress_lte: String\n  poolAddress_not: String\n  poolAddress_not_contains: String\n  poolAddress_not_contains_nocase: String\n  poolAddress_not_ends_with: String\n  poolAddress_not_ends_with_nocase: String\n  poolAddress_not_in: [String!]\n  poolAddress_not_starts_with: String\n  poolAddress_not_starts_with_nocase: String\n  poolAddress_starts_with: String\n  poolAddress_starts_with_nocase: String\n  pool_contains: String\n  pool_contains_nocase: String\n  pool_ends_with: String\n  pool_ends_with_nocase: String\n  pool_gt: String\n  pool_gte: String\n  pool_in: [String!]\n  pool_lt: String\n  pool_lte: String\n  pool_not: String\n  pool_not_contains: String\n  pool_not_contains_nocase: String\n  pool_not_ends_with: String\n  pool_not_ends_with_nocase: String\n  pool_not_in: [String!]\n  pool_not_starts_with: String\n  pool_not_starts_with_nocase: String\n  pool_starts_with: String\n  pool_starts_with_nocase: String\n  source: String\n  sourceAddress: String\n  sourceAddress_contains: String\n  sourceAddress_contains_nocase: String\n  sourceAddress_ends_with: String\n  sourceAddress_ends_with_nocase: String\n  sourceAddress_gt: String\n  sourceAddress_gte: String\n  sourceAddress_in: [String!]\n  sourceAddress_lt: String\n  sourceAddress_lte: String\n  sourceAddress_not: String\n  sourceAddress_not_contains: String\n  sourceAddress_not_contains_nocase: String\n  sourceAddress_not_ends_with: String\n  sourceAddress_not_ends_with_nocase: String\n  sourceAddress_not_in: [String!]\n  sourceAddress_not_starts_with: String\n  sourceAddress_not_starts_with_nocase: String\n  sourceAddress_starts_with: String\n  sourceAddress_starts_with_nocase: String\n  source_contains: String\n  source_contains_nocase: String\n  source_ends_with: String\n  source_ends_with_nocase: String\n  source_gt: String\n  source_gte: String\n  source_in: [String!]\n  source_lt: String\n  source_lte: String\n  source_not: String\n  source_not_contains: String\n  source_not_contains_nocase: String\n  source_not_ends_with: String\n  source_not_ends_with_nocase: String\n  source_not_in: [String!]\n  source_not_starts_with: String\n  source_not_starts_with_nocase: String\n  source_starts_with: String\n  source_starts_with_nocase: String\n  supplyBalance: treasuryArbitrum_BigDecimal\n  supplyBalance_gt: treasuryArbitrum_BigDecimal\n  supplyBalance_gte: treasuryArbitrum_BigDecimal\n  supplyBalance_in: [treasuryArbitrum_BigDecimal!]\n  supplyBalance_lt: treasuryArbitrum_BigDecimal\n  supplyBalance_lte: treasuryArbitrum_BigDecimal\n  supplyBalance_not: treasuryArbitrum_BigDecimal\n  supplyBalance_not_in: [treasuryArbitrum_BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  tokenAddress: String\n  tokenAddress_contains: String\n  tokenAddress_contains_nocase: String\n  tokenAddress_ends_with: String\n  tokenAddress_ends_with_nocase: String\n  tokenAddress_gt: String\n  tokenAddress_gte: String\n  tokenAddress_in: [String!]\n  tokenAddress_lt: String\n  tokenAddress_lte: String\n  tokenAddress_not: String\n  tokenAddress_not_contains: String\n  tokenAddress_not_contains_nocase: String\n  tokenAddress_not_ends_with: String\n  tokenAddress_not_ends_with_nocase: String\n  tokenAddress_not_in: [String!]\n  tokenAddress_not_starts_with: String\n  tokenAddress_not_starts_with_nocase: String\n  tokenAddress_starts_with: String\n  tokenAddress_starts_with_nocase: String\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  type: String\n  type_contains: String\n  type_contains_nocase: String\n  type_ends_with: String\n  type_ends_with_nocase: String\n  type_gt: String\n  type_gte: String\n  type_in: [String!]\n  type_lt: String\n  type_lte: String\n  type_not: String\n  type_not_contains: String\n  type_not_contains_nocase: String\n  type_not_ends_with: String\n  type_not_ends_with_nocase: String\n  type_not_in: [String!]\n  type_not_starts_with: String\n  type_not_starts_with_nocase: String\n  type_starts_with: String\n  type_starts_with_nocase: String\n}\n\nenum treasuryArbitrum_TokenSupply_orderBy {\n  balance\n  block\n  date\n  id\n  pool\n  poolAddress\n  source\n  sourceAddress\n  supplyBalance\n  timestamp\n  token\n  tokenAddress\n  type\n}\n\ninput treasuryArbitrum_Token_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryArbitrum_BlockChangedFilter\n  and: [treasuryArbitrum_Token_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryArbitrum_Token_filter]\n}\n\nenum treasuryArbitrum_Token_orderBy {\n  id\n}\n\ntype treasuryArbitrum__Block_ {\n  \"\"\"The hash of the block\"\"\"\n  hash: treasuryArbitrum_Bytes\n  \"\"\"The block number\"\"\"\n  number: Int!\n  \"\"\"Integer representation of the timestamp stored in blocks for the chain\"\"\"\n  timestamp: Int\n  _join: Query!\n}\n\n\"\"\"The type for the top-level _meta field\"\"\"\ntype treasuryArbitrum__Meta_ {\n  \"Information about a specific subgraph block. The hash of the block\\nwill be null if the _meta field has a block constraint that asks for\\na block number. It will be filled if the _meta field has no block constraint\\nand therefore asks for the latest  block\\n\"\n  block: treasuryArbitrum__Block_!\n  \"\"\"The deployment ID\"\"\"\n  deployment: String!\n  \"\"\"If `true`, the subgraph encountered indexing errors at some past block\"\"\"\n  hasIndexingErrors: Boolean!\n  _join: Query!\n}\n\nenum treasuryArbitrum__SubgraphErrorPolicy_ {\n  \"\"\"Data will be returned even if the subgraph has indexing errors\"\"\"\n  allow\n  \"\"\"\n  If the subgraph has indexing errors, data will be omitted. The default.\n  \"\"\"\n  deny\n}\n\ntype treasuryEthereum_BalancerPoolSnapshot {\n  balances: [treasuryEthereum_BigDecimal!]!\n  block: BigInt!\n  decimals: Int!\n  id: ID!\n  pool: treasuryEthereum_Bytes!\n  poolToken: treasuryEthereum_Bytes!\n  tokens: [treasuryEthereum_Bytes!]!\n  totalSupply: treasuryEthereum_BigDecimal!\n  weights: [treasuryEthereum_BigDecimal!]!\n  _join: Query!\n}\n\ninput treasuryEthereum_BalancerPoolSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryEthereum_BlockChangedFilter\n  and: [treasuryEthereum_BalancerPoolSnapshot_filter]\n  balances: [treasuryEthereum_BigDecimal!]\n  balances_contains: [treasuryEthereum_BigDecimal!]\n  balances_contains_nocase: [treasuryEthereum_BigDecimal!]\n  balances_not: [treasuryEthereum_BigDecimal!]\n  balances_not_contains: [treasuryEthereum_BigDecimal!]\n  balances_not_contains_nocase: [treasuryEthereum_BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryEthereum_BalancerPoolSnapshot_filter]\n  pool: treasuryEthereum_Bytes\n  poolToken: treasuryEthereum_Bytes\n  poolToken_contains: treasuryEthereum_Bytes\n  poolToken_gt: treasuryEthereum_Bytes\n  poolToken_gte: treasuryEthereum_Bytes\n  poolToken_in: [treasuryEthereum_Bytes!]\n  poolToken_lt: treasuryEthereum_Bytes\n  poolToken_lte: treasuryEthereum_Bytes\n  poolToken_not: treasuryEthereum_Bytes\n  poolToken_not_contains: treasuryEthereum_Bytes\n  poolToken_not_in: [treasuryEthereum_Bytes!]\n  pool_contains: treasuryEthereum_Bytes\n  pool_gt: treasuryEthereum_Bytes\n  pool_gte: treasuryEthereum_Bytes\n  pool_in: [treasuryEthereum_Bytes!]\n  pool_lt: treasuryEthereum_Bytes\n  pool_lte: treasuryEthereum_Bytes\n  pool_not: treasuryEthereum_Bytes\n  pool_not_contains: treasuryEthereum_Bytes\n  pool_not_in: [treasuryEthereum_Bytes!]\n  tokens: [treasuryEthereum_Bytes!]\n  tokens_contains: [treasuryEthereum_Bytes!]\n  tokens_contains_nocase: [treasuryEthereum_Bytes!]\n  tokens_not: [treasuryEthereum_Bytes!]\n  tokens_not_contains: [treasuryEthereum_Bytes!]\n  tokens_not_contains_nocase: [treasuryEthereum_Bytes!]\n  totalSupply: treasuryEthereum_BigDecimal\n  totalSupply_gt: treasuryEthereum_BigDecimal\n  totalSupply_gte: treasuryEthereum_BigDecimal\n  totalSupply_in: [treasuryEthereum_BigDecimal!]\n  totalSupply_lt: treasuryEthereum_BigDecimal\n  totalSupply_lte: treasuryEthereum_BigDecimal\n  totalSupply_not: treasuryEthereum_BigDecimal\n  totalSupply_not_in: [treasuryEthereum_BigDecimal!]\n  weights: [treasuryEthereum_BigDecimal!]\n  weights_contains: [treasuryEthereum_BigDecimal!]\n  weights_contains_nocase: [treasuryEthereum_BigDecimal!]\n  weights_not: [treasuryEthereum_BigDecimal!]\n  weights_not_contains: [treasuryEthereum_BigDecimal!]\n  weights_not_contains_nocase: [treasuryEthereum_BigDecimal!]\n}\n\nenum treasuryEthereum_BalancerPoolSnapshot_orderBy {\n  balances\n  block\n  decimals\n  id\n  pool\n  poolToken\n  tokens\n  totalSupply\n  weights\n}\n\nscalar treasuryEthereum_BigDecimal\n\ninput treasuryEthereum_BlockChangedFilter {\n  number_gte: Int!\n}\n\ninput treasuryEthereum_Block_height {\n  hash: treasuryEthereum_Bytes\n  number: Int\n  number_gte: Int\n}\n\ntype treasuryEthereum_BondDiscount {\n  dai_discount: treasuryEthereum_BigDecimal!\n  eth_discount: treasuryEthereum_BigDecimal!\n  frax_discount: treasuryEthereum_BigDecimal!\n  id: ID!\n  lusd_discount: treasuryEthereum_BigDecimal!\n  ohmdai_discount: treasuryEthereum_BigDecimal!\n  ohmfrax_discount: treasuryEthereum_BigDecimal!\n  ohmlusd_discount: treasuryEthereum_BigDecimal!\n  timestamp: BigInt!\n  _join: Query!\n}\n\ninput treasuryEthereum_BondDiscount_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryEthereum_BlockChangedFilter\n  and: [treasuryEthereum_BondDiscount_filter]\n  dai_discount: treasuryEthereum_BigDecimal\n  dai_discount_gt: treasuryEthereum_BigDecimal\n  dai_discount_gte: treasuryEthereum_BigDecimal\n  dai_discount_in: [treasuryEthereum_BigDecimal!]\n  dai_discount_lt: treasuryEthereum_BigDecimal\n  dai_discount_lte: treasuryEthereum_BigDecimal\n  dai_discount_not: treasuryEthereum_BigDecimal\n  dai_discount_not_in: [treasuryEthereum_BigDecimal!]\n  eth_discount: treasuryEthereum_BigDecimal\n  eth_discount_gt: treasuryEthereum_BigDecimal\n  eth_discount_gte: treasuryEthereum_BigDecimal\n  eth_discount_in: [treasuryEthereum_BigDecimal!]\n  eth_discount_lt: treasuryEthereum_BigDecimal\n  eth_discount_lte: treasuryEthereum_BigDecimal\n  eth_discount_not: treasuryEthereum_BigDecimal\n  eth_discount_not_in: [treasuryEthereum_BigDecimal!]\n  frax_discount: treasuryEthereum_BigDecimal\n  frax_discount_gt: treasuryEthereum_BigDecimal\n  frax_discount_gte: treasuryEthereum_BigDecimal\n  frax_discount_in: [treasuryEthereum_BigDecimal!]\n  frax_discount_lt: treasuryEthereum_BigDecimal\n  frax_discount_lte: treasuryEthereum_BigDecimal\n  frax_discount_not: treasuryEthereum_BigDecimal\n  frax_discount_not_in: [treasuryEthereum_BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  lusd_discount: treasuryEthereum_BigDecimal\n  lusd_discount_gt: treasuryEthereum_BigDecimal\n  lusd_discount_gte: treasuryEthereum_BigDecimal\n  lusd_discount_in: [treasuryEthereum_BigDecimal!]\n  lusd_discount_lt: treasuryEthereum_BigDecimal\n  lusd_discount_lte: treasuryEthereum_BigDecimal\n  lusd_discount_not: treasuryEthereum_BigDecimal\n  lusd_discount_not_in: [treasuryEthereum_BigDecimal!]\n  ohmdai_discount: treasuryEthereum_BigDecimal\n  ohmdai_discount_gt: treasuryEthereum_BigDecimal\n  ohmdai_discount_gte: treasuryEthereum_BigDecimal\n  ohmdai_discount_in: [treasuryEthereum_BigDecimal!]\n  ohmdai_discount_lt: treasuryEthereum_BigDecimal\n  ohmdai_discount_lte: treasuryEthereum_BigDecimal\n  ohmdai_discount_not: treasuryEthereum_BigDecimal\n  ohmdai_discount_not_in: [treasuryEthereum_BigDecimal!]\n  ohmfrax_discount: treasuryEthereum_BigDecimal\n  ohmfrax_discount_gt: treasuryEthereum_BigDecimal\n  ohmfrax_discount_gte: treasuryEthereum_BigDecimal\n  ohmfrax_discount_in: [treasuryEthereum_BigDecimal!]\n  ohmfrax_discount_lt: treasuryEthereum_BigDecimal\n  ohmfrax_discount_lte: treasuryEthereum_BigDecimal\n  ohmfrax_discount_not: treasuryEthereum_BigDecimal\n  ohmfrax_discount_not_in: [treasuryEthereum_BigDecimal!]\n  ohmlusd_discount: treasuryEthereum_BigDecimal\n  ohmlusd_discount_gt: treasuryEthereum_BigDecimal\n  ohmlusd_discount_gte: treasuryEthereum_BigDecimal\n  ohmlusd_discount_in: [treasuryEthereum_BigDecimal!]\n  ohmlusd_discount_lt: treasuryEthereum_BigDecimal\n  ohmlusd_discount_lte: treasuryEthereum_BigDecimal\n  ohmlusd_discount_not: treasuryEthereum_BigDecimal\n  ohmlusd_discount_not_in: [treasuryEthereum_BigDecimal!]\n  or: [treasuryEthereum_BondDiscount_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n}\n\nenum treasuryEthereum_BondDiscount_orderBy {\n  dai_discount\n  eth_discount\n  frax_discount\n  id\n  lusd_discount\n  ohmdai_discount\n  ohmfrax_discount\n  ohmlusd_discount\n  timestamp\n}\n\nscalar treasuryEthereum_Bytes\n\ntype treasuryEthereum_ConvexRewardPoolSnapshot {\n  address: treasuryEthereum_Bytes!\n  block: BigInt!\n  id: ID!\n  stakingToken: treasuryEthereum_Bytes!\n  _join: Query!\n}\n\ninput treasuryEthereum_ConvexRewardPoolSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryEthereum_BlockChangedFilter\n  address: treasuryEthereum_Bytes\n  address_contains: treasuryEthereum_Bytes\n  address_gt: treasuryEthereum_Bytes\n  address_gte: treasuryEthereum_Bytes\n  address_in: [treasuryEthereum_Bytes!]\n  address_lt: treasuryEthereum_Bytes\n  address_lte: treasuryEthereum_Bytes\n  address_not: treasuryEthereum_Bytes\n  address_not_contains: treasuryEthereum_Bytes\n  address_not_in: [treasuryEthereum_Bytes!]\n  and: [treasuryEthereum_ConvexRewardPoolSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryEthereum_ConvexRewardPoolSnapshot_filter]\n  stakingToken: treasuryEthereum_Bytes\n  stakingToken_contains: treasuryEthereum_Bytes\n  stakingToken_gt: treasuryEthereum_Bytes\n  stakingToken_gte: treasuryEthereum_Bytes\n  stakingToken_in: [treasuryEthereum_Bytes!]\n  stakingToken_lt: treasuryEthereum_Bytes\n  stakingToken_lte: treasuryEthereum_Bytes\n  stakingToken_not: treasuryEthereum_Bytes\n  stakingToken_not_contains: treasuryEthereum_Bytes\n  stakingToken_not_in: [treasuryEthereum_Bytes!]\n}\n\nenum treasuryEthereum_ConvexRewardPoolSnapshot_orderBy {\n  address\n  block\n  id\n  stakingToken\n}\n\ntype treasuryEthereum_DailyBond {\n  amount: treasuryEthereum_BigDecimal!\n  id: ID!\n  timestamp: BigInt!\n  token: treasuryEthereum_Token!\n  value: treasuryEthereum_BigDecimal!\n  _join: Query!\n}\n\ninput treasuryEthereum_DailyBond_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryEthereum_BlockChangedFilter\n  amount: treasuryEthereum_BigDecimal\n  amount_gt: treasuryEthereum_BigDecimal\n  amount_gte: treasuryEthereum_BigDecimal\n  amount_in: [treasuryEthereum_BigDecimal!]\n  amount_lt: treasuryEthereum_BigDecimal\n  amount_lte: treasuryEthereum_BigDecimal\n  amount_not: treasuryEthereum_BigDecimal\n  amount_not_in: [treasuryEthereum_BigDecimal!]\n  and: [treasuryEthereum_DailyBond_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryEthereum_DailyBond_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  token_: treasuryEthereum_Token_filter\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  value: treasuryEthereum_BigDecimal\n  value_gt: treasuryEthereum_BigDecimal\n  value_gte: treasuryEthereum_BigDecimal\n  value_in: [treasuryEthereum_BigDecimal!]\n  value_lt: treasuryEthereum_BigDecimal\n  value_lte: treasuryEthereum_BigDecimal\n  value_not: treasuryEthereum_BigDecimal\n  value_not_in: [treasuryEthereum_BigDecimal!]\n}\n\nenum treasuryEthereum_DailyBond_orderBy {\n  amount\n  id\n  timestamp\n  token\n  token__id\n  value\n}\n\ntype treasuryEthereum_DailyStakingReward {\n  amount: treasuryEthereum_BigDecimal!\n  id: ID!\n  timestamp: BigInt!\n  value: treasuryEthereum_BigDecimal!\n  _join: Query!\n}\n\ninput treasuryEthereum_DailyStakingReward_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryEthereum_BlockChangedFilter\n  amount: treasuryEthereum_BigDecimal\n  amount_gt: treasuryEthereum_BigDecimal\n  amount_gte: treasuryEthereum_BigDecimal\n  amount_in: [treasuryEthereum_BigDecimal!]\n  amount_lt: treasuryEthereum_BigDecimal\n  amount_lte: treasuryEthereum_BigDecimal\n  amount_not: treasuryEthereum_BigDecimal\n  amount_not_in: [treasuryEthereum_BigDecimal!]\n  and: [treasuryEthereum_DailyStakingReward_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryEthereum_DailyStakingReward_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  value: treasuryEthereum_BigDecimal\n  value_gt: treasuryEthereum_BigDecimal\n  value_gte: treasuryEthereum_BigDecimal\n  value_in: [treasuryEthereum_BigDecimal!]\n  value_lt: treasuryEthereum_BigDecimal\n  value_lte: treasuryEthereum_BigDecimal\n  value_not: treasuryEthereum_BigDecimal\n  value_not_in: [treasuryEthereum_BigDecimal!]\n}\n\nenum treasuryEthereum_DailyStakingReward_orderBy {\n  amount\n  id\n  timestamp\n  value\n}\n\ntype treasuryEthereum_ERC20TokenSnapshot {\n  address: treasuryEthereum_Bytes!\n  decimals: Int!\n  id: ID!\n  totalSupply: treasuryEthereum_BigDecimal\n  _join: Query!\n}\n\ninput treasuryEthereum_ERC20TokenSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryEthereum_BlockChangedFilter\n  address: treasuryEthereum_Bytes\n  address_contains: treasuryEthereum_Bytes\n  address_gt: treasuryEthereum_Bytes\n  address_gte: treasuryEthereum_Bytes\n  address_in: [treasuryEthereum_Bytes!]\n  address_lt: treasuryEthereum_Bytes\n  address_lte: treasuryEthereum_Bytes\n  address_not: treasuryEthereum_Bytes\n  address_not_contains: treasuryEthereum_Bytes\n  address_not_in: [treasuryEthereum_Bytes!]\n  and: [treasuryEthereum_ERC20TokenSnapshot_filter]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryEthereum_ERC20TokenSnapshot_filter]\n  totalSupply: treasuryEthereum_BigDecimal\n  totalSupply_gt: treasuryEthereum_BigDecimal\n  totalSupply_gte: treasuryEthereum_BigDecimal\n  totalSupply_in: [treasuryEthereum_BigDecimal!]\n  totalSupply_lt: treasuryEthereum_BigDecimal\n  totalSupply_lte: treasuryEthereum_BigDecimal\n  totalSupply_not: treasuryEthereum_BigDecimal\n  totalSupply_not_in: [treasuryEthereum_BigDecimal!]\n}\n\nenum treasuryEthereum_ERC20TokenSnapshot_orderBy {\n  address\n  decimals\n  id\n  totalSupply\n}\n\ntype treasuryEthereum_GnosisAuction {\n  auctionCloseTimestamp: BigInt\n  auctionOpenTimestamp: BigInt!\n  bidQuantity: treasuryEthereum_BigDecimal\n  id: ID!\n  payoutCapacity: treasuryEthereum_BigDecimal!\n  termSeconds: BigInt!\n  _join: Query!\n}\n\ntype treasuryEthereum_GnosisAuctionRoot {\n  id: ID!\n  markets: [BigInt!]!\n  _join: Query!\n}\n\ninput treasuryEthereum_GnosisAuctionRoot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryEthereum_BlockChangedFilter\n  and: [treasuryEthereum_GnosisAuctionRoot_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  markets: [BigInt!]\n  markets_contains: [BigInt!]\n  markets_contains_nocase: [BigInt!]\n  markets_not: [BigInt!]\n  markets_not_contains: [BigInt!]\n  markets_not_contains_nocase: [BigInt!]\n  or: [treasuryEthereum_GnosisAuctionRoot_filter]\n}\n\nenum treasuryEthereum_GnosisAuctionRoot_orderBy {\n  id\n  markets\n}\n\ninput treasuryEthereum_GnosisAuction_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryEthereum_BlockChangedFilter\n  and: [treasuryEthereum_GnosisAuction_filter]\n  auctionCloseTimestamp: BigInt\n  auctionCloseTimestamp_gt: BigInt\n  auctionCloseTimestamp_gte: BigInt\n  auctionCloseTimestamp_in: [BigInt!]\n  auctionCloseTimestamp_lt: BigInt\n  auctionCloseTimestamp_lte: BigInt\n  auctionCloseTimestamp_not: BigInt\n  auctionCloseTimestamp_not_in: [BigInt!]\n  auctionOpenTimestamp: BigInt\n  auctionOpenTimestamp_gt: BigInt\n  auctionOpenTimestamp_gte: BigInt\n  auctionOpenTimestamp_in: [BigInt!]\n  auctionOpenTimestamp_lt: BigInt\n  auctionOpenTimestamp_lte: BigInt\n  auctionOpenTimestamp_not: BigInt\n  auctionOpenTimestamp_not_in: [BigInt!]\n  bidQuantity: treasuryEthereum_BigDecimal\n  bidQuantity_gt: treasuryEthereum_BigDecimal\n  bidQuantity_gte: treasuryEthereum_BigDecimal\n  bidQuantity_in: [treasuryEthereum_BigDecimal!]\n  bidQuantity_lt: treasuryEthereum_BigDecimal\n  bidQuantity_lte: treasuryEthereum_BigDecimal\n  bidQuantity_not: treasuryEthereum_BigDecimal\n  bidQuantity_not_in: [treasuryEthereum_BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryEthereum_GnosisAuction_filter]\n  payoutCapacity: treasuryEthereum_BigDecimal\n  payoutCapacity_gt: treasuryEthereum_BigDecimal\n  payoutCapacity_gte: treasuryEthereum_BigDecimal\n  payoutCapacity_in: [treasuryEthereum_BigDecimal!]\n  payoutCapacity_lt: treasuryEthereum_BigDecimal\n  payoutCapacity_lte: treasuryEthereum_BigDecimal\n  payoutCapacity_not: treasuryEthereum_BigDecimal\n  payoutCapacity_not_in: [treasuryEthereum_BigDecimal!]\n  termSeconds: BigInt\n  termSeconds_gt: BigInt\n  termSeconds_gte: BigInt\n  termSeconds_in: [BigInt!]\n  termSeconds_lt: BigInt\n  termSeconds_lte: BigInt\n  termSeconds_not: BigInt\n  termSeconds_not_in: [BigInt!]\n}\n\nenum treasuryEthereum_GnosisAuction_orderBy {\n  auctionCloseTimestamp\n  auctionOpenTimestamp\n  bidQuantity\n  id\n  payoutCapacity\n  termSeconds\n}\n\n\"\"\"Defines the order direction, either ascending or descending\"\"\"\nenum treasuryEthereum_OrderDirection {\n  asc\n  desc\n}\n\ntype treasuryEthereum_PoolSnapshot {\n  balances: [treasuryEthereum_BigDecimal!]!\n  block: BigInt!\n  decimals: Int!\n  id: ID!\n  pool: treasuryEthereum_Bytes!\n  poolToken: treasuryEthereum_Bytes\n  tokens: [treasuryEthereum_Bytes!]!\n  totalSupply: treasuryEthereum_BigDecimal!\n  weights: [treasuryEthereum_BigDecimal!]\n  _join: Query!\n}\n\ninput treasuryEthereum_PoolSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryEthereum_BlockChangedFilter\n  and: [treasuryEthereum_PoolSnapshot_filter]\n  balances: [treasuryEthereum_BigDecimal!]\n  balances_contains: [treasuryEthereum_BigDecimal!]\n  balances_contains_nocase: [treasuryEthereum_BigDecimal!]\n  balances_not: [treasuryEthereum_BigDecimal!]\n  balances_not_contains: [treasuryEthereum_BigDecimal!]\n  balances_not_contains_nocase: [treasuryEthereum_BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryEthereum_PoolSnapshot_filter]\n  pool: treasuryEthereum_Bytes\n  poolToken: treasuryEthereum_Bytes\n  poolToken_contains: treasuryEthereum_Bytes\n  poolToken_gt: treasuryEthereum_Bytes\n  poolToken_gte: treasuryEthereum_Bytes\n  poolToken_in: [treasuryEthereum_Bytes!]\n  poolToken_lt: treasuryEthereum_Bytes\n  poolToken_lte: treasuryEthereum_Bytes\n  poolToken_not: treasuryEthereum_Bytes\n  poolToken_not_contains: treasuryEthereum_Bytes\n  poolToken_not_in: [treasuryEthereum_Bytes!]\n  pool_contains: treasuryEthereum_Bytes\n  pool_gt: treasuryEthereum_Bytes\n  pool_gte: treasuryEthereum_Bytes\n  pool_in: [treasuryEthereum_Bytes!]\n  pool_lt: treasuryEthereum_Bytes\n  pool_lte: treasuryEthereum_Bytes\n  pool_not: treasuryEthereum_Bytes\n  pool_not_contains: treasuryEthereum_Bytes\n  pool_not_in: [treasuryEthereum_Bytes!]\n  tokens: [treasuryEthereum_Bytes!]\n  tokens_contains: [treasuryEthereum_Bytes!]\n  tokens_contains_nocase: [treasuryEthereum_Bytes!]\n  tokens_not: [treasuryEthereum_Bytes!]\n  tokens_not_contains: [treasuryEthereum_Bytes!]\n  tokens_not_contains_nocase: [treasuryEthereum_Bytes!]\n  totalSupply: treasuryEthereum_BigDecimal\n  totalSupply_gt: treasuryEthereum_BigDecimal\n  totalSupply_gte: treasuryEthereum_BigDecimal\n  totalSupply_in: [treasuryEthereum_BigDecimal!]\n  totalSupply_lt: treasuryEthereum_BigDecimal\n  totalSupply_lte: treasuryEthereum_BigDecimal\n  totalSupply_not: treasuryEthereum_BigDecimal\n  totalSupply_not_in: [treasuryEthereum_BigDecimal!]\n  weights: [treasuryEthereum_BigDecimal!]\n  weights_contains: [treasuryEthereum_BigDecimal!]\n  weights_contains_nocase: [treasuryEthereum_BigDecimal!]\n  weights_not: [treasuryEthereum_BigDecimal!]\n  weights_not_contains: [treasuryEthereum_BigDecimal!]\n  weights_not_contains_nocase: [treasuryEthereum_BigDecimal!]\n}\n\nenum treasuryEthereum_PoolSnapshot_orderBy {\n  balances\n  block\n  decimals\n  id\n  pool\n  poolToken\n  tokens\n  totalSupply\n  weights\n}\n\ntype treasuryEthereum_PriceSnapshot {\n  block: BigInt!\n  date: String!\n  id: ID!\n  priceGOhm: treasuryEthereum_BigDecimal!\n  priceOhm: treasuryEthereum_BigDecimal!\n  timestamp: BigInt!\n  _join: Query!\n}\n\ninput treasuryEthereum_PriceSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryEthereum_BlockChangedFilter\n  and: [treasuryEthereum_PriceSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryEthereum_PriceSnapshot_filter]\n  priceGOhm: treasuryEthereum_BigDecimal\n  priceGOhm_gt: treasuryEthereum_BigDecimal\n  priceGOhm_gte: treasuryEthereum_BigDecimal\n  priceGOhm_in: [treasuryEthereum_BigDecimal!]\n  priceGOhm_lt: treasuryEthereum_BigDecimal\n  priceGOhm_lte: treasuryEthereum_BigDecimal\n  priceGOhm_not: treasuryEthereum_BigDecimal\n  priceGOhm_not_in: [treasuryEthereum_BigDecimal!]\n  priceOhm: treasuryEthereum_BigDecimal\n  priceOhm_gt: treasuryEthereum_BigDecimal\n  priceOhm_gte: treasuryEthereum_BigDecimal\n  priceOhm_in: [treasuryEthereum_BigDecimal!]\n  priceOhm_lt: treasuryEthereum_BigDecimal\n  priceOhm_lte: treasuryEthereum_BigDecimal\n  priceOhm_not: treasuryEthereum_BigDecimal\n  priceOhm_not_in: [treasuryEthereum_BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n}\n\nenum treasuryEthereum_PriceSnapshot_orderBy {\n  block\n  date\n  id\n  priceGOhm\n  priceOhm\n  timestamp\n}\n\ntype treasuryEthereum_ProtocolMetric {\n  block: BigInt!\n  currentAPY: treasuryEthereum_BigDecimal!\n  currentIndex: treasuryEthereum_BigDecimal!\n  date: String!\n  gOhmPrice: treasuryEthereum_BigDecimal!\n  gOhmSyntheticSupply: treasuryEthereum_BigDecimal\n  gOhmTotalSupply: treasuryEthereum_BigDecimal!\n  id: ID!\n  marketCap: treasuryEthereum_BigDecimal\n  nextDistributedOhm: treasuryEthereum_BigDecimal!\n  nextEpochRebase: treasuryEthereum_BigDecimal!\n  ohmCirculatingSupply: treasuryEthereum_BigDecimal\n  ohmFloatingSupply: treasuryEthereum_BigDecimal\n  ohmPrice: treasuryEthereum_BigDecimal!\n  ohmTotalSupply: treasuryEthereum_BigDecimal!\n  sOhmCirculatingSupply: treasuryEthereum_BigDecimal!\n  timestamp: BigInt!\n  totalValueLocked: treasuryEthereum_BigDecimal!\n  treasuryLiquidBacking: treasuryEthereum_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic: treasuryEthereum_BigDecimal\n  treasuryLiquidBackingPerOhmFloating: treasuryEthereum_BigDecimal\n  treasuryMarketValue: treasuryEthereum_BigDecimal\n  _join: Query!\n}\n\ninput treasuryEthereum_ProtocolMetric_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryEthereum_BlockChangedFilter\n  and: [treasuryEthereum_ProtocolMetric_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  currentAPY: treasuryEthereum_BigDecimal\n  currentAPY_gt: treasuryEthereum_BigDecimal\n  currentAPY_gte: treasuryEthereum_BigDecimal\n  currentAPY_in: [treasuryEthereum_BigDecimal!]\n  currentAPY_lt: treasuryEthereum_BigDecimal\n  currentAPY_lte: treasuryEthereum_BigDecimal\n  currentAPY_not: treasuryEthereum_BigDecimal\n  currentAPY_not_in: [treasuryEthereum_BigDecimal!]\n  currentIndex: treasuryEthereum_BigDecimal\n  currentIndex_gt: treasuryEthereum_BigDecimal\n  currentIndex_gte: treasuryEthereum_BigDecimal\n  currentIndex_in: [treasuryEthereum_BigDecimal!]\n  currentIndex_lt: treasuryEthereum_BigDecimal\n  currentIndex_lte: treasuryEthereum_BigDecimal\n  currentIndex_not: treasuryEthereum_BigDecimal\n  currentIndex_not_in: [treasuryEthereum_BigDecimal!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  gOhmPrice: treasuryEthereum_BigDecimal\n  gOhmPrice_gt: treasuryEthereum_BigDecimal\n  gOhmPrice_gte: treasuryEthereum_BigDecimal\n  gOhmPrice_in: [treasuryEthereum_BigDecimal!]\n  gOhmPrice_lt: treasuryEthereum_BigDecimal\n  gOhmPrice_lte: treasuryEthereum_BigDecimal\n  gOhmPrice_not: treasuryEthereum_BigDecimal\n  gOhmPrice_not_in: [treasuryEthereum_BigDecimal!]\n  gOhmSyntheticSupply: treasuryEthereum_BigDecimal\n  gOhmSyntheticSupply_gt: treasuryEthereum_BigDecimal\n  gOhmSyntheticSupply_gte: treasuryEthereum_BigDecimal\n  gOhmSyntheticSupply_in: [treasuryEthereum_BigDecimal!]\n  gOhmSyntheticSupply_lt: treasuryEthereum_BigDecimal\n  gOhmSyntheticSupply_lte: treasuryEthereum_BigDecimal\n  gOhmSyntheticSupply_not: treasuryEthereum_BigDecimal\n  gOhmSyntheticSupply_not_in: [treasuryEthereum_BigDecimal!]\n  gOhmTotalSupply: treasuryEthereum_BigDecimal\n  gOhmTotalSupply_gt: treasuryEthereum_BigDecimal\n  gOhmTotalSupply_gte: treasuryEthereum_BigDecimal\n  gOhmTotalSupply_in: [treasuryEthereum_BigDecimal!]\n  gOhmTotalSupply_lt: treasuryEthereum_BigDecimal\n  gOhmTotalSupply_lte: treasuryEthereum_BigDecimal\n  gOhmTotalSupply_not: treasuryEthereum_BigDecimal\n  gOhmTotalSupply_not_in: [treasuryEthereum_BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  marketCap: treasuryEthereum_BigDecimal\n  marketCap_gt: treasuryEthereum_BigDecimal\n  marketCap_gte: treasuryEthereum_BigDecimal\n  marketCap_in: [treasuryEthereum_BigDecimal!]\n  marketCap_lt: treasuryEthereum_BigDecimal\n  marketCap_lte: treasuryEthereum_BigDecimal\n  marketCap_not: treasuryEthereum_BigDecimal\n  marketCap_not_in: [treasuryEthereum_BigDecimal!]\n  nextDistributedOhm: treasuryEthereum_BigDecimal\n  nextDistributedOhm_gt: treasuryEthereum_BigDecimal\n  nextDistributedOhm_gte: treasuryEthereum_BigDecimal\n  nextDistributedOhm_in: [treasuryEthereum_BigDecimal!]\n  nextDistributedOhm_lt: treasuryEthereum_BigDecimal\n  nextDistributedOhm_lte: treasuryEthereum_BigDecimal\n  nextDistributedOhm_not: treasuryEthereum_BigDecimal\n  nextDistributedOhm_not_in: [treasuryEthereum_BigDecimal!]\n  nextEpochRebase: treasuryEthereum_BigDecimal\n  nextEpochRebase_gt: treasuryEthereum_BigDecimal\n  nextEpochRebase_gte: treasuryEthereum_BigDecimal\n  nextEpochRebase_in: [treasuryEthereum_BigDecimal!]\n  nextEpochRebase_lt: treasuryEthereum_BigDecimal\n  nextEpochRebase_lte: treasuryEthereum_BigDecimal\n  nextEpochRebase_not: treasuryEthereum_BigDecimal\n  nextEpochRebase_not_in: [treasuryEthereum_BigDecimal!]\n  ohmCirculatingSupply: treasuryEthereum_BigDecimal\n  ohmCirculatingSupply_gt: treasuryEthereum_BigDecimal\n  ohmCirculatingSupply_gte: treasuryEthereum_BigDecimal\n  ohmCirculatingSupply_in: [treasuryEthereum_BigDecimal!]\n  ohmCirculatingSupply_lt: treasuryEthereum_BigDecimal\n  ohmCirculatingSupply_lte: treasuryEthereum_BigDecimal\n  ohmCirculatingSupply_not: treasuryEthereum_BigDecimal\n  ohmCirculatingSupply_not_in: [treasuryEthereum_BigDecimal!]\n  ohmFloatingSupply: treasuryEthereum_BigDecimal\n  ohmFloatingSupply_gt: treasuryEthereum_BigDecimal\n  ohmFloatingSupply_gte: treasuryEthereum_BigDecimal\n  ohmFloatingSupply_in: [treasuryEthereum_BigDecimal!]\n  ohmFloatingSupply_lt: treasuryEthereum_BigDecimal\n  ohmFloatingSupply_lte: treasuryEthereum_BigDecimal\n  ohmFloatingSupply_not: treasuryEthereum_BigDecimal\n  ohmFloatingSupply_not_in: [treasuryEthereum_BigDecimal!]\n  ohmPrice: treasuryEthereum_BigDecimal\n  ohmPrice_gt: treasuryEthereum_BigDecimal\n  ohmPrice_gte: treasuryEthereum_BigDecimal\n  ohmPrice_in: [treasuryEthereum_BigDecimal!]\n  ohmPrice_lt: treasuryEthereum_BigDecimal\n  ohmPrice_lte: treasuryEthereum_BigDecimal\n  ohmPrice_not: treasuryEthereum_BigDecimal\n  ohmPrice_not_in: [treasuryEthereum_BigDecimal!]\n  ohmTotalSupply: treasuryEthereum_BigDecimal\n  ohmTotalSupply_gt: treasuryEthereum_BigDecimal\n  ohmTotalSupply_gte: treasuryEthereum_BigDecimal\n  ohmTotalSupply_in: [treasuryEthereum_BigDecimal!]\n  ohmTotalSupply_lt: treasuryEthereum_BigDecimal\n  ohmTotalSupply_lte: treasuryEthereum_BigDecimal\n  ohmTotalSupply_not: treasuryEthereum_BigDecimal\n  ohmTotalSupply_not_in: [treasuryEthereum_BigDecimal!]\n  or: [treasuryEthereum_ProtocolMetric_filter]\n  sOhmCirculatingSupply: treasuryEthereum_BigDecimal\n  sOhmCirculatingSupply_gt: treasuryEthereum_BigDecimal\n  sOhmCirculatingSupply_gte: treasuryEthereum_BigDecimal\n  sOhmCirculatingSupply_in: [treasuryEthereum_BigDecimal!]\n  sOhmCirculatingSupply_lt: treasuryEthereum_BigDecimal\n  sOhmCirculatingSupply_lte: treasuryEthereum_BigDecimal\n  sOhmCirculatingSupply_not: treasuryEthereum_BigDecimal\n  sOhmCirculatingSupply_not_in: [treasuryEthereum_BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  totalValueLocked: treasuryEthereum_BigDecimal\n  totalValueLocked_gt: treasuryEthereum_BigDecimal\n  totalValueLocked_gte: treasuryEthereum_BigDecimal\n  totalValueLocked_in: [treasuryEthereum_BigDecimal!]\n  totalValueLocked_lt: treasuryEthereum_BigDecimal\n  totalValueLocked_lte: treasuryEthereum_BigDecimal\n  totalValueLocked_not: treasuryEthereum_BigDecimal\n  totalValueLocked_not_in: [treasuryEthereum_BigDecimal!]\n  treasuryLiquidBacking: treasuryEthereum_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic: treasuryEthereum_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_gt: treasuryEthereum_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_gte: treasuryEthereum_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_in: [treasuryEthereum_BigDecimal!]\n  treasuryLiquidBackingPerGOhmSynthetic_lt: treasuryEthereum_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_lte: treasuryEthereum_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_not: treasuryEthereum_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_not_in: [treasuryEthereum_BigDecimal!]\n  treasuryLiquidBackingPerOhmFloating: treasuryEthereum_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_gt: treasuryEthereum_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_gte: treasuryEthereum_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_in: [treasuryEthereum_BigDecimal!]\n  treasuryLiquidBackingPerOhmFloating_lt: treasuryEthereum_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_lte: treasuryEthereum_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_not: treasuryEthereum_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_not_in: [treasuryEthereum_BigDecimal!]\n  treasuryLiquidBacking_gt: treasuryEthereum_BigDecimal\n  treasuryLiquidBacking_gte: treasuryEthereum_BigDecimal\n  treasuryLiquidBacking_in: [treasuryEthereum_BigDecimal!]\n  treasuryLiquidBacking_lt: treasuryEthereum_BigDecimal\n  treasuryLiquidBacking_lte: treasuryEthereum_BigDecimal\n  treasuryLiquidBacking_not: treasuryEthereum_BigDecimal\n  treasuryLiquidBacking_not_in: [treasuryEthereum_BigDecimal!]\n  treasuryMarketValue: treasuryEthereum_BigDecimal\n  treasuryMarketValue_gt: treasuryEthereum_BigDecimal\n  treasuryMarketValue_gte: treasuryEthereum_BigDecimal\n  treasuryMarketValue_in: [treasuryEthereum_BigDecimal!]\n  treasuryMarketValue_lt: treasuryEthereum_BigDecimal\n  treasuryMarketValue_lte: treasuryEthereum_BigDecimal\n  treasuryMarketValue_not: treasuryEthereum_BigDecimal\n  treasuryMarketValue_not_in: [treasuryEthereum_BigDecimal!]\n}\n\nenum treasuryEthereum_ProtocolMetric_orderBy {\n  block\n  currentAPY\n  currentIndex\n  date\n  gOhmPrice\n  gOhmSyntheticSupply\n  gOhmTotalSupply\n  id\n  marketCap\n  nextDistributedOhm\n  nextEpochRebase\n  ohmCirculatingSupply\n  ohmFloatingSupply\n  ohmPrice\n  ohmTotalSupply\n  sOhmCirculatingSupply\n  timestamp\n  totalValueLocked\n  treasuryLiquidBacking\n  treasuryLiquidBackingPerGOhmSynthetic\n  treasuryLiquidBackingPerOhmFloating\n  treasuryMarketValue\n}\n\ntype treasuryEthereum_Rebase {\n  amount: treasuryEthereum_BigDecimal!\n  contract: String!\n  id: ID!\n  percentage: treasuryEthereum_BigDecimal!\n  stakedOhms: treasuryEthereum_BigDecimal!\n  timestamp: BigInt!\n  value: treasuryEthereum_BigDecimal!\n  _join: Query!\n}\n\ninput treasuryEthereum_Rebase_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryEthereum_BlockChangedFilter\n  amount: treasuryEthereum_BigDecimal\n  amount_gt: treasuryEthereum_BigDecimal\n  amount_gte: treasuryEthereum_BigDecimal\n  amount_in: [treasuryEthereum_BigDecimal!]\n  amount_lt: treasuryEthereum_BigDecimal\n  amount_lte: treasuryEthereum_BigDecimal\n  amount_not: treasuryEthereum_BigDecimal\n  amount_not_in: [treasuryEthereum_BigDecimal!]\n  and: [treasuryEthereum_Rebase_filter]\n  contract: String\n  contract_contains: String\n  contract_contains_nocase: String\n  contract_ends_with: String\n  contract_ends_with_nocase: String\n  contract_gt: String\n  contract_gte: String\n  contract_in: [String!]\n  contract_lt: String\n  contract_lte: String\n  contract_not: String\n  contract_not_contains: String\n  contract_not_contains_nocase: String\n  contract_not_ends_with: String\n  contract_not_ends_with_nocase: String\n  contract_not_in: [String!]\n  contract_not_starts_with: String\n  contract_not_starts_with_nocase: String\n  contract_starts_with: String\n  contract_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryEthereum_Rebase_filter]\n  percentage: treasuryEthereum_BigDecimal\n  percentage_gt: treasuryEthereum_BigDecimal\n  percentage_gte: treasuryEthereum_BigDecimal\n  percentage_in: [treasuryEthereum_BigDecimal!]\n  percentage_lt: treasuryEthereum_BigDecimal\n  percentage_lte: treasuryEthereum_BigDecimal\n  percentage_not: treasuryEthereum_BigDecimal\n  percentage_not_in: [treasuryEthereum_BigDecimal!]\n  stakedOhms: treasuryEthereum_BigDecimal\n  stakedOhms_gt: treasuryEthereum_BigDecimal\n  stakedOhms_gte: treasuryEthereum_BigDecimal\n  stakedOhms_in: [treasuryEthereum_BigDecimal!]\n  stakedOhms_lt: treasuryEthereum_BigDecimal\n  stakedOhms_lte: treasuryEthereum_BigDecimal\n  stakedOhms_not: treasuryEthereum_BigDecimal\n  stakedOhms_not_in: [treasuryEthereum_BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  value: treasuryEthereum_BigDecimal\n  value_gt: treasuryEthereum_BigDecimal\n  value_gte: treasuryEthereum_BigDecimal\n  value_in: [treasuryEthereum_BigDecimal!]\n  value_lt: treasuryEthereum_BigDecimal\n  value_lte: treasuryEthereum_BigDecimal\n  value_not: treasuryEthereum_BigDecimal\n  value_not_in: [treasuryEthereum_BigDecimal!]\n}\n\nenum treasuryEthereum_Rebase_orderBy {\n  amount\n  contract\n  id\n  percentage\n  stakedOhms\n  timestamp\n  value\n}\n\ntype treasuryEthereum_StakingPoolSnapshot {\n  block: BigInt!\n  contractAddress: treasuryEthereum_Bytes!\n  id: ID!\n  stakingToken: treasuryEthereum_Bytes\n  _join: Query!\n}\n\ninput treasuryEthereum_StakingPoolSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryEthereum_BlockChangedFilter\n  and: [treasuryEthereum_StakingPoolSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  contractAddress: treasuryEthereum_Bytes\n  contractAddress_contains: treasuryEthereum_Bytes\n  contractAddress_gt: treasuryEthereum_Bytes\n  contractAddress_gte: treasuryEthereum_Bytes\n  contractAddress_in: [treasuryEthereum_Bytes!]\n  contractAddress_lt: treasuryEthereum_Bytes\n  contractAddress_lte: treasuryEthereum_Bytes\n  contractAddress_not: treasuryEthereum_Bytes\n  contractAddress_not_contains: treasuryEthereum_Bytes\n  contractAddress_not_in: [treasuryEthereum_Bytes!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryEthereum_StakingPoolSnapshot_filter]\n  stakingToken: treasuryEthereum_Bytes\n  stakingToken_contains: treasuryEthereum_Bytes\n  stakingToken_gt: treasuryEthereum_Bytes\n  stakingToken_gte: treasuryEthereum_Bytes\n  stakingToken_in: [treasuryEthereum_Bytes!]\n  stakingToken_lt: treasuryEthereum_Bytes\n  stakingToken_lte: treasuryEthereum_Bytes\n  stakingToken_not: treasuryEthereum_Bytes\n  stakingToken_not_contains: treasuryEthereum_Bytes\n  stakingToken_not_in: [treasuryEthereum_Bytes!]\n}\n\nenum treasuryEthereum_StakingPoolSnapshot_orderBy {\n  block\n  contractAddress\n  id\n  stakingToken\n}\n\ntype treasuryEthereum_Token {\n  id: ID!\n  _join: Query!\n}\n\ntype treasuryEthereum_TokenPriceSnapshot {\n  block: BigInt!\n  id: ID!\n  price: treasuryEthereum_BigDecimal!\n  token: treasuryEthereum_Bytes!\n  _join: Query!\n}\n\ninput treasuryEthereum_TokenPriceSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryEthereum_BlockChangedFilter\n  and: [treasuryEthereum_TokenPriceSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryEthereum_TokenPriceSnapshot_filter]\n  price: treasuryEthereum_BigDecimal\n  price_gt: treasuryEthereum_BigDecimal\n  price_gte: treasuryEthereum_BigDecimal\n  price_in: [treasuryEthereum_BigDecimal!]\n  price_lt: treasuryEthereum_BigDecimal\n  price_lte: treasuryEthereum_BigDecimal\n  price_not: treasuryEthereum_BigDecimal\n  price_not_in: [treasuryEthereum_BigDecimal!]\n  token: treasuryEthereum_Bytes\n  token_contains: treasuryEthereum_Bytes\n  token_gt: treasuryEthereum_Bytes\n  token_gte: treasuryEthereum_Bytes\n  token_in: [treasuryEthereum_Bytes!]\n  token_lt: treasuryEthereum_Bytes\n  token_lte: treasuryEthereum_Bytes\n  token_not: treasuryEthereum_Bytes\n  token_not_contains: treasuryEthereum_Bytes\n  token_not_in: [treasuryEthereum_Bytes!]\n}\n\nenum treasuryEthereum_TokenPriceSnapshot_orderBy {\n  block\n  id\n  price\n  token\n}\n\ntype treasuryEthereum_TokenRecord {\n  balance: treasuryEthereum_BigDecimal!\n  block: BigInt!\n  blockchain: String!\n  category: String!\n  date: String!\n  id: ID!\n  isBluechip: Boolean!\n  isLiquid: Boolean!\n  multiplier: treasuryEthereum_BigDecimal!\n  rate: treasuryEthereum_BigDecimal!\n  source: String!\n  sourceAddress: String!\n  timestamp: BigInt!\n  token: String!\n  tokenAddress: String!\n  value: treasuryEthereum_BigDecimal!\n  valueExcludingOhm: treasuryEthereum_BigDecimal!\n  _join: Query!\n}\n\ninput treasuryEthereum_TokenRecord_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryEthereum_BlockChangedFilter\n  and: [treasuryEthereum_TokenRecord_filter]\n  balance: treasuryEthereum_BigDecimal\n  balance_gt: treasuryEthereum_BigDecimal\n  balance_gte: treasuryEthereum_BigDecimal\n  balance_in: [treasuryEthereum_BigDecimal!]\n  balance_lt: treasuryEthereum_BigDecimal\n  balance_lte: treasuryEthereum_BigDecimal\n  balance_not: treasuryEthereum_BigDecimal\n  balance_not_in: [treasuryEthereum_BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  blockchain: String\n  blockchain_contains: String\n  blockchain_contains_nocase: String\n  blockchain_ends_with: String\n  blockchain_ends_with_nocase: String\n  blockchain_gt: String\n  blockchain_gte: String\n  blockchain_in: [String!]\n  blockchain_lt: String\n  blockchain_lte: String\n  blockchain_not: String\n  blockchain_not_contains: String\n  blockchain_not_contains_nocase: String\n  blockchain_not_ends_with: String\n  blockchain_not_ends_with_nocase: String\n  blockchain_not_in: [String!]\n  blockchain_not_starts_with: String\n  blockchain_not_starts_with_nocase: String\n  blockchain_starts_with: String\n  blockchain_starts_with_nocase: String\n  category: String\n  category_contains: String\n  category_contains_nocase: String\n  category_ends_with: String\n  category_ends_with_nocase: String\n  category_gt: String\n  category_gte: String\n  category_in: [String!]\n  category_lt: String\n  category_lte: String\n  category_not: String\n  category_not_contains: String\n  category_not_contains_nocase: String\n  category_not_ends_with: String\n  category_not_ends_with_nocase: String\n  category_not_in: [String!]\n  category_not_starts_with: String\n  category_not_starts_with_nocase: String\n  category_starts_with: String\n  category_starts_with_nocase: String\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  isBluechip: Boolean\n  isBluechip_in: [Boolean!]\n  isBluechip_not: Boolean\n  isBluechip_not_in: [Boolean!]\n  isLiquid: Boolean\n  isLiquid_in: [Boolean!]\n  isLiquid_not: Boolean\n  isLiquid_not_in: [Boolean!]\n  multiplier: treasuryEthereum_BigDecimal\n  multiplier_gt: treasuryEthereum_BigDecimal\n  multiplier_gte: treasuryEthereum_BigDecimal\n  multiplier_in: [treasuryEthereum_BigDecimal!]\n  multiplier_lt: treasuryEthereum_BigDecimal\n  multiplier_lte: treasuryEthereum_BigDecimal\n  multiplier_not: treasuryEthereum_BigDecimal\n  multiplier_not_in: [treasuryEthereum_BigDecimal!]\n  or: [treasuryEthereum_TokenRecord_filter]\n  rate: treasuryEthereum_BigDecimal\n  rate_gt: treasuryEthereum_BigDecimal\n  rate_gte: treasuryEthereum_BigDecimal\n  rate_in: [treasuryEthereum_BigDecimal!]\n  rate_lt: treasuryEthereum_BigDecimal\n  rate_lte: treasuryEthereum_BigDecimal\n  rate_not: treasuryEthereum_BigDecimal\n  rate_not_in: [treasuryEthereum_BigDecimal!]\n  source: String\n  sourceAddress: String\n  sourceAddress_contains: String\n  sourceAddress_contains_nocase: String\n  sourceAddress_ends_with: String\n  sourceAddress_ends_with_nocase: String\n  sourceAddress_gt: String\n  sourceAddress_gte: String\n  sourceAddress_in: [String!]\n  sourceAddress_lt: String\n  sourceAddress_lte: String\n  sourceAddress_not: String\n  sourceAddress_not_contains: String\n  sourceAddress_not_contains_nocase: String\n  sourceAddress_not_ends_with: String\n  sourceAddress_not_ends_with_nocase: String\n  sourceAddress_not_in: [String!]\n  sourceAddress_not_starts_with: String\n  sourceAddress_not_starts_with_nocase: String\n  sourceAddress_starts_with: String\n  sourceAddress_starts_with_nocase: String\n  source_contains: String\n  source_contains_nocase: String\n  source_ends_with: String\n  source_ends_with_nocase: String\n  source_gt: String\n  source_gte: String\n  source_in: [String!]\n  source_lt: String\n  source_lte: String\n  source_not: String\n  source_not_contains: String\n  source_not_contains_nocase: String\n  source_not_ends_with: String\n  source_not_ends_with_nocase: String\n  source_not_in: [String!]\n  source_not_starts_with: String\n  source_not_starts_with_nocase: String\n  source_starts_with: String\n  source_starts_with_nocase: String\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  tokenAddress: String\n  tokenAddress_contains: String\n  tokenAddress_contains_nocase: String\n  tokenAddress_ends_with: String\n  tokenAddress_ends_with_nocase: String\n  tokenAddress_gt: String\n  tokenAddress_gte: String\n  tokenAddress_in: [String!]\n  tokenAddress_lt: String\n  tokenAddress_lte: String\n  tokenAddress_not: String\n  tokenAddress_not_contains: String\n  tokenAddress_not_contains_nocase: String\n  tokenAddress_not_ends_with: String\n  tokenAddress_not_ends_with_nocase: String\n  tokenAddress_not_in: [String!]\n  tokenAddress_not_starts_with: String\n  tokenAddress_not_starts_with_nocase: String\n  tokenAddress_starts_with: String\n  tokenAddress_starts_with_nocase: String\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  value: treasuryEthereum_BigDecimal\n  valueExcludingOhm: treasuryEthereum_BigDecimal\n  valueExcludingOhm_gt: treasuryEthereum_BigDecimal\n  valueExcludingOhm_gte: treasuryEthereum_BigDecimal\n  valueExcludingOhm_in: [treasuryEthereum_BigDecimal!]\n  valueExcludingOhm_lt: treasuryEthereum_BigDecimal\n  valueExcludingOhm_lte: treasuryEthereum_BigDecimal\n  valueExcludingOhm_not: treasuryEthereum_BigDecimal\n  valueExcludingOhm_not_in: [treasuryEthereum_BigDecimal!]\n  value_gt: treasuryEthereum_BigDecimal\n  value_gte: treasuryEthereum_BigDecimal\n  value_in: [treasuryEthereum_BigDecimal!]\n  value_lt: treasuryEthereum_BigDecimal\n  value_lte: treasuryEthereum_BigDecimal\n  value_not: treasuryEthereum_BigDecimal\n  value_not_in: [treasuryEthereum_BigDecimal!]\n}\n\nenum treasuryEthereum_TokenRecord_orderBy {\n  balance\n  block\n  blockchain\n  category\n  date\n  id\n  isBluechip\n  isLiquid\n  multiplier\n  rate\n  source\n  sourceAddress\n  timestamp\n  token\n  tokenAddress\n  value\n  valueExcludingOhm\n}\n\ntype treasuryEthereum_TokenSupply {\n  balance: treasuryEthereum_BigDecimal!\n  block: BigInt!\n  date: String!\n  id: ID!\n  pool: String\n  poolAddress: String\n  source: String\n  sourceAddress: String\n  supplyBalance: treasuryEthereum_BigDecimal!\n  timestamp: BigInt!\n  token: String!\n  tokenAddress: String!\n  type: String!\n  _join: Query!\n}\n\ninput treasuryEthereum_TokenSupply_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryEthereum_BlockChangedFilter\n  and: [treasuryEthereum_TokenSupply_filter]\n  balance: treasuryEthereum_BigDecimal\n  balance_gt: treasuryEthereum_BigDecimal\n  balance_gte: treasuryEthereum_BigDecimal\n  balance_in: [treasuryEthereum_BigDecimal!]\n  balance_lt: treasuryEthereum_BigDecimal\n  balance_lte: treasuryEthereum_BigDecimal\n  balance_not: treasuryEthereum_BigDecimal\n  balance_not_in: [treasuryEthereum_BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryEthereum_TokenSupply_filter]\n  pool: String\n  poolAddress: String\n  poolAddress_contains: String\n  poolAddress_contains_nocase: String\n  poolAddress_ends_with: String\n  poolAddress_ends_with_nocase: String\n  poolAddress_gt: String\n  poolAddress_gte: String\n  poolAddress_in: [String!]\n  poolAddress_lt: String\n  poolAddress_lte: String\n  poolAddress_not: String\n  poolAddress_not_contains: String\n  poolAddress_not_contains_nocase: String\n  poolAddress_not_ends_with: String\n  poolAddress_not_ends_with_nocase: String\n  poolAddress_not_in: [String!]\n  poolAddress_not_starts_with: String\n  poolAddress_not_starts_with_nocase: String\n  poolAddress_starts_with: String\n  poolAddress_starts_with_nocase: String\n  pool_contains: String\n  pool_contains_nocase: String\n  pool_ends_with: String\n  pool_ends_with_nocase: String\n  pool_gt: String\n  pool_gte: String\n  pool_in: [String!]\n  pool_lt: String\n  pool_lte: String\n  pool_not: String\n  pool_not_contains: String\n  pool_not_contains_nocase: String\n  pool_not_ends_with: String\n  pool_not_ends_with_nocase: String\n  pool_not_in: [String!]\n  pool_not_starts_with: String\n  pool_not_starts_with_nocase: String\n  pool_starts_with: String\n  pool_starts_with_nocase: String\n  source: String\n  sourceAddress: String\n  sourceAddress_contains: String\n  sourceAddress_contains_nocase: String\n  sourceAddress_ends_with: String\n  sourceAddress_ends_with_nocase: String\n  sourceAddress_gt: String\n  sourceAddress_gte: String\n  sourceAddress_in: [String!]\n  sourceAddress_lt: String\n  sourceAddress_lte: String\n  sourceAddress_not: String\n  sourceAddress_not_contains: String\n  sourceAddress_not_contains_nocase: String\n  sourceAddress_not_ends_with: String\n  sourceAddress_not_ends_with_nocase: String\n  sourceAddress_not_in: [String!]\n  sourceAddress_not_starts_with: String\n  sourceAddress_not_starts_with_nocase: String\n  sourceAddress_starts_with: String\n  sourceAddress_starts_with_nocase: String\n  source_contains: String\n  source_contains_nocase: String\n  source_ends_with: String\n  source_ends_with_nocase: String\n  source_gt: String\n  source_gte: String\n  source_in: [String!]\n  source_lt: String\n  source_lte: String\n  source_not: String\n  source_not_contains: String\n  source_not_contains_nocase: String\n  source_not_ends_with: String\n  source_not_ends_with_nocase: String\n  source_not_in: [String!]\n  source_not_starts_with: String\n  source_not_starts_with_nocase: String\n  source_starts_with: String\n  source_starts_with_nocase: String\n  supplyBalance: treasuryEthereum_BigDecimal\n  supplyBalance_gt: treasuryEthereum_BigDecimal\n  supplyBalance_gte: treasuryEthereum_BigDecimal\n  supplyBalance_in: [treasuryEthereum_BigDecimal!]\n  supplyBalance_lt: treasuryEthereum_BigDecimal\n  supplyBalance_lte: treasuryEthereum_BigDecimal\n  supplyBalance_not: treasuryEthereum_BigDecimal\n  supplyBalance_not_in: [treasuryEthereum_BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  tokenAddress: String\n  tokenAddress_contains: String\n  tokenAddress_contains_nocase: String\n  tokenAddress_ends_with: String\n  tokenAddress_ends_with_nocase: String\n  tokenAddress_gt: String\n  tokenAddress_gte: String\n  tokenAddress_in: [String!]\n  tokenAddress_lt: String\n  tokenAddress_lte: String\n  tokenAddress_not: String\n  tokenAddress_not_contains: String\n  tokenAddress_not_contains_nocase: String\n  tokenAddress_not_ends_with: String\n  tokenAddress_not_ends_with_nocase: String\n  tokenAddress_not_in: [String!]\n  tokenAddress_not_starts_with: String\n  tokenAddress_not_starts_with_nocase: String\n  tokenAddress_starts_with: String\n  tokenAddress_starts_with_nocase: String\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  type: String\n  type_contains: String\n  type_contains_nocase: String\n  type_ends_with: String\n  type_ends_with_nocase: String\n  type_gt: String\n  type_gte: String\n  type_in: [String!]\n  type_lt: String\n  type_lte: String\n  type_not: String\n  type_not_contains: String\n  type_not_contains_nocase: String\n  type_not_ends_with: String\n  type_not_ends_with_nocase: String\n  type_not_in: [String!]\n  type_not_starts_with: String\n  type_not_starts_with_nocase: String\n  type_starts_with: String\n  type_starts_with_nocase: String\n}\n\nenum treasuryEthereum_TokenSupply_orderBy {\n  balance\n  block\n  date\n  id\n  pool\n  poolAddress\n  source\n  sourceAddress\n  supplyBalance\n  timestamp\n  token\n  tokenAddress\n  type\n}\n\ninput treasuryEthereum_Token_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryEthereum_BlockChangedFilter\n  and: [treasuryEthereum_Token_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryEthereum_Token_filter]\n}\n\nenum treasuryEthereum_Token_orderBy {\n  id\n}\n\ntype treasuryEthereum__Block_ {\n  \"\"\"The hash of the block\"\"\"\n  hash: treasuryEthereum_Bytes\n  \"\"\"The block number\"\"\"\n  number: Int!\n  \"\"\"Integer representation of the timestamp stored in blocks for the chain\"\"\"\n  timestamp: Int\n  _join: Query!\n}\n\n\"\"\"The type for the top-level _meta field\"\"\"\ntype treasuryEthereum__Meta_ {\n  \"Information about a specific subgraph block. The hash of the block\\nwill be null if the _meta field has a block constraint that asks for\\na block number. It will be filled if the _meta field has no block constraint\\nand therefore asks for the latest  block\\n\"\n  block: treasuryEthereum__Block_!\n  \"\"\"The deployment ID\"\"\"\n  deployment: String!\n  \"\"\"If `true`, the subgraph encountered indexing errors at some past block\"\"\"\n  hasIndexingErrors: Boolean!\n  _join: Query!\n}\n\nenum treasuryEthereum__SubgraphErrorPolicy_ {\n  \"\"\"Data will be returned even if the subgraph has indexing errors\"\"\"\n  allow\n  \"\"\"\n  If the subgraph has indexing errors, data will be omitted. The default.\n  \"\"\"\n  deny\n}\n\ntype treasuryFantom_BalancerPoolSnapshot {\n  balances: [treasuryFantom_BigDecimal!]!\n  block: BigInt!\n  decimals: Int!\n  id: ID!\n  pool: treasuryFantom_Bytes!\n  poolToken: treasuryFantom_Bytes!\n  tokens: [treasuryFantom_Bytes!]!\n  totalSupply: treasuryFantom_BigDecimal!\n  weights: [treasuryFantom_BigDecimal!]!\n  _join: Query!\n}\n\ninput treasuryFantom_BalancerPoolSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryFantom_BlockChangedFilter\n  and: [treasuryFantom_BalancerPoolSnapshot_filter]\n  balances: [treasuryFantom_BigDecimal!]\n  balances_contains: [treasuryFantom_BigDecimal!]\n  balances_contains_nocase: [treasuryFantom_BigDecimal!]\n  balances_not: [treasuryFantom_BigDecimal!]\n  balances_not_contains: [treasuryFantom_BigDecimal!]\n  balances_not_contains_nocase: [treasuryFantom_BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryFantom_BalancerPoolSnapshot_filter]\n  pool: treasuryFantom_Bytes\n  poolToken: treasuryFantom_Bytes\n  poolToken_contains: treasuryFantom_Bytes\n  poolToken_gt: treasuryFantom_Bytes\n  poolToken_gte: treasuryFantom_Bytes\n  poolToken_in: [treasuryFantom_Bytes!]\n  poolToken_lt: treasuryFantom_Bytes\n  poolToken_lte: treasuryFantom_Bytes\n  poolToken_not: treasuryFantom_Bytes\n  poolToken_not_contains: treasuryFantom_Bytes\n  poolToken_not_in: [treasuryFantom_Bytes!]\n  pool_contains: treasuryFantom_Bytes\n  pool_gt: treasuryFantom_Bytes\n  pool_gte: treasuryFantom_Bytes\n  pool_in: [treasuryFantom_Bytes!]\n  pool_lt: treasuryFantom_Bytes\n  pool_lte: treasuryFantom_Bytes\n  pool_not: treasuryFantom_Bytes\n  pool_not_contains: treasuryFantom_Bytes\n  pool_not_in: [treasuryFantom_Bytes!]\n  tokens: [treasuryFantom_Bytes!]\n  tokens_contains: [treasuryFantom_Bytes!]\n  tokens_contains_nocase: [treasuryFantom_Bytes!]\n  tokens_not: [treasuryFantom_Bytes!]\n  tokens_not_contains: [treasuryFantom_Bytes!]\n  tokens_not_contains_nocase: [treasuryFantom_Bytes!]\n  totalSupply: treasuryFantom_BigDecimal\n  totalSupply_gt: treasuryFantom_BigDecimal\n  totalSupply_gte: treasuryFantom_BigDecimal\n  totalSupply_in: [treasuryFantom_BigDecimal!]\n  totalSupply_lt: treasuryFantom_BigDecimal\n  totalSupply_lte: treasuryFantom_BigDecimal\n  totalSupply_not: treasuryFantom_BigDecimal\n  totalSupply_not_in: [treasuryFantom_BigDecimal!]\n  weights: [treasuryFantom_BigDecimal!]\n  weights_contains: [treasuryFantom_BigDecimal!]\n  weights_contains_nocase: [treasuryFantom_BigDecimal!]\n  weights_not: [treasuryFantom_BigDecimal!]\n  weights_not_contains: [treasuryFantom_BigDecimal!]\n  weights_not_contains_nocase: [treasuryFantom_BigDecimal!]\n}\n\nenum treasuryFantom_BalancerPoolSnapshot_orderBy {\n  balances\n  block\n  decimals\n  id\n  pool\n  poolToken\n  tokens\n  totalSupply\n  weights\n}\n\nscalar treasuryFantom_BigDecimal\n\ninput treasuryFantom_BlockChangedFilter {\n  number_gte: Int!\n}\n\ninput treasuryFantom_Block_height {\n  hash: treasuryFantom_Bytes\n  number: Int\n  number_gte: Int\n}\n\ntype treasuryFantom_BondDiscount {\n  dai_discount: treasuryFantom_BigDecimal!\n  eth_discount: treasuryFantom_BigDecimal!\n  frax_discount: treasuryFantom_BigDecimal!\n  id: ID!\n  lusd_discount: treasuryFantom_BigDecimal!\n  ohmdai_discount: treasuryFantom_BigDecimal!\n  ohmfrax_discount: treasuryFantom_BigDecimal!\n  ohmlusd_discount: treasuryFantom_BigDecimal!\n  timestamp: BigInt!\n  _join: Query!\n}\n\ninput treasuryFantom_BondDiscount_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryFantom_BlockChangedFilter\n  and: [treasuryFantom_BondDiscount_filter]\n  dai_discount: treasuryFantom_BigDecimal\n  dai_discount_gt: treasuryFantom_BigDecimal\n  dai_discount_gte: treasuryFantom_BigDecimal\n  dai_discount_in: [treasuryFantom_BigDecimal!]\n  dai_discount_lt: treasuryFantom_BigDecimal\n  dai_discount_lte: treasuryFantom_BigDecimal\n  dai_discount_not: treasuryFantom_BigDecimal\n  dai_discount_not_in: [treasuryFantom_BigDecimal!]\n  eth_discount: treasuryFantom_BigDecimal\n  eth_discount_gt: treasuryFantom_BigDecimal\n  eth_discount_gte: treasuryFantom_BigDecimal\n  eth_discount_in: [treasuryFantom_BigDecimal!]\n  eth_discount_lt: treasuryFantom_BigDecimal\n  eth_discount_lte: treasuryFantom_BigDecimal\n  eth_discount_not: treasuryFantom_BigDecimal\n  eth_discount_not_in: [treasuryFantom_BigDecimal!]\n  frax_discount: treasuryFantom_BigDecimal\n  frax_discount_gt: treasuryFantom_BigDecimal\n  frax_discount_gte: treasuryFantom_BigDecimal\n  frax_discount_in: [treasuryFantom_BigDecimal!]\n  frax_discount_lt: treasuryFantom_BigDecimal\n  frax_discount_lte: treasuryFantom_BigDecimal\n  frax_discount_not: treasuryFantom_BigDecimal\n  frax_discount_not_in: [treasuryFantom_BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  lusd_discount: treasuryFantom_BigDecimal\n  lusd_discount_gt: treasuryFantom_BigDecimal\n  lusd_discount_gte: treasuryFantom_BigDecimal\n  lusd_discount_in: [treasuryFantom_BigDecimal!]\n  lusd_discount_lt: treasuryFantom_BigDecimal\n  lusd_discount_lte: treasuryFantom_BigDecimal\n  lusd_discount_not: treasuryFantom_BigDecimal\n  lusd_discount_not_in: [treasuryFantom_BigDecimal!]\n  ohmdai_discount: treasuryFantom_BigDecimal\n  ohmdai_discount_gt: treasuryFantom_BigDecimal\n  ohmdai_discount_gte: treasuryFantom_BigDecimal\n  ohmdai_discount_in: [treasuryFantom_BigDecimal!]\n  ohmdai_discount_lt: treasuryFantom_BigDecimal\n  ohmdai_discount_lte: treasuryFantom_BigDecimal\n  ohmdai_discount_not: treasuryFantom_BigDecimal\n  ohmdai_discount_not_in: [treasuryFantom_BigDecimal!]\n  ohmfrax_discount: treasuryFantom_BigDecimal\n  ohmfrax_discount_gt: treasuryFantom_BigDecimal\n  ohmfrax_discount_gte: treasuryFantom_BigDecimal\n  ohmfrax_discount_in: [treasuryFantom_BigDecimal!]\n  ohmfrax_discount_lt: treasuryFantom_BigDecimal\n  ohmfrax_discount_lte: treasuryFantom_BigDecimal\n  ohmfrax_discount_not: treasuryFantom_BigDecimal\n  ohmfrax_discount_not_in: [treasuryFantom_BigDecimal!]\n  ohmlusd_discount: treasuryFantom_BigDecimal\n  ohmlusd_discount_gt: treasuryFantom_BigDecimal\n  ohmlusd_discount_gte: treasuryFantom_BigDecimal\n  ohmlusd_discount_in: [treasuryFantom_BigDecimal!]\n  ohmlusd_discount_lt: treasuryFantom_BigDecimal\n  ohmlusd_discount_lte: treasuryFantom_BigDecimal\n  ohmlusd_discount_not: treasuryFantom_BigDecimal\n  ohmlusd_discount_not_in: [treasuryFantom_BigDecimal!]\n  or: [treasuryFantom_BondDiscount_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n}\n\nenum treasuryFantom_BondDiscount_orderBy {\n  dai_discount\n  eth_discount\n  frax_discount\n  id\n  lusd_discount\n  ohmdai_discount\n  ohmfrax_discount\n  ohmlusd_discount\n  timestamp\n}\n\nscalar treasuryFantom_Bytes\n\ntype treasuryFantom_ConvexRewardPoolSnapshot {\n  address: treasuryFantom_Bytes!\n  block: BigInt!\n  id: ID!\n  stakingToken: treasuryFantom_Bytes!\n  _join: Query!\n}\n\ninput treasuryFantom_ConvexRewardPoolSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryFantom_BlockChangedFilter\n  address: treasuryFantom_Bytes\n  address_contains: treasuryFantom_Bytes\n  address_gt: treasuryFantom_Bytes\n  address_gte: treasuryFantom_Bytes\n  address_in: [treasuryFantom_Bytes!]\n  address_lt: treasuryFantom_Bytes\n  address_lte: treasuryFantom_Bytes\n  address_not: treasuryFantom_Bytes\n  address_not_contains: treasuryFantom_Bytes\n  address_not_in: [treasuryFantom_Bytes!]\n  and: [treasuryFantom_ConvexRewardPoolSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryFantom_ConvexRewardPoolSnapshot_filter]\n  stakingToken: treasuryFantom_Bytes\n  stakingToken_contains: treasuryFantom_Bytes\n  stakingToken_gt: treasuryFantom_Bytes\n  stakingToken_gte: treasuryFantom_Bytes\n  stakingToken_in: [treasuryFantom_Bytes!]\n  stakingToken_lt: treasuryFantom_Bytes\n  stakingToken_lte: treasuryFantom_Bytes\n  stakingToken_not: treasuryFantom_Bytes\n  stakingToken_not_contains: treasuryFantom_Bytes\n  stakingToken_not_in: [treasuryFantom_Bytes!]\n}\n\nenum treasuryFantom_ConvexRewardPoolSnapshot_orderBy {\n  address\n  block\n  id\n  stakingToken\n}\n\ntype treasuryFantom_DailyBond {\n  amount: treasuryFantom_BigDecimal!\n  id: ID!\n  timestamp: BigInt!\n  token: treasuryFantom_Token!\n  value: treasuryFantom_BigDecimal!\n  _join: Query!\n}\n\ninput treasuryFantom_DailyBond_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryFantom_BlockChangedFilter\n  amount: treasuryFantom_BigDecimal\n  amount_gt: treasuryFantom_BigDecimal\n  amount_gte: treasuryFantom_BigDecimal\n  amount_in: [treasuryFantom_BigDecimal!]\n  amount_lt: treasuryFantom_BigDecimal\n  amount_lte: treasuryFantom_BigDecimal\n  amount_not: treasuryFantom_BigDecimal\n  amount_not_in: [treasuryFantom_BigDecimal!]\n  and: [treasuryFantom_DailyBond_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryFantom_DailyBond_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  token_: treasuryFantom_Token_filter\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  value: treasuryFantom_BigDecimal\n  value_gt: treasuryFantom_BigDecimal\n  value_gte: treasuryFantom_BigDecimal\n  value_in: [treasuryFantom_BigDecimal!]\n  value_lt: treasuryFantom_BigDecimal\n  value_lte: treasuryFantom_BigDecimal\n  value_not: treasuryFantom_BigDecimal\n  value_not_in: [treasuryFantom_BigDecimal!]\n}\n\nenum treasuryFantom_DailyBond_orderBy {\n  amount\n  id\n  timestamp\n  token\n  token__id\n  value\n}\n\ntype treasuryFantom_DailyStakingReward {\n  amount: treasuryFantom_BigDecimal!\n  id: ID!\n  timestamp: BigInt!\n  value: treasuryFantom_BigDecimal!\n  _join: Query!\n}\n\ninput treasuryFantom_DailyStakingReward_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryFantom_BlockChangedFilter\n  amount: treasuryFantom_BigDecimal\n  amount_gt: treasuryFantom_BigDecimal\n  amount_gte: treasuryFantom_BigDecimal\n  amount_in: [treasuryFantom_BigDecimal!]\n  amount_lt: treasuryFantom_BigDecimal\n  amount_lte: treasuryFantom_BigDecimal\n  amount_not: treasuryFantom_BigDecimal\n  amount_not_in: [treasuryFantom_BigDecimal!]\n  and: [treasuryFantom_DailyStakingReward_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryFantom_DailyStakingReward_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  value: treasuryFantom_BigDecimal\n  value_gt: treasuryFantom_BigDecimal\n  value_gte: treasuryFantom_BigDecimal\n  value_in: [treasuryFantom_BigDecimal!]\n  value_lt: treasuryFantom_BigDecimal\n  value_lte: treasuryFantom_BigDecimal\n  value_not: treasuryFantom_BigDecimal\n  value_not_in: [treasuryFantom_BigDecimal!]\n}\n\nenum treasuryFantom_DailyStakingReward_orderBy {\n  amount\n  id\n  timestamp\n  value\n}\n\ntype treasuryFantom_ERC20TokenSnapshot {\n  address: treasuryFantom_Bytes!\n  decimals: Int!\n  id: ID!\n  totalSupply: treasuryFantom_BigDecimal\n  _join: Query!\n}\n\ninput treasuryFantom_ERC20TokenSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryFantom_BlockChangedFilter\n  address: treasuryFantom_Bytes\n  address_contains: treasuryFantom_Bytes\n  address_gt: treasuryFantom_Bytes\n  address_gte: treasuryFantom_Bytes\n  address_in: [treasuryFantom_Bytes!]\n  address_lt: treasuryFantom_Bytes\n  address_lte: treasuryFantom_Bytes\n  address_not: treasuryFantom_Bytes\n  address_not_contains: treasuryFantom_Bytes\n  address_not_in: [treasuryFantom_Bytes!]\n  and: [treasuryFantom_ERC20TokenSnapshot_filter]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryFantom_ERC20TokenSnapshot_filter]\n  totalSupply: treasuryFantom_BigDecimal\n  totalSupply_gt: treasuryFantom_BigDecimal\n  totalSupply_gte: treasuryFantom_BigDecimal\n  totalSupply_in: [treasuryFantom_BigDecimal!]\n  totalSupply_lt: treasuryFantom_BigDecimal\n  totalSupply_lte: treasuryFantom_BigDecimal\n  totalSupply_not: treasuryFantom_BigDecimal\n  totalSupply_not_in: [treasuryFantom_BigDecimal!]\n}\n\nenum treasuryFantom_ERC20TokenSnapshot_orderBy {\n  address\n  decimals\n  id\n  totalSupply\n}\n\ntype treasuryFantom_GnosisAuction {\n  auctionCloseTimestamp: BigInt\n  auctionOpenTimestamp: BigInt!\n  bidQuantity: treasuryFantom_BigDecimal\n  id: ID!\n  payoutCapacity: treasuryFantom_BigDecimal!\n  termSeconds: BigInt!\n  _join: Query!\n}\n\ntype treasuryFantom_GnosisAuctionRoot {\n  id: ID!\n  markets: [BigInt!]!\n  _join: Query!\n}\n\ninput treasuryFantom_GnosisAuctionRoot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryFantom_BlockChangedFilter\n  and: [treasuryFantom_GnosisAuctionRoot_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  markets: [BigInt!]\n  markets_contains: [BigInt!]\n  markets_contains_nocase: [BigInt!]\n  markets_not: [BigInt!]\n  markets_not_contains: [BigInt!]\n  markets_not_contains_nocase: [BigInt!]\n  or: [treasuryFantom_GnosisAuctionRoot_filter]\n}\n\nenum treasuryFantom_GnosisAuctionRoot_orderBy {\n  id\n  markets\n}\n\ninput treasuryFantom_GnosisAuction_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryFantom_BlockChangedFilter\n  and: [treasuryFantom_GnosisAuction_filter]\n  auctionCloseTimestamp: BigInt\n  auctionCloseTimestamp_gt: BigInt\n  auctionCloseTimestamp_gte: BigInt\n  auctionCloseTimestamp_in: [BigInt!]\n  auctionCloseTimestamp_lt: BigInt\n  auctionCloseTimestamp_lte: BigInt\n  auctionCloseTimestamp_not: BigInt\n  auctionCloseTimestamp_not_in: [BigInt!]\n  auctionOpenTimestamp: BigInt\n  auctionOpenTimestamp_gt: BigInt\n  auctionOpenTimestamp_gte: BigInt\n  auctionOpenTimestamp_in: [BigInt!]\n  auctionOpenTimestamp_lt: BigInt\n  auctionOpenTimestamp_lte: BigInt\n  auctionOpenTimestamp_not: BigInt\n  auctionOpenTimestamp_not_in: [BigInt!]\n  bidQuantity: treasuryFantom_BigDecimal\n  bidQuantity_gt: treasuryFantom_BigDecimal\n  bidQuantity_gte: treasuryFantom_BigDecimal\n  bidQuantity_in: [treasuryFantom_BigDecimal!]\n  bidQuantity_lt: treasuryFantom_BigDecimal\n  bidQuantity_lte: treasuryFantom_BigDecimal\n  bidQuantity_not: treasuryFantom_BigDecimal\n  bidQuantity_not_in: [treasuryFantom_BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryFantom_GnosisAuction_filter]\n  payoutCapacity: treasuryFantom_BigDecimal\n  payoutCapacity_gt: treasuryFantom_BigDecimal\n  payoutCapacity_gte: treasuryFantom_BigDecimal\n  payoutCapacity_in: [treasuryFantom_BigDecimal!]\n  payoutCapacity_lt: treasuryFantom_BigDecimal\n  payoutCapacity_lte: treasuryFantom_BigDecimal\n  payoutCapacity_not: treasuryFantom_BigDecimal\n  payoutCapacity_not_in: [treasuryFantom_BigDecimal!]\n  termSeconds: BigInt\n  termSeconds_gt: BigInt\n  termSeconds_gte: BigInt\n  termSeconds_in: [BigInt!]\n  termSeconds_lt: BigInt\n  termSeconds_lte: BigInt\n  termSeconds_not: BigInt\n  termSeconds_not_in: [BigInt!]\n}\n\nenum treasuryFantom_GnosisAuction_orderBy {\n  auctionCloseTimestamp\n  auctionOpenTimestamp\n  bidQuantity\n  id\n  payoutCapacity\n  termSeconds\n}\n\n\"\"\"Defines the order direction, either ascending or descending\"\"\"\nenum treasuryFantom_OrderDirection {\n  asc\n  desc\n}\n\ntype treasuryFantom_PoolSnapshot {\n  balances: [treasuryFantom_BigDecimal!]!\n  block: BigInt!\n  decimals: Int!\n  id: ID!\n  pool: treasuryFantom_Bytes!\n  poolToken: treasuryFantom_Bytes\n  tokens: [treasuryFantom_Bytes!]!\n  totalSupply: treasuryFantom_BigDecimal!\n  weights: [treasuryFantom_BigDecimal!]\n  _join: Query!\n}\n\ninput treasuryFantom_PoolSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryFantom_BlockChangedFilter\n  and: [treasuryFantom_PoolSnapshot_filter]\n  balances: [treasuryFantom_BigDecimal!]\n  balances_contains: [treasuryFantom_BigDecimal!]\n  balances_contains_nocase: [treasuryFantom_BigDecimal!]\n  balances_not: [treasuryFantom_BigDecimal!]\n  balances_not_contains: [treasuryFantom_BigDecimal!]\n  balances_not_contains_nocase: [treasuryFantom_BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryFantom_PoolSnapshot_filter]\n  pool: treasuryFantom_Bytes\n  poolToken: treasuryFantom_Bytes\n  poolToken_contains: treasuryFantom_Bytes\n  poolToken_gt: treasuryFantom_Bytes\n  poolToken_gte: treasuryFantom_Bytes\n  poolToken_in: [treasuryFantom_Bytes!]\n  poolToken_lt: treasuryFantom_Bytes\n  poolToken_lte: treasuryFantom_Bytes\n  poolToken_not: treasuryFantom_Bytes\n  poolToken_not_contains: treasuryFantom_Bytes\n  poolToken_not_in: [treasuryFantom_Bytes!]\n  pool_contains: treasuryFantom_Bytes\n  pool_gt: treasuryFantom_Bytes\n  pool_gte: treasuryFantom_Bytes\n  pool_in: [treasuryFantom_Bytes!]\n  pool_lt: treasuryFantom_Bytes\n  pool_lte: treasuryFantom_Bytes\n  pool_not: treasuryFantom_Bytes\n  pool_not_contains: treasuryFantom_Bytes\n  pool_not_in: [treasuryFantom_Bytes!]\n  tokens: [treasuryFantom_Bytes!]\n  tokens_contains: [treasuryFantom_Bytes!]\n  tokens_contains_nocase: [treasuryFantom_Bytes!]\n  tokens_not: [treasuryFantom_Bytes!]\n  tokens_not_contains: [treasuryFantom_Bytes!]\n  tokens_not_contains_nocase: [treasuryFantom_Bytes!]\n  totalSupply: treasuryFantom_BigDecimal\n  totalSupply_gt: treasuryFantom_BigDecimal\n  totalSupply_gte: treasuryFantom_BigDecimal\n  totalSupply_in: [treasuryFantom_BigDecimal!]\n  totalSupply_lt: treasuryFantom_BigDecimal\n  totalSupply_lte: treasuryFantom_BigDecimal\n  totalSupply_not: treasuryFantom_BigDecimal\n  totalSupply_not_in: [treasuryFantom_BigDecimal!]\n  weights: [treasuryFantom_BigDecimal!]\n  weights_contains: [treasuryFantom_BigDecimal!]\n  weights_contains_nocase: [treasuryFantom_BigDecimal!]\n  weights_not: [treasuryFantom_BigDecimal!]\n  weights_not_contains: [treasuryFantom_BigDecimal!]\n  weights_not_contains_nocase: [treasuryFantom_BigDecimal!]\n}\n\nenum treasuryFantom_PoolSnapshot_orderBy {\n  balances\n  block\n  decimals\n  id\n  pool\n  poolToken\n  tokens\n  totalSupply\n  weights\n}\n\ntype treasuryFantom_PriceSnapshot {\n  block: BigInt!\n  date: String!\n  id: ID!\n  priceGOhm: treasuryFantom_BigDecimal!\n  priceOhm: treasuryFantom_BigDecimal!\n  timestamp: BigInt!\n  _join: Query!\n}\n\ninput treasuryFantom_PriceSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryFantom_BlockChangedFilter\n  and: [treasuryFantom_PriceSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryFantom_PriceSnapshot_filter]\n  priceGOhm: treasuryFantom_BigDecimal\n  priceGOhm_gt: treasuryFantom_BigDecimal\n  priceGOhm_gte: treasuryFantom_BigDecimal\n  priceGOhm_in: [treasuryFantom_BigDecimal!]\n  priceGOhm_lt: treasuryFantom_BigDecimal\n  priceGOhm_lte: treasuryFantom_BigDecimal\n  priceGOhm_not: treasuryFantom_BigDecimal\n  priceGOhm_not_in: [treasuryFantom_BigDecimal!]\n  priceOhm: treasuryFantom_BigDecimal\n  priceOhm_gt: treasuryFantom_BigDecimal\n  priceOhm_gte: treasuryFantom_BigDecimal\n  priceOhm_in: [treasuryFantom_BigDecimal!]\n  priceOhm_lt: treasuryFantom_BigDecimal\n  priceOhm_lte: treasuryFantom_BigDecimal\n  priceOhm_not: treasuryFantom_BigDecimal\n  priceOhm_not_in: [treasuryFantom_BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n}\n\nenum treasuryFantom_PriceSnapshot_orderBy {\n  block\n  date\n  id\n  priceGOhm\n  priceOhm\n  timestamp\n}\n\ntype treasuryFantom_ProtocolMetric {\n  block: BigInt!\n  currentAPY: treasuryFantom_BigDecimal!\n  currentIndex: treasuryFantom_BigDecimal!\n  date: String!\n  gOhmPrice: treasuryFantom_BigDecimal!\n  gOhmSyntheticSupply: treasuryFantom_BigDecimal\n  gOhmTotalSupply: treasuryFantom_BigDecimal!\n  id: ID!\n  marketCap: treasuryFantom_BigDecimal\n  nextDistributedOhm: treasuryFantom_BigDecimal!\n  nextEpochRebase: treasuryFantom_BigDecimal!\n  ohmCirculatingSupply: treasuryFantom_BigDecimal\n  ohmFloatingSupply: treasuryFantom_BigDecimal\n  ohmPrice: treasuryFantom_BigDecimal!\n  ohmTotalSupply: treasuryFantom_BigDecimal!\n  sOhmCirculatingSupply: treasuryFantom_BigDecimal!\n  timestamp: BigInt!\n  totalValueLocked: treasuryFantom_BigDecimal!\n  treasuryLiquidBacking: treasuryFantom_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic: treasuryFantom_BigDecimal\n  treasuryLiquidBackingPerOhmFloating: treasuryFantom_BigDecimal\n  treasuryMarketValue: treasuryFantom_BigDecimal\n  _join: Query!\n}\n\ninput treasuryFantom_ProtocolMetric_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryFantom_BlockChangedFilter\n  and: [treasuryFantom_ProtocolMetric_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  currentAPY: treasuryFantom_BigDecimal\n  currentAPY_gt: treasuryFantom_BigDecimal\n  currentAPY_gte: treasuryFantom_BigDecimal\n  currentAPY_in: [treasuryFantom_BigDecimal!]\n  currentAPY_lt: treasuryFantom_BigDecimal\n  currentAPY_lte: treasuryFantom_BigDecimal\n  currentAPY_not: treasuryFantom_BigDecimal\n  currentAPY_not_in: [treasuryFantom_BigDecimal!]\n  currentIndex: treasuryFantom_BigDecimal\n  currentIndex_gt: treasuryFantom_BigDecimal\n  currentIndex_gte: treasuryFantom_BigDecimal\n  currentIndex_in: [treasuryFantom_BigDecimal!]\n  currentIndex_lt: treasuryFantom_BigDecimal\n  currentIndex_lte: treasuryFantom_BigDecimal\n  currentIndex_not: treasuryFantom_BigDecimal\n  currentIndex_not_in: [treasuryFantom_BigDecimal!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  gOhmPrice: treasuryFantom_BigDecimal\n  gOhmPrice_gt: treasuryFantom_BigDecimal\n  gOhmPrice_gte: treasuryFantom_BigDecimal\n  gOhmPrice_in: [treasuryFantom_BigDecimal!]\n  gOhmPrice_lt: treasuryFantom_BigDecimal\n  gOhmPrice_lte: treasuryFantom_BigDecimal\n  gOhmPrice_not: treasuryFantom_BigDecimal\n  gOhmPrice_not_in: [treasuryFantom_BigDecimal!]\n  gOhmSyntheticSupply: treasuryFantom_BigDecimal\n  gOhmSyntheticSupply_gt: treasuryFantom_BigDecimal\n  gOhmSyntheticSupply_gte: treasuryFantom_BigDecimal\n  gOhmSyntheticSupply_in: [treasuryFantom_BigDecimal!]\n  gOhmSyntheticSupply_lt: treasuryFantom_BigDecimal\n  gOhmSyntheticSupply_lte: treasuryFantom_BigDecimal\n  gOhmSyntheticSupply_not: treasuryFantom_BigDecimal\n  gOhmSyntheticSupply_not_in: [treasuryFantom_BigDecimal!]\n  gOhmTotalSupply: treasuryFantom_BigDecimal\n  gOhmTotalSupply_gt: treasuryFantom_BigDecimal\n  gOhmTotalSupply_gte: treasuryFantom_BigDecimal\n  gOhmTotalSupply_in: [treasuryFantom_BigDecimal!]\n  gOhmTotalSupply_lt: treasuryFantom_BigDecimal\n  gOhmTotalSupply_lte: treasuryFantom_BigDecimal\n  gOhmTotalSupply_not: treasuryFantom_BigDecimal\n  gOhmTotalSupply_not_in: [treasuryFantom_BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  marketCap: treasuryFantom_BigDecimal\n  marketCap_gt: treasuryFantom_BigDecimal\n  marketCap_gte: treasuryFantom_BigDecimal\n  marketCap_in: [treasuryFantom_BigDecimal!]\n  marketCap_lt: treasuryFantom_BigDecimal\n  marketCap_lte: treasuryFantom_BigDecimal\n  marketCap_not: treasuryFantom_BigDecimal\n  marketCap_not_in: [treasuryFantom_BigDecimal!]\n  nextDistributedOhm: treasuryFantom_BigDecimal\n  nextDistributedOhm_gt: treasuryFantom_BigDecimal\n  nextDistributedOhm_gte: treasuryFantom_BigDecimal\n  nextDistributedOhm_in: [treasuryFantom_BigDecimal!]\n  nextDistributedOhm_lt: treasuryFantom_BigDecimal\n  nextDistributedOhm_lte: treasuryFantom_BigDecimal\n  nextDistributedOhm_not: treasuryFantom_BigDecimal\n  nextDistributedOhm_not_in: [treasuryFantom_BigDecimal!]\n  nextEpochRebase: treasuryFantom_BigDecimal\n  nextEpochRebase_gt: treasuryFantom_BigDecimal\n  nextEpochRebase_gte: treasuryFantom_BigDecimal\n  nextEpochRebase_in: [treasuryFantom_BigDecimal!]\n  nextEpochRebase_lt: treasuryFantom_BigDecimal\n  nextEpochRebase_lte: treasuryFantom_BigDecimal\n  nextEpochRebase_not: treasuryFantom_BigDecimal\n  nextEpochRebase_not_in: [treasuryFantom_BigDecimal!]\n  ohmCirculatingSupply: treasuryFantom_BigDecimal\n  ohmCirculatingSupply_gt: treasuryFantom_BigDecimal\n  ohmCirculatingSupply_gte: treasuryFantom_BigDecimal\n  ohmCirculatingSupply_in: [treasuryFantom_BigDecimal!]\n  ohmCirculatingSupply_lt: treasuryFantom_BigDecimal\n  ohmCirculatingSupply_lte: treasuryFantom_BigDecimal\n  ohmCirculatingSupply_not: treasuryFantom_BigDecimal\n  ohmCirculatingSupply_not_in: [treasuryFantom_BigDecimal!]\n  ohmFloatingSupply: treasuryFantom_BigDecimal\n  ohmFloatingSupply_gt: treasuryFantom_BigDecimal\n  ohmFloatingSupply_gte: treasuryFantom_BigDecimal\n  ohmFloatingSupply_in: [treasuryFantom_BigDecimal!]\n  ohmFloatingSupply_lt: treasuryFantom_BigDecimal\n  ohmFloatingSupply_lte: treasuryFantom_BigDecimal\n  ohmFloatingSupply_not: treasuryFantom_BigDecimal\n  ohmFloatingSupply_not_in: [treasuryFantom_BigDecimal!]\n  ohmPrice: treasuryFantom_BigDecimal\n  ohmPrice_gt: treasuryFantom_BigDecimal\n  ohmPrice_gte: treasuryFantom_BigDecimal\n  ohmPrice_in: [treasuryFantom_BigDecimal!]\n  ohmPrice_lt: treasuryFantom_BigDecimal\n  ohmPrice_lte: treasuryFantom_BigDecimal\n  ohmPrice_not: treasuryFantom_BigDecimal\n  ohmPrice_not_in: [treasuryFantom_BigDecimal!]\n  ohmTotalSupply: treasuryFantom_BigDecimal\n  ohmTotalSupply_gt: treasuryFantom_BigDecimal\n  ohmTotalSupply_gte: treasuryFantom_BigDecimal\n  ohmTotalSupply_in: [treasuryFantom_BigDecimal!]\n  ohmTotalSupply_lt: treasuryFantom_BigDecimal\n  ohmTotalSupply_lte: treasuryFantom_BigDecimal\n  ohmTotalSupply_not: treasuryFantom_BigDecimal\n  ohmTotalSupply_not_in: [treasuryFantom_BigDecimal!]\n  or: [treasuryFantom_ProtocolMetric_filter]\n  sOhmCirculatingSupply: treasuryFantom_BigDecimal\n  sOhmCirculatingSupply_gt: treasuryFantom_BigDecimal\n  sOhmCirculatingSupply_gte: treasuryFantom_BigDecimal\n  sOhmCirculatingSupply_in: [treasuryFantom_BigDecimal!]\n  sOhmCirculatingSupply_lt: treasuryFantom_BigDecimal\n  sOhmCirculatingSupply_lte: treasuryFantom_BigDecimal\n  sOhmCirculatingSupply_not: treasuryFantom_BigDecimal\n  sOhmCirculatingSupply_not_in: [treasuryFantom_BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  totalValueLocked: treasuryFantom_BigDecimal\n  totalValueLocked_gt: treasuryFantom_BigDecimal\n  totalValueLocked_gte: treasuryFantom_BigDecimal\n  totalValueLocked_in: [treasuryFantom_BigDecimal!]\n  totalValueLocked_lt: treasuryFantom_BigDecimal\n  totalValueLocked_lte: treasuryFantom_BigDecimal\n  totalValueLocked_not: treasuryFantom_BigDecimal\n  totalValueLocked_not_in: [treasuryFantom_BigDecimal!]\n  treasuryLiquidBacking: treasuryFantom_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic: treasuryFantom_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_gt: treasuryFantom_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_gte: treasuryFantom_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_in: [treasuryFantom_BigDecimal!]\n  treasuryLiquidBackingPerGOhmSynthetic_lt: treasuryFantom_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_lte: treasuryFantom_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_not: treasuryFantom_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_not_in: [treasuryFantom_BigDecimal!]\n  treasuryLiquidBackingPerOhmFloating: treasuryFantom_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_gt: treasuryFantom_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_gte: treasuryFantom_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_in: [treasuryFantom_BigDecimal!]\n  treasuryLiquidBackingPerOhmFloating_lt: treasuryFantom_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_lte: treasuryFantom_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_not: treasuryFantom_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_not_in: [treasuryFantom_BigDecimal!]\n  treasuryLiquidBacking_gt: treasuryFantom_BigDecimal\n  treasuryLiquidBacking_gte: treasuryFantom_BigDecimal\n  treasuryLiquidBacking_in: [treasuryFantom_BigDecimal!]\n  treasuryLiquidBacking_lt: treasuryFantom_BigDecimal\n  treasuryLiquidBacking_lte: treasuryFantom_BigDecimal\n  treasuryLiquidBacking_not: treasuryFantom_BigDecimal\n  treasuryLiquidBacking_not_in: [treasuryFantom_BigDecimal!]\n  treasuryMarketValue: treasuryFantom_BigDecimal\n  treasuryMarketValue_gt: treasuryFantom_BigDecimal\n  treasuryMarketValue_gte: treasuryFantom_BigDecimal\n  treasuryMarketValue_in: [treasuryFantom_BigDecimal!]\n  treasuryMarketValue_lt: treasuryFantom_BigDecimal\n  treasuryMarketValue_lte: treasuryFantom_BigDecimal\n  treasuryMarketValue_not: treasuryFantom_BigDecimal\n  treasuryMarketValue_not_in: [treasuryFantom_BigDecimal!]\n}\n\nenum treasuryFantom_ProtocolMetric_orderBy {\n  block\n  currentAPY\n  currentIndex\n  date\n  gOhmPrice\n  gOhmSyntheticSupply\n  gOhmTotalSupply\n  id\n  marketCap\n  nextDistributedOhm\n  nextEpochRebase\n  ohmCirculatingSupply\n  ohmFloatingSupply\n  ohmPrice\n  ohmTotalSupply\n  sOhmCirculatingSupply\n  timestamp\n  totalValueLocked\n  treasuryLiquidBacking\n  treasuryLiquidBackingPerGOhmSynthetic\n  treasuryLiquidBackingPerOhmFloating\n  treasuryMarketValue\n}\n\ntype treasuryFantom_Rebase {\n  amount: treasuryFantom_BigDecimal!\n  contract: String!\n  id: ID!\n  percentage: treasuryFantom_BigDecimal!\n  stakedOhms: treasuryFantom_BigDecimal!\n  timestamp: BigInt!\n  value: treasuryFantom_BigDecimal!\n  _join: Query!\n}\n\ninput treasuryFantom_Rebase_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryFantom_BlockChangedFilter\n  amount: treasuryFantom_BigDecimal\n  amount_gt: treasuryFantom_BigDecimal\n  amount_gte: treasuryFantom_BigDecimal\n  amount_in: [treasuryFantom_BigDecimal!]\n  amount_lt: treasuryFantom_BigDecimal\n  amount_lte: treasuryFantom_BigDecimal\n  amount_not: treasuryFantom_BigDecimal\n  amount_not_in: [treasuryFantom_BigDecimal!]\n  and: [treasuryFantom_Rebase_filter]\n  contract: String\n  contract_contains: String\n  contract_contains_nocase: String\n  contract_ends_with: String\n  contract_ends_with_nocase: String\n  contract_gt: String\n  contract_gte: String\n  contract_in: [String!]\n  contract_lt: String\n  contract_lte: String\n  contract_not: String\n  contract_not_contains: String\n  contract_not_contains_nocase: String\n  contract_not_ends_with: String\n  contract_not_ends_with_nocase: String\n  contract_not_in: [String!]\n  contract_not_starts_with: String\n  contract_not_starts_with_nocase: String\n  contract_starts_with: String\n  contract_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryFantom_Rebase_filter]\n  percentage: treasuryFantom_BigDecimal\n  percentage_gt: treasuryFantom_BigDecimal\n  percentage_gte: treasuryFantom_BigDecimal\n  percentage_in: [treasuryFantom_BigDecimal!]\n  percentage_lt: treasuryFantom_BigDecimal\n  percentage_lte: treasuryFantom_BigDecimal\n  percentage_not: treasuryFantom_BigDecimal\n  percentage_not_in: [treasuryFantom_BigDecimal!]\n  stakedOhms: treasuryFantom_BigDecimal\n  stakedOhms_gt: treasuryFantom_BigDecimal\n  stakedOhms_gte: treasuryFantom_BigDecimal\n  stakedOhms_in: [treasuryFantom_BigDecimal!]\n  stakedOhms_lt: treasuryFantom_BigDecimal\n  stakedOhms_lte: treasuryFantom_BigDecimal\n  stakedOhms_not: treasuryFantom_BigDecimal\n  stakedOhms_not_in: [treasuryFantom_BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  value: treasuryFantom_BigDecimal\n  value_gt: treasuryFantom_BigDecimal\n  value_gte: treasuryFantom_BigDecimal\n  value_in: [treasuryFantom_BigDecimal!]\n  value_lt: treasuryFantom_BigDecimal\n  value_lte: treasuryFantom_BigDecimal\n  value_not: treasuryFantom_BigDecimal\n  value_not_in: [treasuryFantom_BigDecimal!]\n}\n\nenum treasuryFantom_Rebase_orderBy {\n  amount\n  contract\n  id\n  percentage\n  stakedOhms\n  timestamp\n  value\n}\n\ntype treasuryFantom_StakingPoolSnapshot {\n  block: BigInt!\n  contractAddress: treasuryFantom_Bytes!\n  id: ID!\n  stakingToken: treasuryFantom_Bytes\n  _join: Query!\n}\n\ninput treasuryFantom_StakingPoolSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryFantom_BlockChangedFilter\n  and: [treasuryFantom_StakingPoolSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  contractAddress: treasuryFantom_Bytes\n  contractAddress_contains: treasuryFantom_Bytes\n  contractAddress_gt: treasuryFantom_Bytes\n  contractAddress_gte: treasuryFantom_Bytes\n  contractAddress_in: [treasuryFantom_Bytes!]\n  contractAddress_lt: treasuryFantom_Bytes\n  contractAddress_lte: treasuryFantom_Bytes\n  contractAddress_not: treasuryFantom_Bytes\n  contractAddress_not_contains: treasuryFantom_Bytes\n  contractAddress_not_in: [treasuryFantom_Bytes!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryFantom_StakingPoolSnapshot_filter]\n  stakingToken: treasuryFantom_Bytes\n  stakingToken_contains: treasuryFantom_Bytes\n  stakingToken_gt: treasuryFantom_Bytes\n  stakingToken_gte: treasuryFantom_Bytes\n  stakingToken_in: [treasuryFantom_Bytes!]\n  stakingToken_lt: treasuryFantom_Bytes\n  stakingToken_lte: treasuryFantom_Bytes\n  stakingToken_not: treasuryFantom_Bytes\n  stakingToken_not_contains: treasuryFantom_Bytes\n  stakingToken_not_in: [treasuryFantom_Bytes!]\n}\n\nenum treasuryFantom_StakingPoolSnapshot_orderBy {\n  block\n  contractAddress\n  id\n  stakingToken\n}\n\ntype treasuryFantom_Token {\n  id: ID!\n  _join: Query!\n}\n\ntype treasuryFantom_TokenPriceSnapshot {\n  block: BigInt!\n  id: ID!\n  price: treasuryFantom_BigDecimal!\n  token: treasuryFantom_Bytes!\n  _join: Query!\n}\n\ninput treasuryFantom_TokenPriceSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryFantom_BlockChangedFilter\n  and: [treasuryFantom_TokenPriceSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryFantom_TokenPriceSnapshot_filter]\n  price: treasuryFantom_BigDecimal\n  price_gt: treasuryFantom_BigDecimal\n  price_gte: treasuryFantom_BigDecimal\n  price_in: [treasuryFantom_BigDecimal!]\n  price_lt: treasuryFantom_BigDecimal\n  price_lte: treasuryFantom_BigDecimal\n  price_not: treasuryFantom_BigDecimal\n  price_not_in: [treasuryFantom_BigDecimal!]\n  token: treasuryFantom_Bytes\n  token_contains: treasuryFantom_Bytes\n  token_gt: treasuryFantom_Bytes\n  token_gte: treasuryFantom_Bytes\n  token_in: [treasuryFantom_Bytes!]\n  token_lt: treasuryFantom_Bytes\n  token_lte: treasuryFantom_Bytes\n  token_not: treasuryFantom_Bytes\n  token_not_contains: treasuryFantom_Bytes\n  token_not_in: [treasuryFantom_Bytes!]\n}\n\nenum treasuryFantom_TokenPriceSnapshot_orderBy {\n  block\n  id\n  price\n  token\n}\n\ntype treasuryFantom_TokenRecord {\n  balance: treasuryFantom_BigDecimal!\n  block: BigInt!\n  blockchain: String!\n  category: String!\n  date: String!\n  id: ID!\n  isBluechip: Boolean!\n  isLiquid: Boolean!\n  multiplier: treasuryFantom_BigDecimal!\n  rate: treasuryFantom_BigDecimal!\n  source: String!\n  sourceAddress: String!\n  timestamp: BigInt!\n  token: String!\n  tokenAddress: String!\n  value: treasuryFantom_BigDecimal!\n  valueExcludingOhm: treasuryFantom_BigDecimal!\n  _join: Query!\n}\n\ninput treasuryFantom_TokenRecord_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryFantom_BlockChangedFilter\n  and: [treasuryFantom_TokenRecord_filter]\n  balance: treasuryFantom_BigDecimal\n  balance_gt: treasuryFantom_BigDecimal\n  balance_gte: treasuryFantom_BigDecimal\n  balance_in: [treasuryFantom_BigDecimal!]\n  balance_lt: treasuryFantom_BigDecimal\n  balance_lte: treasuryFantom_BigDecimal\n  balance_not: treasuryFantom_BigDecimal\n  balance_not_in: [treasuryFantom_BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  blockchain: String\n  blockchain_contains: String\n  blockchain_contains_nocase: String\n  blockchain_ends_with: String\n  blockchain_ends_with_nocase: String\n  blockchain_gt: String\n  blockchain_gte: String\n  blockchain_in: [String!]\n  blockchain_lt: String\n  blockchain_lte: String\n  blockchain_not: String\n  blockchain_not_contains: String\n  blockchain_not_contains_nocase: String\n  blockchain_not_ends_with: String\n  blockchain_not_ends_with_nocase: String\n  blockchain_not_in: [String!]\n  blockchain_not_starts_with: String\n  blockchain_not_starts_with_nocase: String\n  blockchain_starts_with: String\n  blockchain_starts_with_nocase: String\n  category: String\n  category_contains: String\n  category_contains_nocase: String\n  category_ends_with: String\n  category_ends_with_nocase: String\n  category_gt: String\n  category_gte: String\n  category_in: [String!]\n  category_lt: String\n  category_lte: String\n  category_not: String\n  category_not_contains: String\n  category_not_contains_nocase: String\n  category_not_ends_with: String\n  category_not_ends_with_nocase: String\n  category_not_in: [String!]\n  category_not_starts_with: String\n  category_not_starts_with_nocase: String\n  category_starts_with: String\n  category_starts_with_nocase: String\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  isBluechip: Boolean\n  isBluechip_in: [Boolean!]\n  isBluechip_not: Boolean\n  isBluechip_not_in: [Boolean!]\n  isLiquid: Boolean\n  isLiquid_in: [Boolean!]\n  isLiquid_not: Boolean\n  isLiquid_not_in: [Boolean!]\n  multiplier: treasuryFantom_BigDecimal\n  multiplier_gt: treasuryFantom_BigDecimal\n  multiplier_gte: treasuryFantom_BigDecimal\n  multiplier_in: [treasuryFantom_BigDecimal!]\n  multiplier_lt: treasuryFantom_BigDecimal\n  multiplier_lte: treasuryFantom_BigDecimal\n  multiplier_not: treasuryFantom_BigDecimal\n  multiplier_not_in: [treasuryFantom_BigDecimal!]\n  or: [treasuryFantom_TokenRecord_filter]\n  rate: treasuryFantom_BigDecimal\n  rate_gt: treasuryFantom_BigDecimal\n  rate_gte: treasuryFantom_BigDecimal\n  rate_in: [treasuryFantom_BigDecimal!]\n  rate_lt: treasuryFantom_BigDecimal\n  rate_lte: treasuryFantom_BigDecimal\n  rate_not: treasuryFantom_BigDecimal\n  rate_not_in: [treasuryFantom_BigDecimal!]\n  source: String\n  sourceAddress: String\n  sourceAddress_contains: String\n  sourceAddress_contains_nocase: String\n  sourceAddress_ends_with: String\n  sourceAddress_ends_with_nocase: String\n  sourceAddress_gt: String\n  sourceAddress_gte: String\n  sourceAddress_in: [String!]\n  sourceAddress_lt: String\n  sourceAddress_lte: String\n  sourceAddress_not: String\n  sourceAddress_not_contains: String\n  sourceAddress_not_contains_nocase: String\n  sourceAddress_not_ends_with: String\n  sourceAddress_not_ends_with_nocase: String\n  sourceAddress_not_in: [String!]\n  sourceAddress_not_starts_with: String\n  sourceAddress_not_starts_with_nocase: String\n  sourceAddress_starts_with: String\n  sourceAddress_starts_with_nocase: String\n  source_contains: String\n  source_contains_nocase: String\n  source_ends_with: String\n  source_ends_with_nocase: String\n  source_gt: String\n  source_gte: String\n  source_in: [String!]\n  source_lt: String\n  source_lte: String\n  source_not: String\n  source_not_contains: String\n  source_not_contains_nocase: String\n  source_not_ends_with: String\n  source_not_ends_with_nocase: String\n  source_not_in: [String!]\n  source_not_starts_with: String\n  source_not_starts_with_nocase: String\n  source_starts_with: String\n  source_starts_with_nocase: String\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  tokenAddress: String\n  tokenAddress_contains: String\n  tokenAddress_contains_nocase: String\n  tokenAddress_ends_with: String\n  tokenAddress_ends_with_nocase: String\n  tokenAddress_gt: String\n  tokenAddress_gte: String\n  tokenAddress_in: [String!]\n  tokenAddress_lt: String\n  tokenAddress_lte: String\n  tokenAddress_not: String\n  tokenAddress_not_contains: String\n  tokenAddress_not_contains_nocase: String\n  tokenAddress_not_ends_with: String\n  tokenAddress_not_ends_with_nocase: String\n  tokenAddress_not_in: [String!]\n  tokenAddress_not_starts_with: String\n  tokenAddress_not_starts_with_nocase: String\n  tokenAddress_starts_with: String\n  tokenAddress_starts_with_nocase: String\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  value: treasuryFantom_BigDecimal\n  valueExcludingOhm: treasuryFantom_BigDecimal\n  valueExcludingOhm_gt: treasuryFantom_BigDecimal\n  valueExcludingOhm_gte: treasuryFantom_BigDecimal\n  valueExcludingOhm_in: [treasuryFantom_BigDecimal!]\n  valueExcludingOhm_lt: treasuryFantom_BigDecimal\n  valueExcludingOhm_lte: treasuryFantom_BigDecimal\n  valueExcludingOhm_not: treasuryFantom_BigDecimal\n  valueExcludingOhm_not_in: [treasuryFantom_BigDecimal!]\n  value_gt: treasuryFantom_BigDecimal\n  value_gte: treasuryFantom_BigDecimal\n  value_in: [treasuryFantom_BigDecimal!]\n  value_lt: treasuryFantom_BigDecimal\n  value_lte: treasuryFantom_BigDecimal\n  value_not: treasuryFantom_BigDecimal\n  value_not_in: [treasuryFantom_BigDecimal!]\n}\n\nenum treasuryFantom_TokenRecord_orderBy {\n  balance\n  block\n  blockchain\n  category\n  date\n  id\n  isBluechip\n  isLiquid\n  multiplier\n  rate\n  source\n  sourceAddress\n  timestamp\n  token\n  tokenAddress\n  value\n  valueExcludingOhm\n}\n\ntype treasuryFantom_TokenSupply {\n  balance: treasuryFantom_BigDecimal!\n  block: BigInt!\n  date: String!\n  id: ID!\n  pool: String\n  poolAddress: String\n  source: String\n  sourceAddress: String\n  supplyBalance: treasuryFantom_BigDecimal!\n  timestamp: BigInt!\n  token: String!\n  tokenAddress: String!\n  type: String!\n  _join: Query!\n}\n\ninput treasuryFantom_TokenSupply_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryFantom_BlockChangedFilter\n  and: [treasuryFantom_TokenSupply_filter]\n  balance: treasuryFantom_BigDecimal\n  balance_gt: treasuryFantom_BigDecimal\n  balance_gte: treasuryFantom_BigDecimal\n  balance_in: [treasuryFantom_BigDecimal!]\n  balance_lt: treasuryFantom_BigDecimal\n  balance_lte: treasuryFantom_BigDecimal\n  balance_not: treasuryFantom_BigDecimal\n  balance_not_in: [treasuryFantom_BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryFantom_TokenSupply_filter]\n  pool: String\n  poolAddress: String\n  poolAddress_contains: String\n  poolAddress_contains_nocase: String\n  poolAddress_ends_with: String\n  poolAddress_ends_with_nocase: String\n  poolAddress_gt: String\n  poolAddress_gte: String\n  poolAddress_in: [String!]\n  poolAddress_lt: String\n  poolAddress_lte: String\n  poolAddress_not: String\n  poolAddress_not_contains: String\n  poolAddress_not_contains_nocase: String\n  poolAddress_not_ends_with: String\n  poolAddress_not_ends_with_nocase: String\n  poolAddress_not_in: [String!]\n  poolAddress_not_starts_with: String\n  poolAddress_not_starts_with_nocase: String\n  poolAddress_starts_with: String\n  poolAddress_starts_with_nocase: String\n  pool_contains: String\n  pool_contains_nocase: String\n  pool_ends_with: String\n  pool_ends_with_nocase: String\n  pool_gt: String\n  pool_gte: String\n  pool_in: [String!]\n  pool_lt: String\n  pool_lte: String\n  pool_not: String\n  pool_not_contains: String\n  pool_not_contains_nocase: String\n  pool_not_ends_with: String\n  pool_not_ends_with_nocase: String\n  pool_not_in: [String!]\n  pool_not_starts_with: String\n  pool_not_starts_with_nocase: String\n  pool_starts_with: String\n  pool_starts_with_nocase: String\n  source: String\n  sourceAddress: String\n  sourceAddress_contains: String\n  sourceAddress_contains_nocase: String\n  sourceAddress_ends_with: String\n  sourceAddress_ends_with_nocase: String\n  sourceAddress_gt: String\n  sourceAddress_gte: String\n  sourceAddress_in: [String!]\n  sourceAddress_lt: String\n  sourceAddress_lte: String\n  sourceAddress_not: String\n  sourceAddress_not_contains: String\n  sourceAddress_not_contains_nocase: String\n  sourceAddress_not_ends_with: String\n  sourceAddress_not_ends_with_nocase: String\n  sourceAddress_not_in: [String!]\n  sourceAddress_not_starts_with: String\n  sourceAddress_not_starts_with_nocase: String\n  sourceAddress_starts_with: String\n  sourceAddress_starts_with_nocase: String\n  source_contains: String\n  source_contains_nocase: String\n  source_ends_with: String\n  source_ends_with_nocase: String\n  source_gt: String\n  source_gte: String\n  source_in: [String!]\n  source_lt: String\n  source_lte: String\n  source_not: String\n  source_not_contains: String\n  source_not_contains_nocase: String\n  source_not_ends_with: String\n  source_not_ends_with_nocase: String\n  source_not_in: [String!]\n  source_not_starts_with: String\n  source_not_starts_with_nocase: String\n  source_starts_with: String\n  source_starts_with_nocase: String\n  supplyBalance: treasuryFantom_BigDecimal\n  supplyBalance_gt: treasuryFantom_BigDecimal\n  supplyBalance_gte: treasuryFantom_BigDecimal\n  supplyBalance_in: [treasuryFantom_BigDecimal!]\n  supplyBalance_lt: treasuryFantom_BigDecimal\n  supplyBalance_lte: treasuryFantom_BigDecimal\n  supplyBalance_not: treasuryFantom_BigDecimal\n  supplyBalance_not_in: [treasuryFantom_BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  tokenAddress: String\n  tokenAddress_contains: String\n  tokenAddress_contains_nocase: String\n  tokenAddress_ends_with: String\n  tokenAddress_ends_with_nocase: String\n  tokenAddress_gt: String\n  tokenAddress_gte: String\n  tokenAddress_in: [String!]\n  tokenAddress_lt: String\n  tokenAddress_lte: String\n  tokenAddress_not: String\n  tokenAddress_not_contains: String\n  tokenAddress_not_contains_nocase: String\n  tokenAddress_not_ends_with: String\n  tokenAddress_not_ends_with_nocase: String\n  tokenAddress_not_in: [String!]\n  tokenAddress_not_starts_with: String\n  tokenAddress_not_starts_with_nocase: String\n  tokenAddress_starts_with: String\n  tokenAddress_starts_with_nocase: String\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  type: String\n  type_contains: String\n  type_contains_nocase: String\n  type_ends_with: String\n  type_ends_with_nocase: String\n  type_gt: String\n  type_gte: String\n  type_in: [String!]\n  type_lt: String\n  type_lte: String\n  type_not: String\n  type_not_contains: String\n  type_not_contains_nocase: String\n  type_not_ends_with: String\n  type_not_ends_with_nocase: String\n  type_not_in: [String!]\n  type_not_starts_with: String\n  type_not_starts_with_nocase: String\n  type_starts_with: String\n  type_starts_with_nocase: String\n}\n\nenum treasuryFantom_TokenSupply_orderBy {\n  balance\n  block\n  date\n  id\n  pool\n  poolAddress\n  source\n  sourceAddress\n  supplyBalance\n  timestamp\n  token\n  tokenAddress\n  type\n}\n\ninput treasuryFantom_Token_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryFantom_BlockChangedFilter\n  and: [treasuryFantom_Token_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryFantom_Token_filter]\n}\n\nenum treasuryFantom_Token_orderBy {\n  id\n}\n\ntype treasuryFantom__Block_ {\n  \"\"\"The hash of the block\"\"\"\n  hash: treasuryFantom_Bytes\n  \"\"\"The block number\"\"\"\n  number: Int!\n  \"\"\"Integer representation of the timestamp stored in blocks for the chain\"\"\"\n  timestamp: Int\n  _join: Query!\n}\n\n\"\"\"The type for the top-level _meta field\"\"\"\ntype treasuryFantom__Meta_ {\n  \"Information about a specific subgraph block. The hash of the block\\nwill be null if the _meta field has a block constraint that asks for\\na block number. It will be filled if the _meta field has no block constraint\\nand therefore asks for the latest  block\\n\"\n  block: treasuryFantom__Block_!\n  \"\"\"The deployment ID\"\"\"\n  deployment: String!\n  \"\"\"If `true`, the subgraph encountered indexing errors at some past block\"\"\"\n  hasIndexingErrors: Boolean!\n  _join: Query!\n}\n\nenum treasuryFantom__SubgraphErrorPolicy_ {\n  \"\"\"Data will be returned even if the subgraph has indexing errors\"\"\"\n  allow\n  \"\"\"\n  If the subgraph has indexing errors, data will be omitted. The default.\n  \"\"\"\n  deny\n}\n\ntype treasuryPolygon_BalancerPoolSnapshot {\n  balances: [treasuryPolygon_BigDecimal!]!\n  block: BigInt!\n  decimals: Int!\n  id: ID!\n  pool: treasuryPolygon_Bytes!\n  poolToken: treasuryPolygon_Bytes!\n  tokens: [treasuryPolygon_Bytes!]!\n  totalSupply: treasuryPolygon_BigDecimal!\n  weights: [treasuryPolygon_BigDecimal!]!\n  _join: Query!\n}\n\ninput treasuryPolygon_BalancerPoolSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryPolygon_BlockChangedFilter\n  and: [treasuryPolygon_BalancerPoolSnapshot_filter]\n  balances: [treasuryPolygon_BigDecimal!]\n  balances_contains: [treasuryPolygon_BigDecimal!]\n  balances_contains_nocase: [treasuryPolygon_BigDecimal!]\n  balances_not: [treasuryPolygon_BigDecimal!]\n  balances_not_contains: [treasuryPolygon_BigDecimal!]\n  balances_not_contains_nocase: [treasuryPolygon_BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryPolygon_BalancerPoolSnapshot_filter]\n  pool: treasuryPolygon_Bytes\n  poolToken: treasuryPolygon_Bytes\n  poolToken_contains: treasuryPolygon_Bytes\n  poolToken_gt: treasuryPolygon_Bytes\n  poolToken_gte: treasuryPolygon_Bytes\n  poolToken_in: [treasuryPolygon_Bytes!]\n  poolToken_lt: treasuryPolygon_Bytes\n  poolToken_lte: treasuryPolygon_Bytes\n  poolToken_not: treasuryPolygon_Bytes\n  poolToken_not_contains: treasuryPolygon_Bytes\n  poolToken_not_in: [treasuryPolygon_Bytes!]\n  pool_contains: treasuryPolygon_Bytes\n  pool_gt: treasuryPolygon_Bytes\n  pool_gte: treasuryPolygon_Bytes\n  pool_in: [treasuryPolygon_Bytes!]\n  pool_lt: treasuryPolygon_Bytes\n  pool_lte: treasuryPolygon_Bytes\n  pool_not: treasuryPolygon_Bytes\n  pool_not_contains: treasuryPolygon_Bytes\n  pool_not_in: [treasuryPolygon_Bytes!]\n  tokens: [treasuryPolygon_Bytes!]\n  tokens_contains: [treasuryPolygon_Bytes!]\n  tokens_contains_nocase: [treasuryPolygon_Bytes!]\n  tokens_not: [treasuryPolygon_Bytes!]\n  tokens_not_contains: [treasuryPolygon_Bytes!]\n  tokens_not_contains_nocase: [treasuryPolygon_Bytes!]\n  totalSupply: treasuryPolygon_BigDecimal\n  totalSupply_gt: treasuryPolygon_BigDecimal\n  totalSupply_gte: treasuryPolygon_BigDecimal\n  totalSupply_in: [treasuryPolygon_BigDecimal!]\n  totalSupply_lt: treasuryPolygon_BigDecimal\n  totalSupply_lte: treasuryPolygon_BigDecimal\n  totalSupply_not: treasuryPolygon_BigDecimal\n  totalSupply_not_in: [treasuryPolygon_BigDecimal!]\n  weights: [treasuryPolygon_BigDecimal!]\n  weights_contains: [treasuryPolygon_BigDecimal!]\n  weights_contains_nocase: [treasuryPolygon_BigDecimal!]\n  weights_not: [treasuryPolygon_BigDecimal!]\n  weights_not_contains: [treasuryPolygon_BigDecimal!]\n  weights_not_contains_nocase: [treasuryPolygon_BigDecimal!]\n}\n\nenum treasuryPolygon_BalancerPoolSnapshot_orderBy {\n  balances\n  block\n  decimals\n  id\n  pool\n  poolToken\n  tokens\n  totalSupply\n  weights\n}\n\nscalar treasuryPolygon_BigDecimal\n\ninput treasuryPolygon_BlockChangedFilter {\n  number_gte: Int!\n}\n\ninput treasuryPolygon_Block_height {\n  hash: treasuryPolygon_Bytes\n  number: Int\n  number_gte: Int\n}\n\ntype treasuryPolygon_BondDiscount {\n  dai_discount: treasuryPolygon_BigDecimal!\n  eth_discount: treasuryPolygon_BigDecimal!\n  frax_discount: treasuryPolygon_BigDecimal!\n  id: ID!\n  lusd_discount: treasuryPolygon_BigDecimal!\n  ohmdai_discount: treasuryPolygon_BigDecimal!\n  ohmfrax_discount: treasuryPolygon_BigDecimal!\n  ohmlusd_discount: treasuryPolygon_BigDecimal!\n  timestamp: BigInt!\n  _join: Query!\n}\n\ninput treasuryPolygon_BondDiscount_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryPolygon_BlockChangedFilter\n  and: [treasuryPolygon_BondDiscount_filter]\n  dai_discount: treasuryPolygon_BigDecimal\n  dai_discount_gt: treasuryPolygon_BigDecimal\n  dai_discount_gte: treasuryPolygon_BigDecimal\n  dai_discount_in: [treasuryPolygon_BigDecimal!]\n  dai_discount_lt: treasuryPolygon_BigDecimal\n  dai_discount_lte: treasuryPolygon_BigDecimal\n  dai_discount_not: treasuryPolygon_BigDecimal\n  dai_discount_not_in: [treasuryPolygon_BigDecimal!]\n  eth_discount: treasuryPolygon_BigDecimal\n  eth_discount_gt: treasuryPolygon_BigDecimal\n  eth_discount_gte: treasuryPolygon_BigDecimal\n  eth_discount_in: [treasuryPolygon_BigDecimal!]\n  eth_discount_lt: treasuryPolygon_BigDecimal\n  eth_discount_lte: treasuryPolygon_BigDecimal\n  eth_discount_not: treasuryPolygon_BigDecimal\n  eth_discount_not_in: [treasuryPolygon_BigDecimal!]\n  frax_discount: treasuryPolygon_BigDecimal\n  frax_discount_gt: treasuryPolygon_BigDecimal\n  frax_discount_gte: treasuryPolygon_BigDecimal\n  frax_discount_in: [treasuryPolygon_BigDecimal!]\n  frax_discount_lt: treasuryPolygon_BigDecimal\n  frax_discount_lte: treasuryPolygon_BigDecimal\n  frax_discount_not: treasuryPolygon_BigDecimal\n  frax_discount_not_in: [treasuryPolygon_BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  lusd_discount: treasuryPolygon_BigDecimal\n  lusd_discount_gt: treasuryPolygon_BigDecimal\n  lusd_discount_gte: treasuryPolygon_BigDecimal\n  lusd_discount_in: [treasuryPolygon_BigDecimal!]\n  lusd_discount_lt: treasuryPolygon_BigDecimal\n  lusd_discount_lte: treasuryPolygon_BigDecimal\n  lusd_discount_not: treasuryPolygon_BigDecimal\n  lusd_discount_not_in: [treasuryPolygon_BigDecimal!]\n  ohmdai_discount: treasuryPolygon_BigDecimal\n  ohmdai_discount_gt: treasuryPolygon_BigDecimal\n  ohmdai_discount_gte: treasuryPolygon_BigDecimal\n  ohmdai_discount_in: [treasuryPolygon_BigDecimal!]\n  ohmdai_discount_lt: treasuryPolygon_BigDecimal\n  ohmdai_discount_lte: treasuryPolygon_BigDecimal\n  ohmdai_discount_not: treasuryPolygon_BigDecimal\n  ohmdai_discount_not_in: [treasuryPolygon_BigDecimal!]\n  ohmfrax_discount: treasuryPolygon_BigDecimal\n  ohmfrax_discount_gt: treasuryPolygon_BigDecimal\n  ohmfrax_discount_gte: treasuryPolygon_BigDecimal\n  ohmfrax_discount_in: [treasuryPolygon_BigDecimal!]\n  ohmfrax_discount_lt: treasuryPolygon_BigDecimal\n  ohmfrax_discount_lte: treasuryPolygon_BigDecimal\n  ohmfrax_discount_not: treasuryPolygon_BigDecimal\n  ohmfrax_discount_not_in: [treasuryPolygon_BigDecimal!]\n  ohmlusd_discount: treasuryPolygon_BigDecimal\n  ohmlusd_discount_gt: treasuryPolygon_BigDecimal\n  ohmlusd_discount_gte: treasuryPolygon_BigDecimal\n  ohmlusd_discount_in: [treasuryPolygon_BigDecimal!]\n  ohmlusd_discount_lt: treasuryPolygon_BigDecimal\n  ohmlusd_discount_lte: treasuryPolygon_BigDecimal\n  ohmlusd_discount_not: treasuryPolygon_BigDecimal\n  ohmlusd_discount_not_in: [treasuryPolygon_BigDecimal!]\n  or: [treasuryPolygon_BondDiscount_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n}\n\nenum treasuryPolygon_BondDiscount_orderBy {\n  dai_discount\n  eth_discount\n  frax_discount\n  id\n  lusd_discount\n  ohmdai_discount\n  ohmfrax_discount\n  ohmlusd_discount\n  timestamp\n}\n\nscalar treasuryPolygon_Bytes\n\ntype treasuryPolygon_ConvexRewardPoolSnapshot {\n  address: treasuryPolygon_Bytes!\n  block: BigInt!\n  id: ID!\n  stakingToken: treasuryPolygon_Bytes!\n  _join: Query!\n}\n\ninput treasuryPolygon_ConvexRewardPoolSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryPolygon_BlockChangedFilter\n  address: treasuryPolygon_Bytes\n  address_contains: treasuryPolygon_Bytes\n  address_gt: treasuryPolygon_Bytes\n  address_gte: treasuryPolygon_Bytes\n  address_in: [treasuryPolygon_Bytes!]\n  address_lt: treasuryPolygon_Bytes\n  address_lte: treasuryPolygon_Bytes\n  address_not: treasuryPolygon_Bytes\n  address_not_contains: treasuryPolygon_Bytes\n  address_not_in: [treasuryPolygon_Bytes!]\n  and: [treasuryPolygon_ConvexRewardPoolSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryPolygon_ConvexRewardPoolSnapshot_filter]\n  stakingToken: treasuryPolygon_Bytes\n  stakingToken_contains: treasuryPolygon_Bytes\n  stakingToken_gt: treasuryPolygon_Bytes\n  stakingToken_gte: treasuryPolygon_Bytes\n  stakingToken_in: [treasuryPolygon_Bytes!]\n  stakingToken_lt: treasuryPolygon_Bytes\n  stakingToken_lte: treasuryPolygon_Bytes\n  stakingToken_not: treasuryPolygon_Bytes\n  stakingToken_not_contains: treasuryPolygon_Bytes\n  stakingToken_not_in: [treasuryPolygon_Bytes!]\n}\n\nenum treasuryPolygon_ConvexRewardPoolSnapshot_orderBy {\n  address\n  block\n  id\n  stakingToken\n}\n\ntype treasuryPolygon_DailyBond {\n  amount: treasuryPolygon_BigDecimal!\n  id: ID!\n  timestamp: BigInt!\n  token: treasuryPolygon_Token!\n  value: treasuryPolygon_BigDecimal!\n  _join: Query!\n}\n\ninput treasuryPolygon_DailyBond_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryPolygon_BlockChangedFilter\n  amount: treasuryPolygon_BigDecimal\n  amount_gt: treasuryPolygon_BigDecimal\n  amount_gte: treasuryPolygon_BigDecimal\n  amount_in: [treasuryPolygon_BigDecimal!]\n  amount_lt: treasuryPolygon_BigDecimal\n  amount_lte: treasuryPolygon_BigDecimal\n  amount_not: treasuryPolygon_BigDecimal\n  amount_not_in: [treasuryPolygon_BigDecimal!]\n  and: [treasuryPolygon_DailyBond_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryPolygon_DailyBond_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  token_: treasuryPolygon_Token_filter\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  value: treasuryPolygon_BigDecimal\n  value_gt: treasuryPolygon_BigDecimal\n  value_gte: treasuryPolygon_BigDecimal\n  value_in: [treasuryPolygon_BigDecimal!]\n  value_lt: treasuryPolygon_BigDecimal\n  value_lte: treasuryPolygon_BigDecimal\n  value_not: treasuryPolygon_BigDecimal\n  value_not_in: [treasuryPolygon_BigDecimal!]\n}\n\nenum treasuryPolygon_DailyBond_orderBy {\n  amount\n  id\n  timestamp\n  token\n  token__id\n  value\n}\n\ntype treasuryPolygon_DailyStakingReward {\n  amount: treasuryPolygon_BigDecimal!\n  id: ID!\n  timestamp: BigInt!\n  value: treasuryPolygon_BigDecimal!\n  _join: Query!\n}\n\ninput treasuryPolygon_DailyStakingReward_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryPolygon_BlockChangedFilter\n  amount: treasuryPolygon_BigDecimal\n  amount_gt: treasuryPolygon_BigDecimal\n  amount_gte: treasuryPolygon_BigDecimal\n  amount_in: [treasuryPolygon_BigDecimal!]\n  amount_lt: treasuryPolygon_BigDecimal\n  amount_lte: treasuryPolygon_BigDecimal\n  amount_not: treasuryPolygon_BigDecimal\n  amount_not_in: [treasuryPolygon_BigDecimal!]\n  and: [treasuryPolygon_DailyStakingReward_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryPolygon_DailyStakingReward_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  value: treasuryPolygon_BigDecimal\n  value_gt: treasuryPolygon_BigDecimal\n  value_gte: treasuryPolygon_BigDecimal\n  value_in: [treasuryPolygon_BigDecimal!]\n  value_lt: treasuryPolygon_BigDecimal\n  value_lte: treasuryPolygon_BigDecimal\n  value_not: treasuryPolygon_BigDecimal\n  value_not_in: [treasuryPolygon_BigDecimal!]\n}\n\nenum treasuryPolygon_DailyStakingReward_orderBy {\n  amount\n  id\n  timestamp\n  value\n}\n\ntype treasuryPolygon_ERC20TokenSnapshot {\n  address: treasuryPolygon_Bytes!\n  decimals: Int!\n  id: ID!\n  totalSupply: treasuryPolygon_BigDecimal\n  _join: Query!\n}\n\ninput treasuryPolygon_ERC20TokenSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryPolygon_BlockChangedFilter\n  address: treasuryPolygon_Bytes\n  address_contains: treasuryPolygon_Bytes\n  address_gt: treasuryPolygon_Bytes\n  address_gte: treasuryPolygon_Bytes\n  address_in: [treasuryPolygon_Bytes!]\n  address_lt: treasuryPolygon_Bytes\n  address_lte: treasuryPolygon_Bytes\n  address_not: treasuryPolygon_Bytes\n  address_not_contains: treasuryPolygon_Bytes\n  address_not_in: [treasuryPolygon_Bytes!]\n  and: [treasuryPolygon_ERC20TokenSnapshot_filter]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryPolygon_ERC20TokenSnapshot_filter]\n  totalSupply: treasuryPolygon_BigDecimal\n  totalSupply_gt: treasuryPolygon_BigDecimal\n  totalSupply_gte: treasuryPolygon_BigDecimal\n  totalSupply_in: [treasuryPolygon_BigDecimal!]\n  totalSupply_lt: treasuryPolygon_BigDecimal\n  totalSupply_lte: treasuryPolygon_BigDecimal\n  totalSupply_not: treasuryPolygon_BigDecimal\n  totalSupply_not_in: [treasuryPolygon_BigDecimal!]\n}\n\nenum treasuryPolygon_ERC20TokenSnapshot_orderBy {\n  address\n  decimals\n  id\n  totalSupply\n}\n\ntype treasuryPolygon_GnosisAuction {\n  auctionCloseTimestamp: BigInt\n  auctionOpenTimestamp: BigInt!\n  bidQuantity: treasuryPolygon_BigDecimal\n  id: ID!\n  payoutCapacity: treasuryPolygon_BigDecimal!\n  termSeconds: BigInt!\n  _join: Query!\n}\n\ntype treasuryPolygon_GnosisAuctionRoot {\n  id: ID!\n  markets: [BigInt!]!\n  _join: Query!\n}\n\ninput treasuryPolygon_GnosisAuctionRoot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryPolygon_BlockChangedFilter\n  and: [treasuryPolygon_GnosisAuctionRoot_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  markets: [BigInt!]\n  markets_contains: [BigInt!]\n  markets_contains_nocase: [BigInt!]\n  markets_not: [BigInt!]\n  markets_not_contains: [BigInt!]\n  markets_not_contains_nocase: [BigInt!]\n  or: [treasuryPolygon_GnosisAuctionRoot_filter]\n}\n\nenum treasuryPolygon_GnosisAuctionRoot_orderBy {\n  id\n  markets\n}\n\ninput treasuryPolygon_GnosisAuction_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryPolygon_BlockChangedFilter\n  and: [treasuryPolygon_GnosisAuction_filter]\n  auctionCloseTimestamp: BigInt\n  auctionCloseTimestamp_gt: BigInt\n  auctionCloseTimestamp_gte: BigInt\n  auctionCloseTimestamp_in: [BigInt!]\n  auctionCloseTimestamp_lt: BigInt\n  auctionCloseTimestamp_lte: BigInt\n  auctionCloseTimestamp_not: BigInt\n  auctionCloseTimestamp_not_in: [BigInt!]\n  auctionOpenTimestamp: BigInt\n  auctionOpenTimestamp_gt: BigInt\n  auctionOpenTimestamp_gte: BigInt\n  auctionOpenTimestamp_in: [BigInt!]\n  auctionOpenTimestamp_lt: BigInt\n  auctionOpenTimestamp_lte: BigInt\n  auctionOpenTimestamp_not: BigInt\n  auctionOpenTimestamp_not_in: [BigInt!]\n  bidQuantity: treasuryPolygon_BigDecimal\n  bidQuantity_gt: treasuryPolygon_BigDecimal\n  bidQuantity_gte: treasuryPolygon_BigDecimal\n  bidQuantity_in: [treasuryPolygon_BigDecimal!]\n  bidQuantity_lt: treasuryPolygon_BigDecimal\n  bidQuantity_lte: treasuryPolygon_BigDecimal\n  bidQuantity_not: treasuryPolygon_BigDecimal\n  bidQuantity_not_in: [treasuryPolygon_BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryPolygon_GnosisAuction_filter]\n  payoutCapacity: treasuryPolygon_BigDecimal\n  payoutCapacity_gt: treasuryPolygon_BigDecimal\n  payoutCapacity_gte: treasuryPolygon_BigDecimal\n  payoutCapacity_in: [treasuryPolygon_BigDecimal!]\n  payoutCapacity_lt: treasuryPolygon_BigDecimal\n  payoutCapacity_lte: treasuryPolygon_BigDecimal\n  payoutCapacity_not: treasuryPolygon_BigDecimal\n  payoutCapacity_not_in: [treasuryPolygon_BigDecimal!]\n  termSeconds: BigInt\n  termSeconds_gt: BigInt\n  termSeconds_gte: BigInt\n  termSeconds_in: [BigInt!]\n  termSeconds_lt: BigInt\n  termSeconds_lte: BigInt\n  termSeconds_not: BigInt\n  termSeconds_not_in: [BigInt!]\n}\n\nenum treasuryPolygon_GnosisAuction_orderBy {\n  auctionCloseTimestamp\n  auctionOpenTimestamp\n  bidQuantity\n  id\n  payoutCapacity\n  termSeconds\n}\n\n\"\"\"Defines the order direction, either ascending or descending\"\"\"\nenum treasuryPolygon_OrderDirection {\n  asc\n  desc\n}\n\ntype treasuryPolygon_PoolSnapshot {\n  balances: [treasuryPolygon_BigDecimal!]!\n  block: BigInt!\n  decimals: Int!\n  id: ID!\n  pool: treasuryPolygon_Bytes!\n  poolToken: treasuryPolygon_Bytes\n  tokens: [treasuryPolygon_Bytes!]!\n  totalSupply: treasuryPolygon_BigDecimal!\n  weights: [treasuryPolygon_BigDecimal!]\n  _join: Query!\n}\n\ninput treasuryPolygon_PoolSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryPolygon_BlockChangedFilter\n  and: [treasuryPolygon_PoolSnapshot_filter]\n  balances: [treasuryPolygon_BigDecimal!]\n  balances_contains: [treasuryPolygon_BigDecimal!]\n  balances_contains_nocase: [treasuryPolygon_BigDecimal!]\n  balances_not: [treasuryPolygon_BigDecimal!]\n  balances_not_contains: [treasuryPolygon_BigDecimal!]\n  balances_not_contains_nocase: [treasuryPolygon_BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryPolygon_PoolSnapshot_filter]\n  pool: treasuryPolygon_Bytes\n  poolToken: treasuryPolygon_Bytes\n  poolToken_contains: treasuryPolygon_Bytes\n  poolToken_gt: treasuryPolygon_Bytes\n  poolToken_gte: treasuryPolygon_Bytes\n  poolToken_in: [treasuryPolygon_Bytes!]\n  poolToken_lt: treasuryPolygon_Bytes\n  poolToken_lte: treasuryPolygon_Bytes\n  poolToken_not: treasuryPolygon_Bytes\n  poolToken_not_contains: treasuryPolygon_Bytes\n  poolToken_not_in: [treasuryPolygon_Bytes!]\n  pool_contains: treasuryPolygon_Bytes\n  pool_gt: treasuryPolygon_Bytes\n  pool_gte: treasuryPolygon_Bytes\n  pool_in: [treasuryPolygon_Bytes!]\n  pool_lt: treasuryPolygon_Bytes\n  pool_lte: treasuryPolygon_Bytes\n  pool_not: treasuryPolygon_Bytes\n  pool_not_contains: treasuryPolygon_Bytes\n  pool_not_in: [treasuryPolygon_Bytes!]\n  tokens: [treasuryPolygon_Bytes!]\n  tokens_contains: [treasuryPolygon_Bytes!]\n  tokens_contains_nocase: [treasuryPolygon_Bytes!]\n  tokens_not: [treasuryPolygon_Bytes!]\n  tokens_not_contains: [treasuryPolygon_Bytes!]\n  tokens_not_contains_nocase: [treasuryPolygon_Bytes!]\n  totalSupply: treasuryPolygon_BigDecimal\n  totalSupply_gt: treasuryPolygon_BigDecimal\n  totalSupply_gte: treasuryPolygon_BigDecimal\n  totalSupply_in: [treasuryPolygon_BigDecimal!]\n  totalSupply_lt: treasuryPolygon_BigDecimal\n  totalSupply_lte: treasuryPolygon_BigDecimal\n  totalSupply_not: treasuryPolygon_BigDecimal\n  totalSupply_not_in: [treasuryPolygon_BigDecimal!]\n  weights: [treasuryPolygon_BigDecimal!]\n  weights_contains: [treasuryPolygon_BigDecimal!]\n  weights_contains_nocase: [treasuryPolygon_BigDecimal!]\n  weights_not: [treasuryPolygon_BigDecimal!]\n  weights_not_contains: [treasuryPolygon_BigDecimal!]\n  weights_not_contains_nocase: [treasuryPolygon_BigDecimal!]\n}\n\nenum treasuryPolygon_PoolSnapshot_orderBy {\n  balances\n  block\n  decimals\n  id\n  pool\n  poolToken\n  tokens\n  totalSupply\n  weights\n}\n\ntype treasuryPolygon_PriceSnapshot {\n  block: BigInt!\n  date: String!\n  id: ID!\n  priceGOhm: treasuryPolygon_BigDecimal!\n  priceOhm: treasuryPolygon_BigDecimal!\n  timestamp: BigInt!\n  _join: Query!\n}\n\ninput treasuryPolygon_PriceSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryPolygon_BlockChangedFilter\n  and: [treasuryPolygon_PriceSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryPolygon_PriceSnapshot_filter]\n  priceGOhm: treasuryPolygon_BigDecimal\n  priceGOhm_gt: treasuryPolygon_BigDecimal\n  priceGOhm_gte: treasuryPolygon_BigDecimal\n  priceGOhm_in: [treasuryPolygon_BigDecimal!]\n  priceGOhm_lt: treasuryPolygon_BigDecimal\n  priceGOhm_lte: treasuryPolygon_BigDecimal\n  priceGOhm_not: treasuryPolygon_BigDecimal\n  priceGOhm_not_in: [treasuryPolygon_BigDecimal!]\n  priceOhm: treasuryPolygon_BigDecimal\n  priceOhm_gt: treasuryPolygon_BigDecimal\n  priceOhm_gte: treasuryPolygon_BigDecimal\n  priceOhm_in: [treasuryPolygon_BigDecimal!]\n  priceOhm_lt: treasuryPolygon_BigDecimal\n  priceOhm_lte: treasuryPolygon_BigDecimal\n  priceOhm_not: treasuryPolygon_BigDecimal\n  priceOhm_not_in: [treasuryPolygon_BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n}\n\nenum treasuryPolygon_PriceSnapshot_orderBy {\n  block\n  date\n  id\n  priceGOhm\n  priceOhm\n  timestamp\n}\n\ntype treasuryPolygon_ProtocolMetric {\n  block: BigInt!\n  currentAPY: treasuryPolygon_BigDecimal!\n  currentIndex: treasuryPolygon_BigDecimal!\n  date: String!\n  gOhmPrice: treasuryPolygon_BigDecimal!\n  gOhmSyntheticSupply: treasuryPolygon_BigDecimal\n  gOhmTotalSupply: treasuryPolygon_BigDecimal!\n  id: ID!\n  marketCap: treasuryPolygon_BigDecimal\n  nextDistributedOhm: treasuryPolygon_BigDecimal!\n  nextEpochRebase: treasuryPolygon_BigDecimal!\n  ohmCirculatingSupply: treasuryPolygon_BigDecimal\n  ohmFloatingSupply: treasuryPolygon_BigDecimal\n  ohmPrice: treasuryPolygon_BigDecimal!\n  ohmTotalSupply: treasuryPolygon_BigDecimal!\n  sOhmCirculatingSupply: treasuryPolygon_BigDecimal!\n  timestamp: BigInt!\n  totalValueLocked: treasuryPolygon_BigDecimal!\n  treasuryLiquidBacking: treasuryPolygon_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic: treasuryPolygon_BigDecimal\n  treasuryLiquidBackingPerOhmFloating: treasuryPolygon_BigDecimal\n  treasuryMarketValue: treasuryPolygon_BigDecimal\n  _join: Query!\n}\n\ninput treasuryPolygon_ProtocolMetric_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryPolygon_BlockChangedFilter\n  and: [treasuryPolygon_ProtocolMetric_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  currentAPY: treasuryPolygon_BigDecimal\n  currentAPY_gt: treasuryPolygon_BigDecimal\n  currentAPY_gte: treasuryPolygon_BigDecimal\n  currentAPY_in: [treasuryPolygon_BigDecimal!]\n  currentAPY_lt: treasuryPolygon_BigDecimal\n  currentAPY_lte: treasuryPolygon_BigDecimal\n  currentAPY_not: treasuryPolygon_BigDecimal\n  currentAPY_not_in: [treasuryPolygon_BigDecimal!]\n  currentIndex: treasuryPolygon_BigDecimal\n  currentIndex_gt: treasuryPolygon_BigDecimal\n  currentIndex_gte: treasuryPolygon_BigDecimal\n  currentIndex_in: [treasuryPolygon_BigDecimal!]\n  currentIndex_lt: treasuryPolygon_BigDecimal\n  currentIndex_lte: treasuryPolygon_BigDecimal\n  currentIndex_not: treasuryPolygon_BigDecimal\n  currentIndex_not_in: [treasuryPolygon_BigDecimal!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  gOhmPrice: treasuryPolygon_BigDecimal\n  gOhmPrice_gt: treasuryPolygon_BigDecimal\n  gOhmPrice_gte: treasuryPolygon_BigDecimal\n  gOhmPrice_in: [treasuryPolygon_BigDecimal!]\n  gOhmPrice_lt: treasuryPolygon_BigDecimal\n  gOhmPrice_lte: treasuryPolygon_BigDecimal\n  gOhmPrice_not: treasuryPolygon_BigDecimal\n  gOhmPrice_not_in: [treasuryPolygon_BigDecimal!]\n  gOhmSyntheticSupply: treasuryPolygon_BigDecimal\n  gOhmSyntheticSupply_gt: treasuryPolygon_BigDecimal\n  gOhmSyntheticSupply_gte: treasuryPolygon_BigDecimal\n  gOhmSyntheticSupply_in: [treasuryPolygon_BigDecimal!]\n  gOhmSyntheticSupply_lt: treasuryPolygon_BigDecimal\n  gOhmSyntheticSupply_lte: treasuryPolygon_BigDecimal\n  gOhmSyntheticSupply_not: treasuryPolygon_BigDecimal\n  gOhmSyntheticSupply_not_in: [treasuryPolygon_BigDecimal!]\n  gOhmTotalSupply: treasuryPolygon_BigDecimal\n  gOhmTotalSupply_gt: treasuryPolygon_BigDecimal\n  gOhmTotalSupply_gte: treasuryPolygon_BigDecimal\n  gOhmTotalSupply_in: [treasuryPolygon_BigDecimal!]\n  gOhmTotalSupply_lt: treasuryPolygon_BigDecimal\n  gOhmTotalSupply_lte: treasuryPolygon_BigDecimal\n  gOhmTotalSupply_not: treasuryPolygon_BigDecimal\n  gOhmTotalSupply_not_in: [treasuryPolygon_BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  marketCap: treasuryPolygon_BigDecimal\n  marketCap_gt: treasuryPolygon_BigDecimal\n  marketCap_gte: treasuryPolygon_BigDecimal\n  marketCap_in: [treasuryPolygon_BigDecimal!]\n  marketCap_lt: treasuryPolygon_BigDecimal\n  marketCap_lte: treasuryPolygon_BigDecimal\n  marketCap_not: treasuryPolygon_BigDecimal\n  marketCap_not_in: [treasuryPolygon_BigDecimal!]\n  nextDistributedOhm: treasuryPolygon_BigDecimal\n  nextDistributedOhm_gt: treasuryPolygon_BigDecimal\n  nextDistributedOhm_gte: treasuryPolygon_BigDecimal\n  nextDistributedOhm_in: [treasuryPolygon_BigDecimal!]\n  nextDistributedOhm_lt: treasuryPolygon_BigDecimal\n  nextDistributedOhm_lte: treasuryPolygon_BigDecimal\n  nextDistributedOhm_not: treasuryPolygon_BigDecimal\n  nextDistributedOhm_not_in: [treasuryPolygon_BigDecimal!]\n  nextEpochRebase: treasuryPolygon_BigDecimal\n  nextEpochRebase_gt: treasuryPolygon_BigDecimal\n  nextEpochRebase_gte: treasuryPolygon_BigDecimal\n  nextEpochRebase_in: [treasuryPolygon_BigDecimal!]\n  nextEpochRebase_lt: treasuryPolygon_BigDecimal\n  nextEpochRebase_lte: treasuryPolygon_BigDecimal\n  nextEpochRebase_not: treasuryPolygon_BigDecimal\n  nextEpochRebase_not_in: [treasuryPolygon_BigDecimal!]\n  ohmCirculatingSupply: treasuryPolygon_BigDecimal\n  ohmCirculatingSupply_gt: treasuryPolygon_BigDecimal\n  ohmCirculatingSupply_gte: treasuryPolygon_BigDecimal\n  ohmCirculatingSupply_in: [treasuryPolygon_BigDecimal!]\n  ohmCirculatingSupply_lt: treasuryPolygon_BigDecimal\n  ohmCirculatingSupply_lte: treasuryPolygon_BigDecimal\n  ohmCirculatingSupply_not: treasuryPolygon_BigDecimal\n  ohmCirculatingSupply_not_in: [treasuryPolygon_BigDecimal!]\n  ohmFloatingSupply: treasuryPolygon_BigDecimal\n  ohmFloatingSupply_gt: treasuryPolygon_BigDecimal\n  ohmFloatingSupply_gte: treasuryPolygon_BigDecimal\n  ohmFloatingSupply_in: [treasuryPolygon_BigDecimal!]\n  ohmFloatingSupply_lt: treasuryPolygon_BigDecimal\n  ohmFloatingSupply_lte: treasuryPolygon_BigDecimal\n  ohmFloatingSupply_not: treasuryPolygon_BigDecimal\n  ohmFloatingSupply_not_in: [treasuryPolygon_BigDecimal!]\n  ohmPrice: treasuryPolygon_BigDecimal\n  ohmPrice_gt: treasuryPolygon_BigDecimal\n  ohmPrice_gte: treasuryPolygon_BigDecimal\n  ohmPrice_in: [treasuryPolygon_BigDecimal!]\n  ohmPrice_lt: treasuryPolygon_BigDecimal\n  ohmPrice_lte: treasuryPolygon_BigDecimal\n  ohmPrice_not: treasuryPolygon_BigDecimal\n  ohmPrice_not_in: [treasuryPolygon_BigDecimal!]\n  ohmTotalSupply: treasuryPolygon_BigDecimal\n  ohmTotalSupply_gt: treasuryPolygon_BigDecimal\n  ohmTotalSupply_gte: treasuryPolygon_BigDecimal\n  ohmTotalSupply_in: [treasuryPolygon_BigDecimal!]\n  ohmTotalSupply_lt: treasuryPolygon_BigDecimal\n  ohmTotalSupply_lte: treasuryPolygon_BigDecimal\n  ohmTotalSupply_not: treasuryPolygon_BigDecimal\n  ohmTotalSupply_not_in: [treasuryPolygon_BigDecimal!]\n  or: [treasuryPolygon_ProtocolMetric_filter]\n  sOhmCirculatingSupply: treasuryPolygon_BigDecimal\n  sOhmCirculatingSupply_gt: treasuryPolygon_BigDecimal\n  sOhmCirculatingSupply_gte: treasuryPolygon_BigDecimal\n  sOhmCirculatingSupply_in: [treasuryPolygon_BigDecimal!]\n  sOhmCirculatingSupply_lt: treasuryPolygon_BigDecimal\n  sOhmCirculatingSupply_lte: treasuryPolygon_BigDecimal\n  sOhmCirculatingSupply_not: treasuryPolygon_BigDecimal\n  sOhmCirculatingSupply_not_in: [treasuryPolygon_BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  totalValueLocked: treasuryPolygon_BigDecimal\n  totalValueLocked_gt: treasuryPolygon_BigDecimal\n  totalValueLocked_gte: treasuryPolygon_BigDecimal\n  totalValueLocked_in: [treasuryPolygon_BigDecimal!]\n  totalValueLocked_lt: treasuryPolygon_BigDecimal\n  totalValueLocked_lte: treasuryPolygon_BigDecimal\n  totalValueLocked_not: treasuryPolygon_BigDecimal\n  totalValueLocked_not_in: [treasuryPolygon_BigDecimal!]\n  treasuryLiquidBacking: treasuryPolygon_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic: treasuryPolygon_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_gt: treasuryPolygon_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_gte: treasuryPolygon_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_in: [treasuryPolygon_BigDecimal!]\n  treasuryLiquidBackingPerGOhmSynthetic_lt: treasuryPolygon_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_lte: treasuryPolygon_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_not: treasuryPolygon_BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_not_in: [treasuryPolygon_BigDecimal!]\n  treasuryLiquidBackingPerOhmFloating: treasuryPolygon_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_gt: treasuryPolygon_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_gte: treasuryPolygon_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_in: [treasuryPolygon_BigDecimal!]\n  treasuryLiquidBackingPerOhmFloating_lt: treasuryPolygon_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_lte: treasuryPolygon_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_not: treasuryPolygon_BigDecimal\n  treasuryLiquidBackingPerOhmFloating_not_in: [treasuryPolygon_BigDecimal!]\n  treasuryLiquidBacking_gt: treasuryPolygon_BigDecimal\n  treasuryLiquidBacking_gte: treasuryPolygon_BigDecimal\n  treasuryLiquidBacking_in: [treasuryPolygon_BigDecimal!]\n  treasuryLiquidBacking_lt: treasuryPolygon_BigDecimal\n  treasuryLiquidBacking_lte: treasuryPolygon_BigDecimal\n  treasuryLiquidBacking_not: treasuryPolygon_BigDecimal\n  treasuryLiquidBacking_not_in: [treasuryPolygon_BigDecimal!]\n  treasuryMarketValue: treasuryPolygon_BigDecimal\n  treasuryMarketValue_gt: treasuryPolygon_BigDecimal\n  treasuryMarketValue_gte: treasuryPolygon_BigDecimal\n  treasuryMarketValue_in: [treasuryPolygon_BigDecimal!]\n  treasuryMarketValue_lt: treasuryPolygon_BigDecimal\n  treasuryMarketValue_lte: treasuryPolygon_BigDecimal\n  treasuryMarketValue_not: treasuryPolygon_BigDecimal\n  treasuryMarketValue_not_in: [treasuryPolygon_BigDecimal!]\n}\n\nenum treasuryPolygon_ProtocolMetric_orderBy {\n  block\n  currentAPY\n  currentIndex\n  date\n  gOhmPrice\n  gOhmSyntheticSupply\n  gOhmTotalSupply\n  id\n  marketCap\n  nextDistributedOhm\n  nextEpochRebase\n  ohmCirculatingSupply\n  ohmFloatingSupply\n  ohmPrice\n  ohmTotalSupply\n  sOhmCirculatingSupply\n  timestamp\n  totalValueLocked\n  treasuryLiquidBacking\n  treasuryLiquidBackingPerGOhmSynthetic\n  treasuryLiquidBackingPerOhmFloating\n  treasuryMarketValue\n}\n\ntype treasuryPolygon_Rebase {\n  amount: treasuryPolygon_BigDecimal!\n  contract: String!\n  id: ID!\n  percentage: treasuryPolygon_BigDecimal!\n  stakedOhms: treasuryPolygon_BigDecimal!\n  timestamp: BigInt!\n  value: treasuryPolygon_BigDecimal!\n  _join: Query!\n}\n\ninput treasuryPolygon_Rebase_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryPolygon_BlockChangedFilter\n  amount: treasuryPolygon_BigDecimal\n  amount_gt: treasuryPolygon_BigDecimal\n  amount_gte: treasuryPolygon_BigDecimal\n  amount_in: [treasuryPolygon_BigDecimal!]\n  amount_lt: treasuryPolygon_BigDecimal\n  amount_lte: treasuryPolygon_BigDecimal\n  amount_not: treasuryPolygon_BigDecimal\n  amount_not_in: [treasuryPolygon_BigDecimal!]\n  and: [treasuryPolygon_Rebase_filter]\n  contract: String\n  contract_contains: String\n  contract_contains_nocase: String\n  contract_ends_with: String\n  contract_ends_with_nocase: String\n  contract_gt: String\n  contract_gte: String\n  contract_in: [String!]\n  contract_lt: String\n  contract_lte: String\n  contract_not: String\n  contract_not_contains: String\n  contract_not_contains_nocase: String\n  contract_not_ends_with: String\n  contract_not_ends_with_nocase: String\n  contract_not_in: [String!]\n  contract_not_starts_with: String\n  contract_not_starts_with_nocase: String\n  contract_starts_with: String\n  contract_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryPolygon_Rebase_filter]\n  percentage: treasuryPolygon_BigDecimal\n  percentage_gt: treasuryPolygon_BigDecimal\n  percentage_gte: treasuryPolygon_BigDecimal\n  percentage_in: [treasuryPolygon_BigDecimal!]\n  percentage_lt: treasuryPolygon_BigDecimal\n  percentage_lte: treasuryPolygon_BigDecimal\n  percentage_not: treasuryPolygon_BigDecimal\n  percentage_not_in: [treasuryPolygon_BigDecimal!]\n  stakedOhms: treasuryPolygon_BigDecimal\n  stakedOhms_gt: treasuryPolygon_BigDecimal\n  stakedOhms_gte: treasuryPolygon_BigDecimal\n  stakedOhms_in: [treasuryPolygon_BigDecimal!]\n  stakedOhms_lt: treasuryPolygon_BigDecimal\n  stakedOhms_lte: treasuryPolygon_BigDecimal\n  stakedOhms_not: treasuryPolygon_BigDecimal\n  stakedOhms_not_in: [treasuryPolygon_BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  value: treasuryPolygon_BigDecimal\n  value_gt: treasuryPolygon_BigDecimal\n  value_gte: treasuryPolygon_BigDecimal\n  value_in: [treasuryPolygon_BigDecimal!]\n  value_lt: treasuryPolygon_BigDecimal\n  value_lte: treasuryPolygon_BigDecimal\n  value_not: treasuryPolygon_BigDecimal\n  value_not_in: [treasuryPolygon_BigDecimal!]\n}\n\nenum treasuryPolygon_Rebase_orderBy {\n  amount\n  contract\n  id\n  percentage\n  stakedOhms\n  timestamp\n  value\n}\n\ntype treasuryPolygon_StakingPoolSnapshot {\n  block: BigInt!\n  contractAddress: treasuryPolygon_Bytes!\n  id: ID!\n  stakingToken: treasuryPolygon_Bytes\n  _join: Query!\n}\n\ninput treasuryPolygon_StakingPoolSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryPolygon_BlockChangedFilter\n  and: [treasuryPolygon_StakingPoolSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  contractAddress: treasuryPolygon_Bytes\n  contractAddress_contains: treasuryPolygon_Bytes\n  contractAddress_gt: treasuryPolygon_Bytes\n  contractAddress_gte: treasuryPolygon_Bytes\n  contractAddress_in: [treasuryPolygon_Bytes!]\n  contractAddress_lt: treasuryPolygon_Bytes\n  contractAddress_lte: treasuryPolygon_Bytes\n  contractAddress_not: treasuryPolygon_Bytes\n  contractAddress_not_contains: treasuryPolygon_Bytes\n  contractAddress_not_in: [treasuryPolygon_Bytes!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryPolygon_StakingPoolSnapshot_filter]\n  stakingToken: treasuryPolygon_Bytes\n  stakingToken_contains: treasuryPolygon_Bytes\n  stakingToken_gt: treasuryPolygon_Bytes\n  stakingToken_gte: treasuryPolygon_Bytes\n  stakingToken_in: [treasuryPolygon_Bytes!]\n  stakingToken_lt: treasuryPolygon_Bytes\n  stakingToken_lte: treasuryPolygon_Bytes\n  stakingToken_not: treasuryPolygon_Bytes\n  stakingToken_not_contains: treasuryPolygon_Bytes\n  stakingToken_not_in: [treasuryPolygon_Bytes!]\n}\n\nenum treasuryPolygon_StakingPoolSnapshot_orderBy {\n  block\n  contractAddress\n  id\n  stakingToken\n}\n\ntype treasuryPolygon_Token {\n  id: ID!\n  _join: Query!\n}\n\ntype treasuryPolygon_TokenPriceSnapshot {\n  block: BigInt!\n  id: ID!\n  price: treasuryPolygon_BigDecimal!\n  token: treasuryPolygon_Bytes!\n  _join: Query!\n}\n\ninput treasuryPolygon_TokenPriceSnapshot_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryPolygon_BlockChangedFilter\n  and: [treasuryPolygon_TokenPriceSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryPolygon_TokenPriceSnapshot_filter]\n  price: treasuryPolygon_BigDecimal\n  price_gt: treasuryPolygon_BigDecimal\n  price_gte: treasuryPolygon_BigDecimal\n  price_in: [treasuryPolygon_BigDecimal!]\n  price_lt: treasuryPolygon_BigDecimal\n  price_lte: treasuryPolygon_BigDecimal\n  price_not: treasuryPolygon_BigDecimal\n  price_not_in: [treasuryPolygon_BigDecimal!]\n  token: treasuryPolygon_Bytes\n  token_contains: treasuryPolygon_Bytes\n  token_gt: treasuryPolygon_Bytes\n  token_gte: treasuryPolygon_Bytes\n  token_in: [treasuryPolygon_Bytes!]\n  token_lt: treasuryPolygon_Bytes\n  token_lte: treasuryPolygon_Bytes\n  token_not: treasuryPolygon_Bytes\n  token_not_contains: treasuryPolygon_Bytes\n  token_not_in: [treasuryPolygon_Bytes!]\n}\n\nenum treasuryPolygon_TokenPriceSnapshot_orderBy {\n  block\n  id\n  price\n  token\n}\n\ntype treasuryPolygon_TokenRecord {\n  balance: treasuryPolygon_BigDecimal!\n  block: BigInt!\n  blockchain: String!\n  category: String!\n  date: String!\n  id: ID!\n  isBluechip: Boolean!\n  isLiquid: Boolean!\n  multiplier: treasuryPolygon_BigDecimal!\n  rate: treasuryPolygon_BigDecimal!\n  source: String!\n  sourceAddress: String!\n  timestamp: BigInt!\n  token: String!\n  tokenAddress: String!\n  value: treasuryPolygon_BigDecimal!\n  valueExcludingOhm: treasuryPolygon_BigDecimal!\n  _join: Query!\n}\n\ninput treasuryPolygon_TokenRecord_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryPolygon_BlockChangedFilter\n  and: [treasuryPolygon_TokenRecord_filter]\n  balance: treasuryPolygon_BigDecimal\n  balance_gt: treasuryPolygon_BigDecimal\n  balance_gte: treasuryPolygon_BigDecimal\n  balance_in: [treasuryPolygon_BigDecimal!]\n  balance_lt: treasuryPolygon_BigDecimal\n  balance_lte: treasuryPolygon_BigDecimal\n  balance_not: treasuryPolygon_BigDecimal\n  balance_not_in: [treasuryPolygon_BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  blockchain: String\n  blockchain_contains: String\n  blockchain_contains_nocase: String\n  blockchain_ends_with: String\n  blockchain_ends_with_nocase: String\n  blockchain_gt: String\n  blockchain_gte: String\n  blockchain_in: [String!]\n  blockchain_lt: String\n  blockchain_lte: String\n  blockchain_not: String\n  blockchain_not_contains: String\n  blockchain_not_contains_nocase: String\n  blockchain_not_ends_with: String\n  blockchain_not_ends_with_nocase: String\n  blockchain_not_in: [String!]\n  blockchain_not_starts_with: String\n  blockchain_not_starts_with_nocase: String\n  blockchain_starts_with: String\n  blockchain_starts_with_nocase: String\n  category: String\n  category_contains: String\n  category_contains_nocase: String\n  category_ends_with: String\n  category_ends_with_nocase: String\n  category_gt: String\n  category_gte: String\n  category_in: [String!]\n  category_lt: String\n  category_lte: String\n  category_not: String\n  category_not_contains: String\n  category_not_contains_nocase: String\n  category_not_ends_with: String\n  category_not_ends_with_nocase: String\n  category_not_in: [String!]\n  category_not_starts_with: String\n  category_not_starts_with_nocase: String\n  category_starts_with: String\n  category_starts_with_nocase: String\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  isBluechip: Boolean\n  isBluechip_in: [Boolean!]\n  isBluechip_not: Boolean\n  isBluechip_not_in: [Boolean!]\n  isLiquid: Boolean\n  isLiquid_in: [Boolean!]\n  isLiquid_not: Boolean\n  isLiquid_not_in: [Boolean!]\n  multiplier: treasuryPolygon_BigDecimal\n  multiplier_gt: treasuryPolygon_BigDecimal\n  multiplier_gte: treasuryPolygon_BigDecimal\n  multiplier_in: [treasuryPolygon_BigDecimal!]\n  multiplier_lt: treasuryPolygon_BigDecimal\n  multiplier_lte: treasuryPolygon_BigDecimal\n  multiplier_not: treasuryPolygon_BigDecimal\n  multiplier_not_in: [treasuryPolygon_BigDecimal!]\n  or: [treasuryPolygon_TokenRecord_filter]\n  rate: treasuryPolygon_BigDecimal\n  rate_gt: treasuryPolygon_BigDecimal\n  rate_gte: treasuryPolygon_BigDecimal\n  rate_in: [treasuryPolygon_BigDecimal!]\n  rate_lt: treasuryPolygon_BigDecimal\n  rate_lte: treasuryPolygon_BigDecimal\n  rate_not: treasuryPolygon_BigDecimal\n  rate_not_in: [treasuryPolygon_BigDecimal!]\n  source: String\n  sourceAddress: String\n  sourceAddress_contains: String\n  sourceAddress_contains_nocase: String\n  sourceAddress_ends_with: String\n  sourceAddress_ends_with_nocase: String\n  sourceAddress_gt: String\n  sourceAddress_gte: String\n  sourceAddress_in: [String!]\n  sourceAddress_lt: String\n  sourceAddress_lte: String\n  sourceAddress_not: String\n  sourceAddress_not_contains: String\n  sourceAddress_not_contains_nocase: String\n  sourceAddress_not_ends_with: String\n  sourceAddress_not_ends_with_nocase: String\n  sourceAddress_not_in: [String!]\n  sourceAddress_not_starts_with: String\n  sourceAddress_not_starts_with_nocase: String\n  sourceAddress_starts_with: String\n  sourceAddress_starts_with_nocase: String\n  source_contains: String\n  source_contains_nocase: String\n  source_ends_with: String\n  source_ends_with_nocase: String\n  source_gt: String\n  source_gte: String\n  source_in: [String!]\n  source_lt: String\n  source_lte: String\n  source_not: String\n  source_not_contains: String\n  source_not_contains_nocase: String\n  source_not_ends_with: String\n  source_not_ends_with_nocase: String\n  source_not_in: [String!]\n  source_not_starts_with: String\n  source_not_starts_with_nocase: String\n  source_starts_with: String\n  source_starts_with_nocase: String\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  tokenAddress: String\n  tokenAddress_contains: String\n  tokenAddress_contains_nocase: String\n  tokenAddress_ends_with: String\n  tokenAddress_ends_with_nocase: String\n  tokenAddress_gt: String\n  tokenAddress_gte: String\n  tokenAddress_in: [String!]\n  tokenAddress_lt: String\n  tokenAddress_lte: String\n  tokenAddress_not: String\n  tokenAddress_not_contains: String\n  tokenAddress_not_contains_nocase: String\n  tokenAddress_not_ends_with: String\n  tokenAddress_not_ends_with_nocase: String\n  tokenAddress_not_in: [String!]\n  tokenAddress_not_starts_with: String\n  tokenAddress_not_starts_with_nocase: String\n  tokenAddress_starts_with: String\n  tokenAddress_starts_with_nocase: String\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  value: treasuryPolygon_BigDecimal\n  valueExcludingOhm: treasuryPolygon_BigDecimal\n  valueExcludingOhm_gt: treasuryPolygon_BigDecimal\n  valueExcludingOhm_gte: treasuryPolygon_BigDecimal\n  valueExcludingOhm_in: [treasuryPolygon_BigDecimal!]\n  valueExcludingOhm_lt: treasuryPolygon_BigDecimal\n  valueExcludingOhm_lte: treasuryPolygon_BigDecimal\n  valueExcludingOhm_not: treasuryPolygon_BigDecimal\n  valueExcludingOhm_not_in: [treasuryPolygon_BigDecimal!]\n  value_gt: treasuryPolygon_BigDecimal\n  value_gte: treasuryPolygon_BigDecimal\n  value_in: [treasuryPolygon_BigDecimal!]\n  value_lt: treasuryPolygon_BigDecimal\n  value_lte: treasuryPolygon_BigDecimal\n  value_not: treasuryPolygon_BigDecimal\n  value_not_in: [treasuryPolygon_BigDecimal!]\n}\n\nenum treasuryPolygon_TokenRecord_orderBy {\n  balance\n  block\n  blockchain\n  category\n  date\n  id\n  isBluechip\n  isLiquid\n  multiplier\n  rate\n  source\n  sourceAddress\n  timestamp\n  token\n  tokenAddress\n  value\n  valueExcludingOhm\n}\n\ntype treasuryPolygon_TokenSupply {\n  balance: treasuryPolygon_BigDecimal!\n  block: BigInt!\n  date: String!\n  id: ID!\n  pool: String\n  poolAddress: String\n  source: String\n  sourceAddress: String\n  supplyBalance: treasuryPolygon_BigDecimal!\n  timestamp: BigInt!\n  token: String!\n  tokenAddress: String!\n  type: String!\n  _join: Query!\n}\n\ninput treasuryPolygon_TokenSupply_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryPolygon_BlockChangedFilter\n  and: [treasuryPolygon_TokenSupply_filter]\n  balance: treasuryPolygon_BigDecimal\n  balance_gt: treasuryPolygon_BigDecimal\n  balance_gte: treasuryPolygon_BigDecimal\n  balance_in: [treasuryPolygon_BigDecimal!]\n  balance_lt: treasuryPolygon_BigDecimal\n  balance_lte: treasuryPolygon_BigDecimal\n  balance_not: treasuryPolygon_BigDecimal\n  balance_not_in: [treasuryPolygon_BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryPolygon_TokenSupply_filter]\n  pool: String\n  poolAddress: String\n  poolAddress_contains: String\n  poolAddress_contains_nocase: String\n  poolAddress_ends_with: String\n  poolAddress_ends_with_nocase: String\n  poolAddress_gt: String\n  poolAddress_gte: String\n  poolAddress_in: [String!]\n  poolAddress_lt: String\n  poolAddress_lte: String\n  poolAddress_not: String\n  poolAddress_not_contains: String\n  poolAddress_not_contains_nocase: String\n  poolAddress_not_ends_with: String\n  poolAddress_not_ends_with_nocase: String\n  poolAddress_not_in: [String!]\n  poolAddress_not_starts_with: String\n  poolAddress_not_starts_with_nocase: String\n  poolAddress_starts_with: String\n  poolAddress_starts_with_nocase: String\n  pool_contains: String\n  pool_contains_nocase: String\n  pool_ends_with: String\n  pool_ends_with_nocase: String\n  pool_gt: String\n  pool_gte: String\n  pool_in: [String!]\n  pool_lt: String\n  pool_lte: String\n  pool_not: String\n  pool_not_contains: String\n  pool_not_contains_nocase: String\n  pool_not_ends_with: String\n  pool_not_ends_with_nocase: String\n  pool_not_in: [String!]\n  pool_not_starts_with: String\n  pool_not_starts_with_nocase: String\n  pool_starts_with: String\n  pool_starts_with_nocase: String\n  source: String\n  sourceAddress: String\n  sourceAddress_contains: String\n  sourceAddress_contains_nocase: String\n  sourceAddress_ends_with: String\n  sourceAddress_ends_with_nocase: String\n  sourceAddress_gt: String\n  sourceAddress_gte: String\n  sourceAddress_in: [String!]\n  sourceAddress_lt: String\n  sourceAddress_lte: String\n  sourceAddress_not: String\n  sourceAddress_not_contains: String\n  sourceAddress_not_contains_nocase: String\n  sourceAddress_not_ends_with: String\n  sourceAddress_not_ends_with_nocase: String\n  sourceAddress_not_in: [String!]\n  sourceAddress_not_starts_with: String\n  sourceAddress_not_starts_with_nocase: String\n  sourceAddress_starts_with: String\n  sourceAddress_starts_with_nocase: String\n  source_contains: String\n  source_contains_nocase: String\n  source_ends_with: String\n  source_ends_with_nocase: String\n  source_gt: String\n  source_gte: String\n  source_in: [String!]\n  source_lt: String\n  source_lte: String\n  source_not: String\n  source_not_contains: String\n  source_not_contains_nocase: String\n  source_not_ends_with: String\n  source_not_ends_with_nocase: String\n  source_not_in: [String!]\n  source_not_starts_with: String\n  source_not_starts_with_nocase: String\n  source_starts_with: String\n  source_starts_with_nocase: String\n  supplyBalance: treasuryPolygon_BigDecimal\n  supplyBalance_gt: treasuryPolygon_BigDecimal\n  supplyBalance_gte: treasuryPolygon_BigDecimal\n  supplyBalance_in: [treasuryPolygon_BigDecimal!]\n  supplyBalance_lt: treasuryPolygon_BigDecimal\n  supplyBalance_lte: treasuryPolygon_BigDecimal\n  supplyBalance_not: treasuryPolygon_BigDecimal\n  supplyBalance_not_in: [treasuryPolygon_BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  tokenAddress: String\n  tokenAddress_contains: String\n  tokenAddress_contains_nocase: String\n  tokenAddress_ends_with: String\n  tokenAddress_ends_with_nocase: String\n  tokenAddress_gt: String\n  tokenAddress_gte: String\n  tokenAddress_in: [String!]\n  tokenAddress_lt: String\n  tokenAddress_lte: String\n  tokenAddress_not: String\n  tokenAddress_not_contains: String\n  tokenAddress_not_contains_nocase: String\n  tokenAddress_not_ends_with: String\n  tokenAddress_not_ends_with_nocase: String\n  tokenAddress_not_in: [String!]\n  tokenAddress_not_starts_with: String\n  tokenAddress_not_starts_with_nocase: String\n  tokenAddress_starts_with: String\n  tokenAddress_starts_with_nocase: String\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  type: String\n  type_contains: String\n  type_contains_nocase: String\n  type_ends_with: String\n  type_ends_with_nocase: String\n  type_gt: String\n  type_gte: String\n  type_in: [String!]\n  type_lt: String\n  type_lte: String\n  type_not: String\n  type_not_contains: String\n  type_not_contains_nocase: String\n  type_not_ends_with: String\n  type_not_ends_with_nocase: String\n  type_not_in: [String!]\n  type_not_starts_with: String\n  type_not_starts_with_nocase: String\n  type_starts_with: String\n  type_starts_with_nocase: String\n}\n\nenum treasuryPolygon_TokenSupply_orderBy {\n  balance\n  block\n  date\n  id\n  pool\n  poolAddress\n  source\n  sourceAddress\n  supplyBalance\n  timestamp\n  token\n  tokenAddress\n  type\n}\n\ninput treasuryPolygon_Token_filter {\n  \"\"\"Filter for the block changed event.\"\"\"\n  _change_block: treasuryPolygon_BlockChangedFilter\n  and: [treasuryPolygon_Token_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [treasuryPolygon_Token_filter]\n}\n\nenum treasuryPolygon_Token_orderBy {\n  id\n}\n\ntype treasuryPolygon__Block_ {\n  \"\"\"The hash of the block\"\"\"\n  hash: treasuryPolygon_Bytes\n  \"\"\"The block number\"\"\"\n  number: Int!\n  \"\"\"Integer representation of the timestamp stored in blocks for the chain\"\"\"\n  timestamp: Int\n  _join: Query!\n}\n\n\"\"\"The type for the top-level _meta field\"\"\"\ntype treasuryPolygon__Meta_ {\n  \"Information about a specific subgraph block. The hash of the block\\nwill be null if the _meta field has a block constraint that asks for\\na block number. It will be filled if the _meta field has no block constraint\\nand therefore asks for the latest  block\\n\"\n  block: treasuryPolygon__Block_!\n  \"\"\"The deployment ID\"\"\"\n  deployment: String!\n  \"\"\"If `true`, the subgraph encountered indexing errors at some past block\"\"\"\n  hasIndexingErrors: Boolean!\n  _join: Query!\n}\n\nenum treasuryPolygon__SubgraphErrorPolicy_ {\n  \"\"\"Data will be returned even if the subgraph has indexing errors\"\"\"\n  allow\n  \"\"\"\n  If the subgraph has indexing errors, data will be omitted. The default.\n  \"\"\"\n  deny\n}\n\nenum COMMON_REGEX_PATTERN {\n  EMAIL\n  DOMAIN\n}\n\nenum WG_ROLE {\n  admin\n  user\n}\n\n\"\"\"Well known claims - https://www.iana.org/assignments/jwt/jwt.xhtml\"\"\"\nenum WG_CLAIM {\n  \"\"\"iss\"\"\"\n  ISSUER\n  \"\"\"deprecated alias for ISSUER\"\"\"\n  PROVIDER\n  \"\"\"sub\"\"\"\n  SUBJECT\n  \"\"\"alias for sub\"\"\"\n  USERID\n  \"\"\"name\"\"\"\n  NAME\n  \"\"\"given_name\"\"\"\n  GIVEN_NAME\n  \"\"\"family_name\"\"\"\n  FAMILY_NAME\n  \"\"\"middle_name\"\"\"\n  MIDDLE_NAME\n  \"\"\"nickname\"\"\"\n  NICKNAME\n  \"\"\"preferred_username\"\"\"\n  PREFERRED_USERNAME\n  \"\"\"profile\"\"\"\n  PROFILE\n  \"\"\"picture\"\"\"\n  PICTURE\n  \"\"\"website\"\"\"\n  WEBSITE\n  \"\"\"email\"\"\"\n  EMAIL\n  \"\"\"email_verified\"\"\"\n  EMAIL_VERIFIED\n  \"\"\"gender\"\"\"\n  GENDER\n  \"\"\"birthdate\"\"\"\n  BIRTH_DATE\n  \"\"\"zoneinfo\"\"\"\n  ZONE_INFO\n  \"\"\"locale\"\"\"\n  LOCALE\n  \"\"\"location\"\"\"\n  LOCATION\n}\n\nenum WunderGraphDateTimeFormat {\n  \"\"\"2006-01-02T15:04:05-0700\"\"\"\n  ISO8601\n  \"\"\"Mon Jan _2 15:04:05 2006\"\"\"\n  ANSIC\n  \"\"\"Mon Jan _2 15:04:05 MST 2006\"\"\"\n  UnixDate\n  \"\"\"Mon Jan 02 15:04:05 -0700 2006\"\"\"\n  RubyDate\n  \"\"\"02 Jan 06 15:04 MST\"\"\"\n  RFC822\n  \"\"\"02 Jan 06 15:04 -0700\"\"\"\n  RFC822Z\n  \"\"\"Monday, 02-Jan-06 15:04:05 MST\"\"\"\n  RFC850\n  \"\"\"Mon, 02 Jan 2006 15:04:05 MST\"\"\"\n  RFC1123\n  \"\"\"Mon, 02 Jan 2006 15:04:05 -0700\"\"\"\n  RFC1123Z\n  \"\"\"2006-01-02T15:04:05Z07:00\"\"\"\n  RFC3339\n  \"\"\"2006-01-02T15:04:05.999999999Z07:00\"\"\"\n  RFC3339Nano\n  \"\"\"3:04PM\"\"\"\n  Kitchen\n  \"\"\"Jan _2 15:04:05\"\"\"\n  Stamp\n  \"\"\"Jan _2 15:04:05.000\"\"\"\n  StampMilli\n  \"\"\"Jan _2 15:04:05.000000\"\"\"\n  StampMicro\n  \"\"\"Jan _2 15:04:05.000000000\"\"\"\n  StampNano\n}",
      "datasourceConfigurations": [
        {
          "id": "",
          "kind": 2,
          "customGraphql": {
            "fetch": {
              "url": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": "https://api.thegraph.com/subgraphs/name/olympusdao/protocol-metrics-arbitrum"
              },
              "baseUrl": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": ""
              },
              "path": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": ""
              },
              "method": 1,
              "body": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": ""
              },
              "header": {},
              "query": [],
              "urlEncodeBody": false
            },
            "federation": {
              "enabled": false,
              "serviceSdl": ""
            },
            "subscription": {
              "enabled": true,
              "url": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": "https://api.thegraph.com/subgraphs/name/olympusdao/protocol-metrics-arbitrum"
              },
              "useSSE": false
            },
            "upstreamSchema": "\"\"\"\ncreates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.\n\"\"\"\ndirective @derivedFrom(field: String!) on FIELD_DEFINITION\n\n\"\"\"\nMarks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.\n\"\"\"\ndirective @entity on OBJECT\n\n\"\"\"Defined a Subgraph ID for an object type\"\"\"\ndirective @subgraphId(id: String!) on OBJECT\n\ntype BalancerPoolSnapshot {\n  balances: [BigDecimal!]!\n  block: BigInt!\n  decimals: Int!\n  id: ID!\n  pool: Bytes!\n  poolToken: Bytes!\n  tokens: [Bytes!]!\n  totalSupply: BigDecimal!\n  weights: [BigDecimal!]!\n}\n\ninput BalancerPoolSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [BalancerPoolSnapshot_filter]\n  balances: [BigDecimal!]\n  balances_contains: [BigDecimal!]\n  balances_contains_nocase: [BigDecimal!]\n  balances_not: [BigDecimal!]\n  balances_not_contains: [BigDecimal!]\n  balances_not_contains_nocase: [BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [BalancerPoolSnapshot_filter]\n  pool: Bytes\n  poolToken: Bytes\n  poolToken_contains: Bytes\n  poolToken_gt: Bytes\n  poolToken_gte: Bytes\n  poolToken_in: [Bytes!]\n  poolToken_lt: Bytes\n  poolToken_lte: Bytes\n  poolToken_not: Bytes\n  poolToken_not_contains: Bytes\n  poolToken_not_in: [Bytes!]\n  pool_contains: Bytes\n  pool_gt: Bytes\n  pool_gte: Bytes\n  pool_in: [Bytes!]\n  pool_lt: Bytes\n  pool_lte: Bytes\n  pool_not: Bytes\n  pool_not_contains: Bytes\n  pool_not_in: [Bytes!]\n  tokens: [Bytes!]\n  tokens_contains: [Bytes!]\n  tokens_contains_nocase: [Bytes!]\n  tokens_not: [Bytes!]\n  tokens_not_contains: [Bytes!]\n  tokens_not_contains_nocase: [Bytes!]\n  totalSupply: BigDecimal\n  totalSupply_gt: BigDecimal\n  totalSupply_gte: BigDecimal\n  totalSupply_in: [BigDecimal!]\n  totalSupply_lt: BigDecimal\n  totalSupply_lte: BigDecimal\n  totalSupply_not: BigDecimal\n  totalSupply_not_in: [BigDecimal!]\n  weights: [BigDecimal!]\n  weights_contains: [BigDecimal!]\n  weights_contains_nocase: [BigDecimal!]\n  weights_not: [BigDecimal!]\n  weights_not_contains: [BigDecimal!]\n  weights_not_contains_nocase: [BigDecimal!]\n}\n\nenum BalancerPoolSnapshot_orderBy {\n  balances\n  block\n  decimals\n  id\n  pool\n  poolToken\n  tokens\n  totalSupply\n  weights\n}\n\nscalar BigDecimal\n\nscalar BigInt\n\ninput BlockChangedFilter {\n  number_gte: Int!\n}\n\ninput Block_height {\n  hash: Bytes\n  number: Int\n  number_gte: Int\n}\n\ntype BondDiscount {\n  dai_discount: BigDecimal!\n  eth_discount: BigDecimal!\n  frax_discount: BigDecimal!\n  id: ID!\n  lusd_discount: BigDecimal!\n  ohmdai_discount: BigDecimal!\n  ohmfrax_discount: BigDecimal!\n  ohmlusd_discount: BigDecimal!\n  timestamp: BigInt!\n}\n\ninput BondDiscount_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [BondDiscount_filter]\n  dai_discount: BigDecimal\n  dai_discount_gt: BigDecimal\n  dai_discount_gte: BigDecimal\n  dai_discount_in: [BigDecimal!]\n  dai_discount_lt: BigDecimal\n  dai_discount_lte: BigDecimal\n  dai_discount_not: BigDecimal\n  dai_discount_not_in: [BigDecimal!]\n  eth_discount: BigDecimal\n  eth_discount_gt: BigDecimal\n  eth_discount_gte: BigDecimal\n  eth_discount_in: [BigDecimal!]\n  eth_discount_lt: BigDecimal\n  eth_discount_lte: BigDecimal\n  eth_discount_not: BigDecimal\n  eth_discount_not_in: [BigDecimal!]\n  frax_discount: BigDecimal\n  frax_discount_gt: BigDecimal\n  frax_discount_gte: BigDecimal\n  frax_discount_in: [BigDecimal!]\n  frax_discount_lt: BigDecimal\n  frax_discount_lte: BigDecimal\n  frax_discount_not: BigDecimal\n  frax_discount_not_in: [BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  lusd_discount: BigDecimal\n  lusd_discount_gt: BigDecimal\n  lusd_discount_gte: BigDecimal\n  lusd_discount_in: [BigDecimal!]\n  lusd_discount_lt: BigDecimal\n  lusd_discount_lte: BigDecimal\n  lusd_discount_not: BigDecimal\n  lusd_discount_not_in: [BigDecimal!]\n  ohmdai_discount: BigDecimal\n  ohmdai_discount_gt: BigDecimal\n  ohmdai_discount_gte: BigDecimal\n  ohmdai_discount_in: [BigDecimal!]\n  ohmdai_discount_lt: BigDecimal\n  ohmdai_discount_lte: BigDecimal\n  ohmdai_discount_not: BigDecimal\n  ohmdai_discount_not_in: [BigDecimal!]\n  ohmfrax_discount: BigDecimal\n  ohmfrax_discount_gt: BigDecimal\n  ohmfrax_discount_gte: BigDecimal\n  ohmfrax_discount_in: [BigDecimal!]\n  ohmfrax_discount_lt: BigDecimal\n  ohmfrax_discount_lte: BigDecimal\n  ohmfrax_discount_not: BigDecimal\n  ohmfrax_discount_not_in: [BigDecimal!]\n  ohmlusd_discount: BigDecimal\n  ohmlusd_discount_gt: BigDecimal\n  ohmlusd_discount_gte: BigDecimal\n  ohmlusd_discount_in: [BigDecimal!]\n  ohmlusd_discount_lt: BigDecimal\n  ohmlusd_discount_lte: BigDecimal\n  ohmlusd_discount_not: BigDecimal\n  ohmlusd_discount_not_in: [BigDecimal!]\n  or: [BondDiscount_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n}\n\nenum BondDiscount_orderBy {\n  dai_discount\n  eth_discount\n  frax_discount\n  id\n  lusd_discount\n  ohmdai_discount\n  ohmfrax_discount\n  ohmlusd_discount\n  timestamp\n}\n\nscalar Bytes\n\ntype ConvexRewardPoolSnapshot {\n  address: Bytes!\n  block: BigInt!\n  id: ID!\n  stakingToken: Bytes!\n}\n\ninput ConvexRewardPoolSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  address: Bytes\n  address_contains: Bytes\n  address_gt: Bytes\n  address_gte: Bytes\n  address_in: [Bytes!]\n  address_lt: Bytes\n  address_lte: Bytes\n  address_not: Bytes\n  address_not_contains: Bytes\n  address_not_in: [Bytes!]\n  and: [ConvexRewardPoolSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [ConvexRewardPoolSnapshot_filter]\n  stakingToken: Bytes\n  stakingToken_contains: Bytes\n  stakingToken_gt: Bytes\n  stakingToken_gte: Bytes\n  stakingToken_in: [Bytes!]\n  stakingToken_lt: Bytes\n  stakingToken_lte: Bytes\n  stakingToken_not: Bytes\n  stakingToken_not_contains: Bytes\n  stakingToken_not_in: [Bytes!]\n}\n\nenum ConvexRewardPoolSnapshot_orderBy {\n  address\n  block\n  id\n  stakingToken\n}\n\ntype DailyBond {\n  amount: BigDecimal!\n  id: ID!\n  timestamp: BigInt!\n  token: Token!\n  value: BigDecimal!\n}\n\ninput DailyBond_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  amount: BigDecimal\n  amount_gt: BigDecimal\n  amount_gte: BigDecimal\n  amount_in: [BigDecimal!]\n  amount_lt: BigDecimal\n  amount_lte: BigDecimal\n  amount_not: BigDecimal\n  amount_not_in: [BigDecimal!]\n  and: [DailyBond_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [DailyBond_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  token_: Token_filter\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  value: BigDecimal\n  value_gt: BigDecimal\n  value_gte: BigDecimal\n  value_in: [BigDecimal!]\n  value_lt: BigDecimal\n  value_lte: BigDecimal\n  value_not: BigDecimal\n  value_not_in: [BigDecimal!]\n}\n\nenum DailyBond_orderBy {\n  amount\n  id\n  timestamp\n  token\n  token__id\n  value\n}\n\ntype DailyStakingReward {\n  amount: BigDecimal!\n  id: ID!\n  timestamp: BigInt!\n  value: BigDecimal!\n}\n\ninput DailyStakingReward_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  amount: BigDecimal\n  amount_gt: BigDecimal\n  amount_gte: BigDecimal\n  amount_in: [BigDecimal!]\n  amount_lt: BigDecimal\n  amount_lte: BigDecimal\n  amount_not: BigDecimal\n  amount_not_in: [BigDecimal!]\n  and: [DailyStakingReward_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [DailyStakingReward_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  value: BigDecimal\n  value_gt: BigDecimal\n  value_gte: BigDecimal\n  value_in: [BigDecimal!]\n  value_lt: BigDecimal\n  value_lte: BigDecimal\n  value_not: BigDecimal\n  value_not_in: [BigDecimal!]\n}\n\nenum DailyStakingReward_orderBy {\n  amount\n  id\n  timestamp\n  value\n}\n\ntype ERC20TokenSnapshot {\n  address: Bytes!\n  decimals: Int!\n  id: ID!\n  totalSupply: BigDecimal\n}\n\ninput ERC20TokenSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  address: Bytes\n  address_contains: Bytes\n  address_gt: Bytes\n  address_gte: Bytes\n  address_in: [Bytes!]\n  address_lt: Bytes\n  address_lte: Bytes\n  address_not: Bytes\n  address_not_contains: Bytes\n  address_not_in: [Bytes!]\n  and: [ERC20TokenSnapshot_filter]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [ERC20TokenSnapshot_filter]\n  totalSupply: BigDecimal\n  totalSupply_gt: BigDecimal\n  totalSupply_gte: BigDecimal\n  totalSupply_in: [BigDecimal!]\n  totalSupply_lt: BigDecimal\n  totalSupply_lte: BigDecimal\n  totalSupply_not: BigDecimal\n  totalSupply_not_in: [BigDecimal!]\n}\n\nenum ERC20TokenSnapshot_orderBy {\n  address\n  decimals\n  id\n  totalSupply\n}\n\ntype GnosisAuction {\n  auctionCloseTimestamp: BigInt\n  auctionOpenTimestamp: BigInt!\n  bidQuantity: BigDecimal\n  id: ID!\n  payoutCapacity: BigDecimal!\n  termSeconds: BigInt!\n}\n\ntype GnosisAuctionRoot {\n  id: ID!\n  markets: [BigInt!]!\n}\n\ninput GnosisAuctionRoot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [GnosisAuctionRoot_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  markets: [BigInt!]\n  markets_contains: [BigInt!]\n  markets_contains_nocase: [BigInt!]\n  markets_not: [BigInt!]\n  markets_not_contains: [BigInt!]\n  markets_not_contains_nocase: [BigInt!]\n  or: [GnosisAuctionRoot_filter]\n}\n\nenum GnosisAuctionRoot_orderBy {\n  id\n  markets\n}\n\ninput GnosisAuction_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [GnosisAuction_filter]\n  auctionCloseTimestamp: BigInt\n  auctionCloseTimestamp_gt: BigInt\n  auctionCloseTimestamp_gte: BigInt\n  auctionCloseTimestamp_in: [BigInt!]\n  auctionCloseTimestamp_lt: BigInt\n  auctionCloseTimestamp_lte: BigInt\n  auctionCloseTimestamp_not: BigInt\n  auctionCloseTimestamp_not_in: [BigInt!]\n  auctionOpenTimestamp: BigInt\n  auctionOpenTimestamp_gt: BigInt\n  auctionOpenTimestamp_gte: BigInt\n  auctionOpenTimestamp_in: [BigInt!]\n  auctionOpenTimestamp_lt: BigInt\n  auctionOpenTimestamp_lte: BigInt\n  auctionOpenTimestamp_not: BigInt\n  auctionOpenTimestamp_not_in: [BigInt!]\n  bidQuantity: BigDecimal\n  bidQuantity_gt: BigDecimal\n  bidQuantity_gte: BigDecimal\n  bidQuantity_in: [BigDecimal!]\n  bidQuantity_lt: BigDecimal\n  bidQuantity_lte: BigDecimal\n  bidQuantity_not: BigDecimal\n  bidQuantity_not_in: [BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [GnosisAuction_filter]\n  payoutCapacity: BigDecimal\n  payoutCapacity_gt: BigDecimal\n  payoutCapacity_gte: BigDecimal\n  payoutCapacity_in: [BigDecimal!]\n  payoutCapacity_lt: BigDecimal\n  payoutCapacity_lte: BigDecimal\n  payoutCapacity_not: BigDecimal\n  payoutCapacity_not_in: [BigDecimal!]\n  termSeconds: BigInt\n  termSeconds_gt: BigInt\n  termSeconds_gte: BigInt\n  termSeconds_in: [BigInt!]\n  termSeconds_lt: BigInt\n  termSeconds_lte: BigInt\n  termSeconds_not: BigInt\n  termSeconds_not_in: [BigInt!]\n}\n\nenum GnosisAuction_orderBy {\n  auctionCloseTimestamp\n  auctionOpenTimestamp\n  bidQuantity\n  id\n  payoutCapacity\n  termSeconds\n}\n\n\"\"\"Defines the order direction, either ascending or descending\"\"\"\nenum OrderDirection {\n  asc\n  desc\n}\n\ntype PoolSnapshot {\n  balances: [BigDecimal!]!\n  block: BigInt!\n  decimals: Int!\n  id: ID!\n  pool: Bytes!\n  poolToken: Bytes\n  tokens: [Bytes!]!\n  totalSupply: BigDecimal!\n  weights: [BigDecimal!]\n}\n\ninput PoolSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [PoolSnapshot_filter]\n  balances: [BigDecimal!]\n  balances_contains: [BigDecimal!]\n  balances_contains_nocase: [BigDecimal!]\n  balances_not: [BigDecimal!]\n  balances_not_contains: [BigDecimal!]\n  balances_not_contains_nocase: [BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [PoolSnapshot_filter]\n  pool: Bytes\n  poolToken: Bytes\n  poolToken_contains: Bytes\n  poolToken_gt: Bytes\n  poolToken_gte: Bytes\n  poolToken_in: [Bytes!]\n  poolToken_lt: Bytes\n  poolToken_lte: Bytes\n  poolToken_not: Bytes\n  poolToken_not_contains: Bytes\n  poolToken_not_in: [Bytes!]\n  pool_contains: Bytes\n  pool_gt: Bytes\n  pool_gte: Bytes\n  pool_in: [Bytes!]\n  pool_lt: Bytes\n  pool_lte: Bytes\n  pool_not: Bytes\n  pool_not_contains: Bytes\n  pool_not_in: [Bytes!]\n  tokens: [Bytes!]\n  tokens_contains: [Bytes!]\n  tokens_contains_nocase: [Bytes!]\n  tokens_not: [Bytes!]\n  tokens_not_contains: [Bytes!]\n  tokens_not_contains_nocase: [Bytes!]\n  totalSupply: BigDecimal\n  totalSupply_gt: BigDecimal\n  totalSupply_gte: BigDecimal\n  totalSupply_in: [BigDecimal!]\n  totalSupply_lt: BigDecimal\n  totalSupply_lte: BigDecimal\n  totalSupply_not: BigDecimal\n  totalSupply_not_in: [BigDecimal!]\n  weights: [BigDecimal!]\n  weights_contains: [BigDecimal!]\n  weights_contains_nocase: [BigDecimal!]\n  weights_not: [BigDecimal!]\n  weights_not_contains: [BigDecimal!]\n  weights_not_contains_nocase: [BigDecimal!]\n}\n\nenum PoolSnapshot_orderBy {\n  balances\n  block\n  decimals\n  id\n  pool\n  poolToken\n  tokens\n  totalSupply\n  weights\n}\n\ntype PriceSnapshot {\n  block: BigInt!\n  date: String!\n  id: ID!\n  priceGOhm: BigDecimal!\n  priceOhm: BigDecimal!\n  timestamp: BigInt!\n}\n\ninput PriceSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [PriceSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [PriceSnapshot_filter]\n  priceGOhm: BigDecimal\n  priceGOhm_gt: BigDecimal\n  priceGOhm_gte: BigDecimal\n  priceGOhm_in: [BigDecimal!]\n  priceGOhm_lt: BigDecimal\n  priceGOhm_lte: BigDecimal\n  priceGOhm_not: BigDecimal\n  priceGOhm_not_in: [BigDecimal!]\n  priceOhm: BigDecimal\n  priceOhm_gt: BigDecimal\n  priceOhm_gte: BigDecimal\n  priceOhm_in: [BigDecimal!]\n  priceOhm_lt: BigDecimal\n  priceOhm_lte: BigDecimal\n  priceOhm_not: BigDecimal\n  priceOhm_not_in: [BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n}\n\nenum PriceSnapshot_orderBy {\n  block\n  date\n  id\n  priceGOhm\n  priceOhm\n  timestamp\n}\n\ntype ProtocolMetric {\n  block: BigInt!\n  currentAPY: BigDecimal!\n  currentIndex: BigDecimal!\n  date: String!\n  gOhmPrice: BigDecimal!\n  gOhmSyntheticSupply: BigDecimal\n  gOhmTotalSupply: BigDecimal!\n  id: ID!\n  marketCap: BigDecimal\n  nextDistributedOhm: BigDecimal!\n  nextEpochRebase: BigDecimal!\n  ohmCirculatingSupply: BigDecimal\n  ohmFloatingSupply: BigDecimal\n  ohmPrice: BigDecimal!\n  ohmTotalSupply: BigDecimal!\n  sOhmCirculatingSupply: BigDecimal!\n  timestamp: BigInt!\n  totalValueLocked: BigDecimal!\n  treasuryLiquidBacking: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic: BigDecimal\n  treasuryLiquidBackingPerOhmFloating: BigDecimal\n  treasuryMarketValue: BigDecimal\n}\n\ninput ProtocolMetric_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [ProtocolMetric_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  currentAPY: BigDecimal\n  currentAPY_gt: BigDecimal\n  currentAPY_gte: BigDecimal\n  currentAPY_in: [BigDecimal!]\n  currentAPY_lt: BigDecimal\n  currentAPY_lte: BigDecimal\n  currentAPY_not: BigDecimal\n  currentAPY_not_in: [BigDecimal!]\n  currentIndex: BigDecimal\n  currentIndex_gt: BigDecimal\n  currentIndex_gte: BigDecimal\n  currentIndex_in: [BigDecimal!]\n  currentIndex_lt: BigDecimal\n  currentIndex_lte: BigDecimal\n  currentIndex_not: BigDecimal\n  currentIndex_not_in: [BigDecimal!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  gOhmPrice: BigDecimal\n  gOhmPrice_gt: BigDecimal\n  gOhmPrice_gte: BigDecimal\n  gOhmPrice_in: [BigDecimal!]\n  gOhmPrice_lt: BigDecimal\n  gOhmPrice_lte: BigDecimal\n  gOhmPrice_not: BigDecimal\n  gOhmPrice_not_in: [BigDecimal!]\n  gOhmSyntheticSupply: BigDecimal\n  gOhmSyntheticSupply_gt: BigDecimal\n  gOhmSyntheticSupply_gte: BigDecimal\n  gOhmSyntheticSupply_in: [BigDecimal!]\n  gOhmSyntheticSupply_lt: BigDecimal\n  gOhmSyntheticSupply_lte: BigDecimal\n  gOhmSyntheticSupply_not: BigDecimal\n  gOhmSyntheticSupply_not_in: [BigDecimal!]\n  gOhmTotalSupply: BigDecimal\n  gOhmTotalSupply_gt: BigDecimal\n  gOhmTotalSupply_gte: BigDecimal\n  gOhmTotalSupply_in: [BigDecimal!]\n  gOhmTotalSupply_lt: BigDecimal\n  gOhmTotalSupply_lte: BigDecimal\n  gOhmTotalSupply_not: BigDecimal\n  gOhmTotalSupply_not_in: [BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  marketCap: BigDecimal\n  marketCap_gt: BigDecimal\n  marketCap_gte: BigDecimal\n  marketCap_in: [BigDecimal!]\n  marketCap_lt: BigDecimal\n  marketCap_lte: BigDecimal\n  marketCap_not: BigDecimal\n  marketCap_not_in: [BigDecimal!]\n  nextDistributedOhm: BigDecimal\n  nextDistributedOhm_gt: BigDecimal\n  nextDistributedOhm_gte: BigDecimal\n  nextDistributedOhm_in: [BigDecimal!]\n  nextDistributedOhm_lt: BigDecimal\n  nextDistributedOhm_lte: BigDecimal\n  nextDistributedOhm_not: BigDecimal\n  nextDistributedOhm_not_in: [BigDecimal!]\n  nextEpochRebase: BigDecimal\n  nextEpochRebase_gt: BigDecimal\n  nextEpochRebase_gte: BigDecimal\n  nextEpochRebase_in: [BigDecimal!]\n  nextEpochRebase_lt: BigDecimal\n  nextEpochRebase_lte: BigDecimal\n  nextEpochRebase_not: BigDecimal\n  nextEpochRebase_not_in: [BigDecimal!]\n  ohmCirculatingSupply: BigDecimal\n  ohmCirculatingSupply_gt: BigDecimal\n  ohmCirculatingSupply_gte: BigDecimal\n  ohmCirculatingSupply_in: [BigDecimal!]\n  ohmCirculatingSupply_lt: BigDecimal\n  ohmCirculatingSupply_lte: BigDecimal\n  ohmCirculatingSupply_not: BigDecimal\n  ohmCirculatingSupply_not_in: [BigDecimal!]\n  ohmFloatingSupply: BigDecimal\n  ohmFloatingSupply_gt: BigDecimal\n  ohmFloatingSupply_gte: BigDecimal\n  ohmFloatingSupply_in: [BigDecimal!]\n  ohmFloatingSupply_lt: BigDecimal\n  ohmFloatingSupply_lte: BigDecimal\n  ohmFloatingSupply_not: BigDecimal\n  ohmFloatingSupply_not_in: [BigDecimal!]\n  ohmPrice: BigDecimal\n  ohmPrice_gt: BigDecimal\n  ohmPrice_gte: BigDecimal\n  ohmPrice_in: [BigDecimal!]\n  ohmPrice_lt: BigDecimal\n  ohmPrice_lte: BigDecimal\n  ohmPrice_not: BigDecimal\n  ohmPrice_not_in: [BigDecimal!]\n  ohmTotalSupply: BigDecimal\n  ohmTotalSupply_gt: BigDecimal\n  ohmTotalSupply_gte: BigDecimal\n  ohmTotalSupply_in: [BigDecimal!]\n  ohmTotalSupply_lt: BigDecimal\n  ohmTotalSupply_lte: BigDecimal\n  ohmTotalSupply_not: BigDecimal\n  ohmTotalSupply_not_in: [BigDecimal!]\n  or: [ProtocolMetric_filter]\n  sOhmCirculatingSupply: BigDecimal\n  sOhmCirculatingSupply_gt: BigDecimal\n  sOhmCirculatingSupply_gte: BigDecimal\n  sOhmCirculatingSupply_in: [BigDecimal!]\n  sOhmCirculatingSupply_lt: BigDecimal\n  sOhmCirculatingSupply_lte: BigDecimal\n  sOhmCirculatingSupply_not: BigDecimal\n  sOhmCirculatingSupply_not_in: [BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  totalValueLocked: BigDecimal\n  totalValueLocked_gt: BigDecimal\n  totalValueLocked_gte: BigDecimal\n  totalValueLocked_in: [BigDecimal!]\n  totalValueLocked_lt: BigDecimal\n  totalValueLocked_lte: BigDecimal\n  totalValueLocked_not: BigDecimal\n  totalValueLocked_not_in: [BigDecimal!]\n  treasuryLiquidBacking: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_gt: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_gte: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_in: [BigDecimal!]\n  treasuryLiquidBackingPerGOhmSynthetic_lt: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_lte: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_not: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_not_in: [BigDecimal!]\n  treasuryLiquidBackingPerOhmFloating: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_gt: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_gte: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_in: [BigDecimal!]\n  treasuryLiquidBackingPerOhmFloating_lt: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_lte: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_not: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_not_in: [BigDecimal!]\n  treasuryLiquidBacking_gt: BigDecimal\n  treasuryLiquidBacking_gte: BigDecimal\n  treasuryLiquidBacking_in: [BigDecimal!]\n  treasuryLiquidBacking_lt: BigDecimal\n  treasuryLiquidBacking_lte: BigDecimal\n  treasuryLiquidBacking_not: BigDecimal\n  treasuryLiquidBacking_not_in: [BigDecimal!]\n  treasuryMarketValue: BigDecimal\n  treasuryMarketValue_gt: BigDecimal\n  treasuryMarketValue_gte: BigDecimal\n  treasuryMarketValue_in: [BigDecimal!]\n  treasuryMarketValue_lt: BigDecimal\n  treasuryMarketValue_lte: BigDecimal\n  treasuryMarketValue_not: BigDecimal\n  treasuryMarketValue_not_in: [BigDecimal!]\n}\n\nenum ProtocolMetric_orderBy {\n  block\n  currentAPY\n  currentIndex\n  date\n  gOhmPrice\n  gOhmSyntheticSupply\n  gOhmTotalSupply\n  id\n  marketCap\n  nextDistributedOhm\n  nextEpochRebase\n  ohmCirculatingSupply\n  ohmFloatingSupply\n  ohmPrice\n  ohmTotalSupply\n  sOhmCirculatingSupply\n  timestamp\n  totalValueLocked\n  treasuryLiquidBacking\n  treasuryLiquidBackingPerGOhmSynthetic\n  treasuryLiquidBackingPerOhmFloating\n  treasuryMarketValue\n}\n\ntype Query {\n  \"Access to subgraph metadata\"\n  _meta(block: Block_height): _Meta_\n  balancerPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): BalancerPoolSnapshot\n  balancerPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: BalancerPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: BalancerPoolSnapshot_filter\n  ): [BalancerPoolSnapshot!]!\n  bondDiscount(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): BondDiscount\n  bondDiscounts(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: BondDiscount_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: BondDiscount_filter\n  ): [BondDiscount!]!\n  convexRewardPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ConvexRewardPoolSnapshot\n  convexRewardPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ConvexRewardPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ConvexRewardPoolSnapshot_filter\n  ): [ConvexRewardPoolSnapshot!]!\n  dailyBond(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): DailyBond\n  dailyBonds(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: DailyBond_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: DailyBond_filter\n  ): [DailyBond!]!\n  dailyStakingReward(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): DailyStakingReward\n  dailyStakingRewards(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: DailyStakingReward_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: DailyStakingReward_filter\n  ): [DailyStakingReward!]!\n  erc20TokenSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ERC20TokenSnapshot\n  erc20TokenSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ERC20TokenSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ERC20TokenSnapshot_filter\n  ): [ERC20TokenSnapshot!]!\n  gnosisAuction(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): GnosisAuction\n  gnosisAuctionRoot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): GnosisAuctionRoot\n  gnosisAuctionRoots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: GnosisAuctionRoot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: GnosisAuctionRoot_filter\n  ): [GnosisAuctionRoot!]!\n  gnosisAuctions(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: GnosisAuction_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: GnosisAuction_filter\n  ): [GnosisAuction!]!\n  poolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PoolSnapshot\n  poolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: PoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: PoolSnapshot_filter\n  ): [PoolSnapshot!]!\n  priceSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PriceSnapshot\n  priceSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: PriceSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: PriceSnapshot_filter\n  ): [PriceSnapshot!]!\n  protocolMetric(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ProtocolMetric\n  protocolMetrics(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ProtocolMetric_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ProtocolMetric_filter\n  ): [ProtocolMetric!]!\n  rebase(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Rebase\n  rebases(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: Rebase_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: Rebase_filter\n  ): [Rebase!]!\n  stakingPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): StakingPoolSnapshot\n  stakingPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: StakingPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: StakingPoolSnapshot_filter\n  ): [StakingPoolSnapshot!]!\n  token(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Token\n  tokenPriceSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenPriceSnapshot\n  tokenPriceSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenPriceSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenPriceSnapshot_filter\n  ): [TokenPriceSnapshot!]!\n  tokenRecord(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenRecord\n  tokenRecords(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenRecord_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenRecord_filter\n  ): [TokenRecord!]!\n  tokenSupplies(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenSupply_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenSupply_filter\n  ): [TokenSupply!]!\n  tokenSupply(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenSupply\n  tokens(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: Token_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: Token_filter\n  ): [Token!]!\n}\n\ntype Rebase {\n  amount: BigDecimal!\n  contract: String!\n  id: ID!\n  percentage: BigDecimal!\n  stakedOhms: BigDecimal!\n  timestamp: BigInt!\n  value: BigDecimal!\n}\n\ninput Rebase_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  amount: BigDecimal\n  amount_gt: BigDecimal\n  amount_gte: BigDecimal\n  amount_in: [BigDecimal!]\n  amount_lt: BigDecimal\n  amount_lte: BigDecimal\n  amount_not: BigDecimal\n  amount_not_in: [BigDecimal!]\n  and: [Rebase_filter]\n  contract: String\n  contract_contains: String\n  contract_contains_nocase: String\n  contract_ends_with: String\n  contract_ends_with_nocase: String\n  contract_gt: String\n  contract_gte: String\n  contract_in: [String!]\n  contract_lt: String\n  contract_lte: String\n  contract_not: String\n  contract_not_contains: String\n  contract_not_contains_nocase: String\n  contract_not_ends_with: String\n  contract_not_ends_with_nocase: String\n  contract_not_in: [String!]\n  contract_not_starts_with: String\n  contract_not_starts_with_nocase: String\n  contract_starts_with: String\n  contract_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [Rebase_filter]\n  percentage: BigDecimal\n  percentage_gt: BigDecimal\n  percentage_gte: BigDecimal\n  percentage_in: [BigDecimal!]\n  percentage_lt: BigDecimal\n  percentage_lte: BigDecimal\n  percentage_not: BigDecimal\n  percentage_not_in: [BigDecimal!]\n  stakedOhms: BigDecimal\n  stakedOhms_gt: BigDecimal\n  stakedOhms_gte: BigDecimal\n  stakedOhms_in: [BigDecimal!]\n  stakedOhms_lt: BigDecimal\n  stakedOhms_lte: BigDecimal\n  stakedOhms_not: BigDecimal\n  stakedOhms_not_in: [BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  value: BigDecimal\n  value_gt: BigDecimal\n  value_gte: BigDecimal\n  value_in: [BigDecimal!]\n  value_lt: BigDecimal\n  value_lte: BigDecimal\n  value_not: BigDecimal\n  value_not_in: [BigDecimal!]\n}\n\nenum Rebase_orderBy {\n  amount\n  contract\n  id\n  percentage\n  stakedOhms\n  timestamp\n  value\n}\n\ntype StakingPoolSnapshot {\n  block: BigInt!\n  contractAddress: Bytes!\n  id: ID!\n  stakingToken: Bytes\n}\n\ninput StakingPoolSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [StakingPoolSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  contractAddress: Bytes\n  contractAddress_contains: Bytes\n  contractAddress_gt: Bytes\n  contractAddress_gte: Bytes\n  contractAddress_in: [Bytes!]\n  contractAddress_lt: Bytes\n  contractAddress_lte: Bytes\n  contractAddress_not: Bytes\n  contractAddress_not_contains: Bytes\n  contractAddress_not_in: [Bytes!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [StakingPoolSnapshot_filter]\n  stakingToken: Bytes\n  stakingToken_contains: Bytes\n  stakingToken_gt: Bytes\n  stakingToken_gte: Bytes\n  stakingToken_in: [Bytes!]\n  stakingToken_lt: Bytes\n  stakingToken_lte: Bytes\n  stakingToken_not: Bytes\n  stakingToken_not_contains: Bytes\n  stakingToken_not_in: [Bytes!]\n}\n\nenum StakingPoolSnapshot_orderBy {\n  block\n  contractAddress\n  id\n  stakingToken\n}\n\ntype Subscription {\n  \"Access to subgraph metadata\"\n  _meta(block: Block_height): _Meta_\n  balancerPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): BalancerPoolSnapshot\n  balancerPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: BalancerPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: BalancerPoolSnapshot_filter\n  ): [BalancerPoolSnapshot!]!\n  bondDiscount(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): BondDiscount\n  bondDiscounts(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: BondDiscount_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: BondDiscount_filter\n  ): [BondDiscount!]!\n  convexRewardPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ConvexRewardPoolSnapshot\n  convexRewardPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ConvexRewardPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ConvexRewardPoolSnapshot_filter\n  ): [ConvexRewardPoolSnapshot!]!\n  dailyBond(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): DailyBond\n  dailyBonds(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: DailyBond_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: DailyBond_filter\n  ): [DailyBond!]!\n  dailyStakingReward(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): DailyStakingReward\n  dailyStakingRewards(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: DailyStakingReward_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: DailyStakingReward_filter\n  ): [DailyStakingReward!]!\n  erc20TokenSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ERC20TokenSnapshot\n  erc20TokenSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ERC20TokenSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ERC20TokenSnapshot_filter\n  ): [ERC20TokenSnapshot!]!\n  gnosisAuction(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): GnosisAuction\n  gnosisAuctionRoot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): GnosisAuctionRoot\n  gnosisAuctionRoots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: GnosisAuctionRoot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: GnosisAuctionRoot_filter\n  ): [GnosisAuctionRoot!]!\n  gnosisAuctions(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: GnosisAuction_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: GnosisAuction_filter\n  ): [GnosisAuction!]!\n  poolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PoolSnapshot\n  poolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: PoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: PoolSnapshot_filter\n  ): [PoolSnapshot!]!\n  priceSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PriceSnapshot\n  priceSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: PriceSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: PriceSnapshot_filter\n  ): [PriceSnapshot!]!\n  protocolMetric(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ProtocolMetric\n  protocolMetrics(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ProtocolMetric_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ProtocolMetric_filter\n  ): [ProtocolMetric!]!\n  rebase(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Rebase\n  rebases(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: Rebase_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: Rebase_filter\n  ): [Rebase!]!\n  stakingPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): StakingPoolSnapshot\n  stakingPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: StakingPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: StakingPoolSnapshot_filter\n  ): [StakingPoolSnapshot!]!\n  token(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Token\n  tokenPriceSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenPriceSnapshot\n  tokenPriceSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenPriceSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenPriceSnapshot_filter\n  ): [TokenPriceSnapshot!]!\n  tokenRecord(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenRecord\n  tokenRecords(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenRecord_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenRecord_filter\n  ): [TokenRecord!]!\n  tokenSupplies(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenSupply_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenSupply_filter\n  ): [TokenSupply!]!\n  tokenSupply(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenSupply\n  tokens(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: Token_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: Token_filter\n  ): [Token!]!\n}\n\ntype Token {\n  id: ID!\n}\n\ntype TokenPriceSnapshot {\n  block: BigInt!\n  id: ID!\n  price: BigDecimal!\n  token: Bytes!\n}\n\ninput TokenPriceSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [TokenPriceSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [TokenPriceSnapshot_filter]\n  price: BigDecimal\n  price_gt: BigDecimal\n  price_gte: BigDecimal\n  price_in: [BigDecimal!]\n  price_lt: BigDecimal\n  price_lte: BigDecimal\n  price_not: BigDecimal\n  price_not_in: [BigDecimal!]\n  token: Bytes\n  token_contains: Bytes\n  token_gt: Bytes\n  token_gte: Bytes\n  token_in: [Bytes!]\n  token_lt: Bytes\n  token_lte: Bytes\n  token_not: Bytes\n  token_not_contains: Bytes\n  token_not_in: [Bytes!]\n}\n\nenum TokenPriceSnapshot_orderBy {\n  block\n  id\n  price\n  token\n}\n\ntype TokenRecord {\n  balance: BigDecimal!\n  block: BigInt!\n  blockchain: String!\n  category: String!\n  date: String!\n  id: ID!\n  isBluechip: Boolean!\n  isLiquid: Boolean!\n  multiplier: BigDecimal!\n  rate: BigDecimal!\n  source: String!\n  sourceAddress: String!\n  timestamp: BigInt!\n  token: String!\n  tokenAddress: String!\n  value: BigDecimal!\n  valueExcludingOhm: BigDecimal!\n}\n\ninput TokenRecord_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [TokenRecord_filter]\n  balance: BigDecimal\n  balance_gt: BigDecimal\n  balance_gte: BigDecimal\n  balance_in: [BigDecimal!]\n  balance_lt: BigDecimal\n  balance_lte: BigDecimal\n  balance_not: BigDecimal\n  balance_not_in: [BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  blockchain: String\n  blockchain_contains: String\n  blockchain_contains_nocase: String\n  blockchain_ends_with: String\n  blockchain_ends_with_nocase: String\n  blockchain_gt: String\n  blockchain_gte: String\n  blockchain_in: [String!]\n  blockchain_lt: String\n  blockchain_lte: String\n  blockchain_not: String\n  blockchain_not_contains: String\n  blockchain_not_contains_nocase: String\n  blockchain_not_ends_with: String\n  blockchain_not_ends_with_nocase: String\n  blockchain_not_in: [String!]\n  blockchain_not_starts_with: String\n  blockchain_not_starts_with_nocase: String\n  blockchain_starts_with: String\n  blockchain_starts_with_nocase: String\n  category: String\n  category_contains: String\n  category_contains_nocase: String\n  category_ends_with: String\n  category_ends_with_nocase: String\n  category_gt: String\n  category_gte: String\n  category_in: [String!]\n  category_lt: String\n  category_lte: String\n  category_not: String\n  category_not_contains: String\n  category_not_contains_nocase: String\n  category_not_ends_with: String\n  category_not_ends_with_nocase: String\n  category_not_in: [String!]\n  category_not_starts_with: String\n  category_not_starts_with_nocase: String\n  category_starts_with: String\n  category_starts_with_nocase: String\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  isBluechip: Boolean\n  isBluechip_in: [Boolean!]\n  isBluechip_not: Boolean\n  isBluechip_not_in: [Boolean!]\n  isLiquid: Boolean\n  isLiquid_in: [Boolean!]\n  isLiquid_not: Boolean\n  isLiquid_not_in: [Boolean!]\n  multiplier: BigDecimal\n  multiplier_gt: BigDecimal\n  multiplier_gte: BigDecimal\n  multiplier_in: [BigDecimal!]\n  multiplier_lt: BigDecimal\n  multiplier_lte: BigDecimal\n  multiplier_not: BigDecimal\n  multiplier_not_in: [BigDecimal!]\n  or: [TokenRecord_filter]\n  rate: BigDecimal\n  rate_gt: BigDecimal\n  rate_gte: BigDecimal\n  rate_in: [BigDecimal!]\n  rate_lt: BigDecimal\n  rate_lte: BigDecimal\n  rate_not: BigDecimal\n  rate_not_in: [BigDecimal!]\n  source: String\n  sourceAddress: String\n  sourceAddress_contains: String\n  sourceAddress_contains_nocase: String\n  sourceAddress_ends_with: String\n  sourceAddress_ends_with_nocase: String\n  sourceAddress_gt: String\n  sourceAddress_gte: String\n  sourceAddress_in: [String!]\n  sourceAddress_lt: String\n  sourceAddress_lte: String\n  sourceAddress_not: String\n  sourceAddress_not_contains: String\n  sourceAddress_not_contains_nocase: String\n  sourceAddress_not_ends_with: String\n  sourceAddress_not_ends_with_nocase: String\n  sourceAddress_not_in: [String!]\n  sourceAddress_not_starts_with: String\n  sourceAddress_not_starts_with_nocase: String\n  sourceAddress_starts_with: String\n  sourceAddress_starts_with_nocase: String\n  source_contains: String\n  source_contains_nocase: String\n  source_ends_with: String\n  source_ends_with_nocase: String\n  source_gt: String\n  source_gte: String\n  source_in: [String!]\n  source_lt: String\n  source_lte: String\n  source_not: String\n  source_not_contains: String\n  source_not_contains_nocase: String\n  source_not_ends_with: String\n  source_not_ends_with_nocase: String\n  source_not_in: [String!]\n  source_not_starts_with: String\n  source_not_starts_with_nocase: String\n  source_starts_with: String\n  source_starts_with_nocase: String\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  tokenAddress: String\n  tokenAddress_contains: String\n  tokenAddress_contains_nocase: String\n  tokenAddress_ends_with: String\n  tokenAddress_ends_with_nocase: String\n  tokenAddress_gt: String\n  tokenAddress_gte: String\n  tokenAddress_in: [String!]\n  tokenAddress_lt: String\n  tokenAddress_lte: String\n  tokenAddress_not: String\n  tokenAddress_not_contains: String\n  tokenAddress_not_contains_nocase: String\n  tokenAddress_not_ends_with: String\n  tokenAddress_not_ends_with_nocase: String\n  tokenAddress_not_in: [String!]\n  tokenAddress_not_starts_with: String\n  tokenAddress_not_starts_with_nocase: String\n  tokenAddress_starts_with: String\n  tokenAddress_starts_with_nocase: String\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  value: BigDecimal\n  valueExcludingOhm: BigDecimal\n  valueExcludingOhm_gt: BigDecimal\n  valueExcludingOhm_gte: BigDecimal\n  valueExcludingOhm_in: [BigDecimal!]\n  valueExcludingOhm_lt: BigDecimal\n  valueExcludingOhm_lte: BigDecimal\n  valueExcludingOhm_not: BigDecimal\n  valueExcludingOhm_not_in: [BigDecimal!]\n  value_gt: BigDecimal\n  value_gte: BigDecimal\n  value_in: [BigDecimal!]\n  value_lt: BigDecimal\n  value_lte: BigDecimal\n  value_not: BigDecimal\n  value_not_in: [BigDecimal!]\n}\n\nenum TokenRecord_orderBy {\n  balance\n  block\n  blockchain\n  category\n  date\n  id\n  isBluechip\n  isLiquid\n  multiplier\n  rate\n  source\n  sourceAddress\n  timestamp\n  token\n  tokenAddress\n  value\n  valueExcludingOhm\n}\n\ntype TokenSupply {\n  balance: BigDecimal!\n  block: BigInt!\n  date: String!\n  id: ID!\n  pool: String\n  poolAddress: String\n  source: String\n  sourceAddress: String\n  supplyBalance: BigDecimal!\n  timestamp: BigInt!\n  token: String!\n  tokenAddress: String!\n  type: String!\n}\n\ninput TokenSupply_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [TokenSupply_filter]\n  balance: BigDecimal\n  balance_gt: BigDecimal\n  balance_gte: BigDecimal\n  balance_in: [BigDecimal!]\n  balance_lt: BigDecimal\n  balance_lte: BigDecimal\n  balance_not: BigDecimal\n  balance_not_in: [BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [TokenSupply_filter]\n  pool: String\n  poolAddress: String\n  poolAddress_contains: String\n  poolAddress_contains_nocase: String\n  poolAddress_ends_with: String\n  poolAddress_ends_with_nocase: String\n  poolAddress_gt: String\n  poolAddress_gte: String\n  poolAddress_in: [String!]\n  poolAddress_lt: String\n  poolAddress_lte: String\n  poolAddress_not: String\n  poolAddress_not_contains: String\n  poolAddress_not_contains_nocase: String\n  poolAddress_not_ends_with: String\n  poolAddress_not_ends_with_nocase: String\n  poolAddress_not_in: [String!]\n  poolAddress_not_starts_with: String\n  poolAddress_not_starts_with_nocase: String\n  poolAddress_starts_with: String\n  poolAddress_starts_with_nocase: String\n  pool_contains: String\n  pool_contains_nocase: String\n  pool_ends_with: String\n  pool_ends_with_nocase: String\n  pool_gt: String\n  pool_gte: String\n  pool_in: [String!]\n  pool_lt: String\n  pool_lte: String\n  pool_not: String\n  pool_not_contains: String\n  pool_not_contains_nocase: String\n  pool_not_ends_with: String\n  pool_not_ends_with_nocase: String\n  pool_not_in: [String!]\n  pool_not_starts_with: String\n  pool_not_starts_with_nocase: String\n  pool_starts_with: String\n  pool_starts_with_nocase: String\n  source: String\n  sourceAddress: String\n  sourceAddress_contains: String\n  sourceAddress_contains_nocase: String\n  sourceAddress_ends_with: String\n  sourceAddress_ends_with_nocase: String\n  sourceAddress_gt: String\n  sourceAddress_gte: String\n  sourceAddress_in: [String!]\n  sourceAddress_lt: String\n  sourceAddress_lte: String\n  sourceAddress_not: String\n  sourceAddress_not_contains: String\n  sourceAddress_not_contains_nocase: String\n  sourceAddress_not_ends_with: String\n  sourceAddress_not_ends_with_nocase: String\n  sourceAddress_not_in: [String!]\n  sourceAddress_not_starts_with: String\n  sourceAddress_not_starts_with_nocase: String\n  sourceAddress_starts_with: String\n  sourceAddress_starts_with_nocase: String\n  source_contains: String\n  source_contains_nocase: String\n  source_ends_with: String\n  source_ends_with_nocase: String\n  source_gt: String\n  source_gte: String\n  source_in: [String!]\n  source_lt: String\n  source_lte: String\n  source_not: String\n  source_not_contains: String\n  source_not_contains_nocase: String\n  source_not_ends_with: String\n  source_not_ends_with_nocase: String\n  source_not_in: [String!]\n  source_not_starts_with: String\n  source_not_starts_with_nocase: String\n  source_starts_with: String\n  source_starts_with_nocase: String\n  supplyBalance: BigDecimal\n  supplyBalance_gt: BigDecimal\n  supplyBalance_gte: BigDecimal\n  supplyBalance_in: [BigDecimal!]\n  supplyBalance_lt: BigDecimal\n  supplyBalance_lte: BigDecimal\n  supplyBalance_not: BigDecimal\n  supplyBalance_not_in: [BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  tokenAddress: String\n  tokenAddress_contains: String\n  tokenAddress_contains_nocase: String\n  tokenAddress_ends_with: String\n  tokenAddress_ends_with_nocase: String\n  tokenAddress_gt: String\n  tokenAddress_gte: String\n  tokenAddress_in: [String!]\n  tokenAddress_lt: String\n  tokenAddress_lte: String\n  tokenAddress_not: String\n  tokenAddress_not_contains: String\n  tokenAddress_not_contains_nocase: String\n  tokenAddress_not_ends_with: String\n  tokenAddress_not_ends_with_nocase: String\n  tokenAddress_not_in: [String!]\n  tokenAddress_not_starts_with: String\n  tokenAddress_not_starts_with_nocase: String\n  tokenAddress_starts_with: String\n  tokenAddress_starts_with_nocase: String\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  type: String\n  type_contains: String\n  type_contains_nocase: String\n  type_ends_with: String\n  type_ends_with_nocase: String\n  type_gt: String\n  type_gte: String\n  type_in: [String!]\n  type_lt: String\n  type_lte: String\n  type_not: String\n  type_not_contains: String\n  type_not_contains_nocase: String\n  type_not_ends_with: String\n  type_not_ends_with_nocase: String\n  type_not_in: [String!]\n  type_not_starts_with: String\n  type_not_starts_with_nocase: String\n  type_starts_with: String\n  type_starts_with_nocase: String\n}\n\nenum TokenSupply_orderBy {\n  balance\n  block\n  date\n  id\n  pool\n  poolAddress\n  source\n  sourceAddress\n  supplyBalance\n  timestamp\n  token\n  tokenAddress\n  type\n}\n\ninput Token_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [Token_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [Token_filter]\n}\n\nenum Token_orderBy {\n  id\n}\n\ntype _Block_ {\n  \"The hash of the block\"\n  hash: Bytes\n  \"The block number\"\n  number: Int!\n  \"Integer representation of the timestamp stored in blocks for the chain\"\n  timestamp: Int\n}\n\n\"\"\"The type for the top-level _meta field\"\"\"\ntype _Meta_ {\n  \"Information about a specific subgraph block. The hash of the block\\nwill be null if the _meta field has a block constraint that asks for\\na block number. It will be filled if the _meta field has no block constraint\\nand therefore asks for the latest  block\\n\"\n  block: _Block_!\n  \"The deployment ID\"\n  deployment: String!\n  \"If `true`, the subgraph encountered indexing errors at some past block\"\n  hasIndexingErrors: Boolean!\n}\n\nenum _SubgraphErrorPolicy_ {\n  \"\"\"Data will be returned even if the subgraph has indexing errors\"\"\"\n  allow\n  \"\"\"\n  If the subgraph has indexing errors, data will be omitted. The default.\n  \"\"\"\n  deny\n}",
            "hooksConfiguration": {
              "onWSTransportConnectionInit": false
            },
            "customScalarTypeFields": []
          },
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "treasuryArbitrum__meta",
                "treasuryArbitrum_balancerPoolSnapshot",
                "treasuryArbitrum_balancerPoolSnapshots",
                "treasuryArbitrum_bondDiscount",
                "treasuryArbitrum_bondDiscounts",
                "treasuryArbitrum_convexRewardPoolSnapshot",
                "treasuryArbitrum_convexRewardPoolSnapshots",
                "treasuryArbitrum_dailyBond",
                "treasuryArbitrum_dailyBonds",
                "treasuryArbitrum_dailyStakingReward",
                "treasuryArbitrum_dailyStakingRewards",
                "treasuryArbitrum_erc20TokenSnapshot",
                "treasuryArbitrum_erc20TokenSnapshots",
                "treasuryArbitrum_gnosisAuction",
                "treasuryArbitrum_gnosisAuctionRoot",
                "treasuryArbitrum_gnosisAuctionRoots",
                "treasuryArbitrum_gnosisAuctions",
                "treasuryArbitrum_poolSnapshot",
                "treasuryArbitrum_poolSnapshots",
                "treasuryArbitrum_priceSnapshot",
                "treasuryArbitrum_priceSnapshots",
                "treasuryArbitrum_protocolMetric",
                "treasuryArbitrum_protocolMetrics",
                "treasuryArbitrum_rebase",
                "treasuryArbitrum_rebases",
                "treasuryArbitrum_stakingPoolSnapshot",
                "treasuryArbitrum_stakingPoolSnapshots",
                "treasuryArbitrum_token",
                "treasuryArbitrum_tokenPriceSnapshot",
                "treasuryArbitrum_tokenPriceSnapshots",
                "treasuryArbitrum_tokenRecord",
                "treasuryArbitrum_tokenRecords",
                "treasuryArbitrum_tokenSupplies",
                "treasuryArbitrum_tokenSupply",
                "treasuryArbitrum_tokens"
              ]
            },
            {
              "typeName": "Subscription",
              "fieldNames": [
                "treasuryArbitrum__meta",
                "treasuryArbitrum_balancerPoolSnapshot",
                "treasuryArbitrum_balancerPoolSnapshots",
                "treasuryArbitrum_bondDiscount",
                "treasuryArbitrum_bondDiscounts",
                "treasuryArbitrum_convexRewardPoolSnapshot",
                "treasuryArbitrum_convexRewardPoolSnapshots",
                "treasuryArbitrum_dailyBond",
                "treasuryArbitrum_dailyBonds",
                "treasuryArbitrum_dailyStakingReward",
                "treasuryArbitrum_dailyStakingRewards",
                "treasuryArbitrum_erc20TokenSnapshot",
                "treasuryArbitrum_erc20TokenSnapshots",
                "treasuryArbitrum_gnosisAuction",
                "treasuryArbitrum_gnosisAuctionRoot",
                "treasuryArbitrum_gnosisAuctionRoots",
                "treasuryArbitrum_gnosisAuctions",
                "treasuryArbitrum_poolSnapshot",
                "treasuryArbitrum_poolSnapshots",
                "treasuryArbitrum_priceSnapshot",
                "treasuryArbitrum_priceSnapshots",
                "treasuryArbitrum_protocolMetric",
                "treasuryArbitrum_protocolMetrics",
                "treasuryArbitrum_rebase",
                "treasuryArbitrum_rebases",
                "treasuryArbitrum_stakingPoolSnapshot",
                "treasuryArbitrum_stakingPoolSnapshots",
                "treasuryArbitrum_token",
                "treasuryArbitrum_tokenPriceSnapshot",
                "treasuryArbitrum_tokenPriceSnapshots",
                "treasuryArbitrum_tokenRecord",
                "treasuryArbitrum_tokenRecords",
                "treasuryArbitrum_tokenSupplies",
                "treasuryArbitrum_tokenSupply",
                "treasuryArbitrum_tokens"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "treasuryArbitrum_BalancerPoolSnapshot",
              "fieldNames": [
                "balances",
                "block",
                "decimals",
                "id",
                "pool",
                "poolToken",
                "tokens",
                "totalSupply",
                "weights"
              ]
            },
            {
              "typeName": "treasuryArbitrum_BondDiscount",
              "fieldNames": [
                "dai_discount",
                "eth_discount",
                "frax_discount",
                "id",
                "lusd_discount",
                "ohmdai_discount",
                "ohmfrax_discount",
                "ohmlusd_discount",
                "timestamp"
              ]
            },
            {
              "typeName": "treasuryArbitrum_ConvexRewardPoolSnapshot",
              "fieldNames": [
                "address",
                "block",
                "id",
                "stakingToken"
              ]
            },
            {
              "typeName": "treasuryArbitrum_DailyBond",
              "fieldNames": [
                "amount",
                "id",
                "timestamp",
                "token",
                "value"
              ]
            },
            {
              "typeName": "treasuryArbitrum_DailyStakingReward",
              "fieldNames": [
                "amount",
                "id",
                "timestamp",
                "value"
              ]
            },
            {
              "typeName": "treasuryArbitrum_ERC20TokenSnapshot",
              "fieldNames": [
                "address",
                "decimals",
                "id",
                "totalSupply"
              ]
            },
            {
              "typeName": "treasuryArbitrum_GnosisAuction",
              "fieldNames": [
                "auctionCloseTimestamp",
                "auctionOpenTimestamp",
                "bidQuantity",
                "id",
                "payoutCapacity",
                "termSeconds"
              ]
            },
            {
              "typeName": "treasuryArbitrum_GnosisAuctionRoot",
              "fieldNames": [
                "id",
                "markets"
              ]
            },
            {
              "typeName": "treasuryArbitrum_PoolSnapshot",
              "fieldNames": [
                "balances",
                "block",
                "decimals",
                "id",
                "pool",
                "poolToken",
                "tokens",
                "totalSupply",
                "weights"
              ]
            },
            {
              "typeName": "treasuryArbitrum_PriceSnapshot",
              "fieldNames": [
                "block",
                "date",
                "id",
                "priceGOhm",
                "priceOhm",
                "timestamp"
              ]
            },
            {
              "typeName": "treasuryArbitrum_ProtocolMetric",
              "fieldNames": [
                "block",
                "currentAPY",
                "currentIndex",
                "date",
                "gOhmPrice",
                "gOhmSyntheticSupply",
                "gOhmTotalSupply",
                "id",
                "marketCap",
                "nextDistributedOhm",
                "nextEpochRebase",
                "ohmCirculatingSupply",
                "ohmFloatingSupply",
                "ohmPrice",
                "ohmTotalSupply",
                "sOhmCirculatingSupply",
                "timestamp",
                "totalValueLocked",
                "treasuryLiquidBacking",
                "treasuryLiquidBackingPerGOhmSynthetic",
                "treasuryLiquidBackingPerOhmFloating",
                "treasuryMarketValue"
              ]
            },
            {
              "typeName": "treasuryArbitrum_Rebase",
              "fieldNames": [
                "amount",
                "contract",
                "id",
                "percentage",
                "stakedOhms",
                "timestamp",
                "value"
              ]
            },
            {
              "typeName": "treasuryArbitrum_StakingPoolSnapshot",
              "fieldNames": [
                "block",
                "contractAddress",
                "id",
                "stakingToken"
              ]
            },
            {
              "typeName": "treasuryArbitrum_Token",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "treasuryArbitrum_TokenPriceSnapshot",
              "fieldNames": [
                "block",
                "id",
                "price",
                "token"
              ]
            },
            {
              "typeName": "treasuryArbitrum_TokenRecord",
              "fieldNames": [
                "balance",
                "block",
                "blockchain",
                "category",
                "date",
                "id",
                "isBluechip",
                "isLiquid",
                "multiplier",
                "rate",
                "source",
                "sourceAddress",
                "timestamp",
                "token",
                "tokenAddress",
                "value",
                "valueExcludingOhm"
              ]
            },
            {
              "typeName": "treasuryArbitrum_TokenSupply",
              "fieldNames": [
                "balance",
                "block",
                "date",
                "id",
                "pool",
                "poolAddress",
                "source",
                "sourceAddress",
                "supplyBalance",
                "timestamp",
                "token",
                "tokenAddress",
                "type"
              ]
            },
            {
              "typeName": "treasuryArbitrum__Block_",
              "fieldNames": [
                "hash",
                "number",
                "timestamp"
              ]
            },
            {
              "typeName": "treasuryArbitrum__Meta_",
              "fieldNames": [
                "block",
                "deployment",
                "hasIndexingErrors"
              ]
            }
          ],
          "overrideFieldPathFromAlias": true,
          "directives": [
            {
              "directiveName": "treasuryArbitrum_derivedFrom",
              "renameTo": "derivedFrom"
            },
            {
              "directiveName": "treasuryArbitrum_entity",
              "renameTo": "entity"
            },
            {
              "directiveName": "treasuryArbitrum_subgraphId",
              "renameTo": "subgraphId"
            }
          ],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 2,
          "customGraphql": {
            "fetch": {
              "url": {
                "kind": 1,
                "staticVariableContent": "",
                "placeholderVariableName": "",
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "SUBGRAPH_ETHEREUM"
              },
              "baseUrl": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": ""
              },
              "path": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": ""
              },
              "method": 1,
              "body": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": ""
              },
              "header": {},
              "query": [],
              "urlEncodeBody": false
            },
            "federation": {
              "enabled": false,
              "serviceSdl": ""
            },
            "subscription": {
              "enabled": true,
              "url": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": ""
              },
              "useSSE": false
            },
            "upstreamSchema": "\"\"\"\ncreates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.\n\"\"\"\ndirective @derivedFrom(field: String!) on FIELD_DEFINITION\n\n\"\"\"\nMarks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.\n\"\"\"\ndirective @entity on OBJECT\n\n\"\"\"Defined a Subgraph ID for an object type\"\"\"\ndirective @subgraphId(id: String!) on OBJECT\n\ntype BalancerPoolSnapshot {\n  balances: [BigDecimal!]!\n  block: BigInt!\n  decimals: Int!\n  id: ID!\n  pool: Bytes!\n  poolToken: Bytes!\n  tokens: [Bytes!]!\n  totalSupply: BigDecimal!\n  weights: [BigDecimal!]!\n}\n\ninput BalancerPoolSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [BalancerPoolSnapshot_filter]\n  balances: [BigDecimal!]\n  balances_contains: [BigDecimal!]\n  balances_contains_nocase: [BigDecimal!]\n  balances_not: [BigDecimal!]\n  balances_not_contains: [BigDecimal!]\n  balances_not_contains_nocase: [BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [BalancerPoolSnapshot_filter]\n  pool: Bytes\n  poolToken: Bytes\n  poolToken_contains: Bytes\n  poolToken_gt: Bytes\n  poolToken_gte: Bytes\n  poolToken_in: [Bytes!]\n  poolToken_lt: Bytes\n  poolToken_lte: Bytes\n  poolToken_not: Bytes\n  poolToken_not_contains: Bytes\n  poolToken_not_in: [Bytes!]\n  pool_contains: Bytes\n  pool_gt: Bytes\n  pool_gte: Bytes\n  pool_in: [Bytes!]\n  pool_lt: Bytes\n  pool_lte: Bytes\n  pool_not: Bytes\n  pool_not_contains: Bytes\n  pool_not_in: [Bytes!]\n  tokens: [Bytes!]\n  tokens_contains: [Bytes!]\n  tokens_contains_nocase: [Bytes!]\n  tokens_not: [Bytes!]\n  tokens_not_contains: [Bytes!]\n  tokens_not_contains_nocase: [Bytes!]\n  totalSupply: BigDecimal\n  totalSupply_gt: BigDecimal\n  totalSupply_gte: BigDecimal\n  totalSupply_in: [BigDecimal!]\n  totalSupply_lt: BigDecimal\n  totalSupply_lte: BigDecimal\n  totalSupply_not: BigDecimal\n  totalSupply_not_in: [BigDecimal!]\n  weights: [BigDecimal!]\n  weights_contains: [BigDecimal!]\n  weights_contains_nocase: [BigDecimal!]\n  weights_not: [BigDecimal!]\n  weights_not_contains: [BigDecimal!]\n  weights_not_contains_nocase: [BigDecimal!]\n}\n\nenum BalancerPoolSnapshot_orderBy {\n  balances\n  block\n  decimals\n  id\n  pool\n  poolToken\n  tokens\n  totalSupply\n  weights\n}\n\nscalar BigDecimal\n\nscalar BigInt\n\ninput BlockChangedFilter {\n  number_gte: Int!\n}\n\ninput Block_height {\n  hash: Bytes\n  number: Int\n  number_gte: Int\n}\n\ntype BondDiscount {\n  dai_discount: BigDecimal!\n  eth_discount: BigDecimal!\n  frax_discount: BigDecimal!\n  id: ID!\n  lusd_discount: BigDecimal!\n  ohmdai_discount: BigDecimal!\n  ohmfrax_discount: BigDecimal!\n  ohmlusd_discount: BigDecimal!\n  timestamp: BigInt!\n}\n\ninput BondDiscount_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [BondDiscount_filter]\n  dai_discount: BigDecimal\n  dai_discount_gt: BigDecimal\n  dai_discount_gte: BigDecimal\n  dai_discount_in: [BigDecimal!]\n  dai_discount_lt: BigDecimal\n  dai_discount_lte: BigDecimal\n  dai_discount_not: BigDecimal\n  dai_discount_not_in: [BigDecimal!]\n  eth_discount: BigDecimal\n  eth_discount_gt: BigDecimal\n  eth_discount_gte: BigDecimal\n  eth_discount_in: [BigDecimal!]\n  eth_discount_lt: BigDecimal\n  eth_discount_lte: BigDecimal\n  eth_discount_not: BigDecimal\n  eth_discount_not_in: [BigDecimal!]\n  frax_discount: BigDecimal\n  frax_discount_gt: BigDecimal\n  frax_discount_gte: BigDecimal\n  frax_discount_in: [BigDecimal!]\n  frax_discount_lt: BigDecimal\n  frax_discount_lte: BigDecimal\n  frax_discount_not: BigDecimal\n  frax_discount_not_in: [BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  lusd_discount: BigDecimal\n  lusd_discount_gt: BigDecimal\n  lusd_discount_gte: BigDecimal\n  lusd_discount_in: [BigDecimal!]\n  lusd_discount_lt: BigDecimal\n  lusd_discount_lte: BigDecimal\n  lusd_discount_not: BigDecimal\n  lusd_discount_not_in: [BigDecimal!]\n  ohmdai_discount: BigDecimal\n  ohmdai_discount_gt: BigDecimal\n  ohmdai_discount_gte: BigDecimal\n  ohmdai_discount_in: [BigDecimal!]\n  ohmdai_discount_lt: BigDecimal\n  ohmdai_discount_lte: BigDecimal\n  ohmdai_discount_not: BigDecimal\n  ohmdai_discount_not_in: [BigDecimal!]\n  ohmfrax_discount: BigDecimal\n  ohmfrax_discount_gt: BigDecimal\n  ohmfrax_discount_gte: BigDecimal\n  ohmfrax_discount_in: [BigDecimal!]\n  ohmfrax_discount_lt: BigDecimal\n  ohmfrax_discount_lte: BigDecimal\n  ohmfrax_discount_not: BigDecimal\n  ohmfrax_discount_not_in: [BigDecimal!]\n  ohmlusd_discount: BigDecimal\n  ohmlusd_discount_gt: BigDecimal\n  ohmlusd_discount_gte: BigDecimal\n  ohmlusd_discount_in: [BigDecimal!]\n  ohmlusd_discount_lt: BigDecimal\n  ohmlusd_discount_lte: BigDecimal\n  ohmlusd_discount_not: BigDecimal\n  ohmlusd_discount_not_in: [BigDecimal!]\n  or: [BondDiscount_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n}\n\nenum BondDiscount_orderBy {\n  dai_discount\n  eth_discount\n  frax_discount\n  id\n  lusd_discount\n  ohmdai_discount\n  ohmfrax_discount\n  ohmlusd_discount\n  timestamp\n}\n\nscalar Bytes\n\ntype ConvexRewardPoolSnapshot {\n  address: Bytes!\n  block: BigInt!\n  id: ID!\n  stakingToken: Bytes!\n}\n\ninput ConvexRewardPoolSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  address: Bytes\n  address_contains: Bytes\n  address_gt: Bytes\n  address_gte: Bytes\n  address_in: [Bytes!]\n  address_lt: Bytes\n  address_lte: Bytes\n  address_not: Bytes\n  address_not_contains: Bytes\n  address_not_in: [Bytes!]\n  and: [ConvexRewardPoolSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [ConvexRewardPoolSnapshot_filter]\n  stakingToken: Bytes\n  stakingToken_contains: Bytes\n  stakingToken_gt: Bytes\n  stakingToken_gte: Bytes\n  stakingToken_in: [Bytes!]\n  stakingToken_lt: Bytes\n  stakingToken_lte: Bytes\n  stakingToken_not: Bytes\n  stakingToken_not_contains: Bytes\n  stakingToken_not_in: [Bytes!]\n}\n\nenum ConvexRewardPoolSnapshot_orderBy {\n  address\n  block\n  id\n  stakingToken\n}\n\ntype DailyBond {\n  amount: BigDecimal!\n  id: ID!\n  timestamp: BigInt!\n  token: Token!\n  value: BigDecimal!\n}\n\ninput DailyBond_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  amount: BigDecimal\n  amount_gt: BigDecimal\n  amount_gte: BigDecimal\n  amount_in: [BigDecimal!]\n  amount_lt: BigDecimal\n  amount_lte: BigDecimal\n  amount_not: BigDecimal\n  amount_not_in: [BigDecimal!]\n  and: [DailyBond_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [DailyBond_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  token_: Token_filter\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  value: BigDecimal\n  value_gt: BigDecimal\n  value_gte: BigDecimal\n  value_in: [BigDecimal!]\n  value_lt: BigDecimal\n  value_lte: BigDecimal\n  value_not: BigDecimal\n  value_not_in: [BigDecimal!]\n}\n\nenum DailyBond_orderBy {\n  amount\n  id\n  timestamp\n  token\n  token__id\n  value\n}\n\ntype DailyStakingReward {\n  amount: BigDecimal!\n  id: ID!\n  timestamp: BigInt!\n  value: BigDecimal!\n}\n\ninput DailyStakingReward_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  amount: BigDecimal\n  amount_gt: BigDecimal\n  amount_gte: BigDecimal\n  amount_in: [BigDecimal!]\n  amount_lt: BigDecimal\n  amount_lte: BigDecimal\n  amount_not: BigDecimal\n  amount_not_in: [BigDecimal!]\n  and: [DailyStakingReward_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [DailyStakingReward_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  value: BigDecimal\n  value_gt: BigDecimal\n  value_gte: BigDecimal\n  value_in: [BigDecimal!]\n  value_lt: BigDecimal\n  value_lte: BigDecimal\n  value_not: BigDecimal\n  value_not_in: [BigDecimal!]\n}\n\nenum DailyStakingReward_orderBy {\n  amount\n  id\n  timestamp\n  value\n}\n\ntype ERC20TokenSnapshot {\n  address: Bytes!\n  decimals: Int!\n  id: ID!\n  totalSupply: BigDecimal\n}\n\ninput ERC20TokenSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  address: Bytes\n  address_contains: Bytes\n  address_gt: Bytes\n  address_gte: Bytes\n  address_in: [Bytes!]\n  address_lt: Bytes\n  address_lte: Bytes\n  address_not: Bytes\n  address_not_contains: Bytes\n  address_not_in: [Bytes!]\n  and: [ERC20TokenSnapshot_filter]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [ERC20TokenSnapshot_filter]\n  totalSupply: BigDecimal\n  totalSupply_gt: BigDecimal\n  totalSupply_gte: BigDecimal\n  totalSupply_in: [BigDecimal!]\n  totalSupply_lt: BigDecimal\n  totalSupply_lte: BigDecimal\n  totalSupply_not: BigDecimal\n  totalSupply_not_in: [BigDecimal!]\n}\n\nenum ERC20TokenSnapshot_orderBy {\n  address\n  decimals\n  id\n  totalSupply\n}\n\ntype GnosisAuction {\n  auctionCloseTimestamp: BigInt\n  auctionOpenTimestamp: BigInt!\n  bidQuantity: BigDecimal\n  id: ID!\n  payoutCapacity: BigDecimal!\n  termSeconds: BigInt!\n}\n\ntype GnosisAuctionRoot {\n  id: ID!\n  markets: [BigInt!]!\n}\n\ninput GnosisAuctionRoot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [GnosisAuctionRoot_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  markets: [BigInt!]\n  markets_contains: [BigInt!]\n  markets_contains_nocase: [BigInt!]\n  markets_not: [BigInt!]\n  markets_not_contains: [BigInt!]\n  markets_not_contains_nocase: [BigInt!]\n  or: [GnosisAuctionRoot_filter]\n}\n\nenum GnosisAuctionRoot_orderBy {\n  id\n  markets\n}\n\ninput GnosisAuction_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [GnosisAuction_filter]\n  auctionCloseTimestamp: BigInt\n  auctionCloseTimestamp_gt: BigInt\n  auctionCloseTimestamp_gte: BigInt\n  auctionCloseTimestamp_in: [BigInt!]\n  auctionCloseTimestamp_lt: BigInt\n  auctionCloseTimestamp_lte: BigInt\n  auctionCloseTimestamp_not: BigInt\n  auctionCloseTimestamp_not_in: [BigInt!]\n  auctionOpenTimestamp: BigInt\n  auctionOpenTimestamp_gt: BigInt\n  auctionOpenTimestamp_gte: BigInt\n  auctionOpenTimestamp_in: [BigInt!]\n  auctionOpenTimestamp_lt: BigInt\n  auctionOpenTimestamp_lte: BigInt\n  auctionOpenTimestamp_not: BigInt\n  auctionOpenTimestamp_not_in: [BigInt!]\n  bidQuantity: BigDecimal\n  bidQuantity_gt: BigDecimal\n  bidQuantity_gte: BigDecimal\n  bidQuantity_in: [BigDecimal!]\n  bidQuantity_lt: BigDecimal\n  bidQuantity_lte: BigDecimal\n  bidQuantity_not: BigDecimal\n  bidQuantity_not_in: [BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [GnosisAuction_filter]\n  payoutCapacity: BigDecimal\n  payoutCapacity_gt: BigDecimal\n  payoutCapacity_gte: BigDecimal\n  payoutCapacity_in: [BigDecimal!]\n  payoutCapacity_lt: BigDecimal\n  payoutCapacity_lte: BigDecimal\n  payoutCapacity_not: BigDecimal\n  payoutCapacity_not_in: [BigDecimal!]\n  termSeconds: BigInt\n  termSeconds_gt: BigInt\n  termSeconds_gte: BigInt\n  termSeconds_in: [BigInt!]\n  termSeconds_lt: BigInt\n  termSeconds_lte: BigInt\n  termSeconds_not: BigInt\n  termSeconds_not_in: [BigInt!]\n}\n\nenum GnosisAuction_orderBy {\n  auctionCloseTimestamp\n  auctionOpenTimestamp\n  bidQuantity\n  id\n  payoutCapacity\n  termSeconds\n}\n\n\"\"\"Defines the order direction, either ascending or descending\"\"\"\nenum OrderDirection {\n  asc\n  desc\n}\n\ntype PoolSnapshot {\n  balances: [BigDecimal!]!\n  block: BigInt!\n  decimals: Int!\n  id: ID!\n  pool: Bytes!\n  poolToken: Bytes\n  tokens: [Bytes!]!\n  totalSupply: BigDecimal!\n  weights: [BigDecimal!]\n}\n\ninput PoolSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [PoolSnapshot_filter]\n  balances: [BigDecimal!]\n  balances_contains: [BigDecimal!]\n  balances_contains_nocase: [BigDecimal!]\n  balances_not: [BigDecimal!]\n  balances_not_contains: [BigDecimal!]\n  balances_not_contains_nocase: [BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [PoolSnapshot_filter]\n  pool: Bytes\n  poolToken: Bytes\n  poolToken_contains: Bytes\n  poolToken_gt: Bytes\n  poolToken_gte: Bytes\n  poolToken_in: [Bytes!]\n  poolToken_lt: Bytes\n  poolToken_lte: Bytes\n  poolToken_not: Bytes\n  poolToken_not_contains: Bytes\n  poolToken_not_in: [Bytes!]\n  pool_contains: Bytes\n  pool_gt: Bytes\n  pool_gte: Bytes\n  pool_in: [Bytes!]\n  pool_lt: Bytes\n  pool_lte: Bytes\n  pool_not: Bytes\n  pool_not_contains: Bytes\n  pool_not_in: [Bytes!]\n  tokens: [Bytes!]\n  tokens_contains: [Bytes!]\n  tokens_contains_nocase: [Bytes!]\n  tokens_not: [Bytes!]\n  tokens_not_contains: [Bytes!]\n  tokens_not_contains_nocase: [Bytes!]\n  totalSupply: BigDecimal\n  totalSupply_gt: BigDecimal\n  totalSupply_gte: BigDecimal\n  totalSupply_in: [BigDecimal!]\n  totalSupply_lt: BigDecimal\n  totalSupply_lte: BigDecimal\n  totalSupply_not: BigDecimal\n  totalSupply_not_in: [BigDecimal!]\n  weights: [BigDecimal!]\n  weights_contains: [BigDecimal!]\n  weights_contains_nocase: [BigDecimal!]\n  weights_not: [BigDecimal!]\n  weights_not_contains: [BigDecimal!]\n  weights_not_contains_nocase: [BigDecimal!]\n}\n\nenum PoolSnapshot_orderBy {\n  balances\n  block\n  decimals\n  id\n  pool\n  poolToken\n  tokens\n  totalSupply\n  weights\n}\n\ntype PriceSnapshot {\n  block: BigInt!\n  date: String!\n  id: ID!\n  priceGOhm: BigDecimal!\n  priceOhm: BigDecimal!\n  timestamp: BigInt!\n}\n\ninput PriceSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [PriceSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [PriceSnapshot_filter]\n  priceGOhm: BigDecimal\n  priceGOhm_gt: BigDecimal\n  priceGOhm_gte: BigDecimal\n  priceGOhm_in: [BigDecimal!]\n  priceGOhm_lt: BigDecimal\n  priceGOhm_lte: BigDecimal\n  priceGOhm_not: BigDecimal\n  priceGOhm_not_in: [BigDecimal!]\n  priceOhm: BigDecimal\n  priceOhm_gt: BigDecimal\n  priceOhm_gte: BigDecimal\n  priceOhm_in: [BigDecimal!]\n  priceOhm_lt: BigDecimal\n  priceOhm_lte: BigDecimal\n  priceOhm_not: BigDecimal\n  priceOhm_not_in: [BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n}\n\nenum PriceSnapshot_orderBy {\n  block\n  date\n  id\n  priceGOhm\n  priceOhm\n  timestamp\n}\n\ntype ProtocolMetric {\n  block: BigInt!\n  currentAPY: BigDecimal!\n  currentIndex: BigDecimal!\n  date: String!\n  gOhmPrice: BigDecimal!\n  gOhmSyntheticSupply: BigDecimal\n  gOhmTotalSupply: BigDecimal!\n  id: ID!\n  marketCap: BigDecimal\n  nextDistributedOhm: BigDecimal!\n  nextEpochRebase: BigDecimal!\n  ohmCirculatingSupply: BigDecimal\n  ohmFloatingSupply: BigDecimal\n  ohmPrice: BigDecimal!\n  ohmTotalSupply: BigDecimal!\n  sOhmCirculatingSupply: BigDecimal!\n  timestamp: BigInt!\n  totalValueLocked: BigDecimal!\n  treasuryLiquidBacking: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic: BigDecimal\n  treasuryLiquidBackingPerOhmFloating: BigDecimal\n  treasuryMarketValue: BigDecimal\n}\n\ninput ProtocolMetric_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [ProtocolMetric_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  currentAPY: BigDecimal\n  currentAPY_gt: BigDecimal\n  currentAPY_gte: BigDecimal\n  currentAPY_in: [BigDecimal!]\n  currentAPY_lt: BigDecimal\n  currentAPY_lte: BigDecimal\n  currentAPY_not: BigDecimal\n  currentAPY_not_in: [BigDecimal!]\n  currentIndex: BigDecimal\n  currentIndex_gt: BigDecimal\n  currentIndex_gte: BigDecimal\n  currentIndex_in: [BigDecimal!]\n  currentIndex_lt: BigDecimal\n  currentIndex_lte: BigDecimal\n  currentIndex_not: BigDecimal\n  currentIndex_not_in: [BigDecimal!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  gOhmPrice: BigDecimal\n  gOhmPrice_gt: BigDecimal\n  gOhmPrice_gte: BigDecimal\n  gOhmPrice_in: [BigDecimal!]\n  gOhmPrice_lt: BigDecimal\n  gOhmPrice_lte: BigDecimal\n  gOhmPrice_not: BigDecimal\n  gOhmPrice_not_in: [BigDecimal!]\n  gOhmSyntheticSupply: BigDecimal\n  gOhmSyntheticSupply_gt: BigDecimal\n  gOhmSyntheticSupply_gte: BigDecimal\n  gOhmSyntheticSupply_in: [BigDecimal!]\n  gOhmSyntheticSupply_lt: BigDecimal\n  gOhmSyntheticSupply_lte: BigDecimal\n  gOhmSyntheticSupply_not: BigDecimal\n  gOhmSyntheticSupply_not_in: [BigDecimal!]\n  gOhmTotalSupply: BigDecimal\n  gOhmTotalSupply_gt: BigDecimal\n  gOhmTotalSupply_gte: BigDecimal\n  gOhmTotalSupply_in: [BigDecimal!]\n  gOhmTotalSupply_lt: BigDecimal\n  gOhmTotalSupply_lte: BigDecimal\n  gOhmTotalSupply_not: BigDecimal\n  gOhmTotalSupply_not_in: [BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  marketCap: BigDecimal\n  marketCap_gt: BigDecimal\n  marketCap_gte: BigDecimal\n  marketCap_in: [BigDecimal!]\n  marketCap_lt: BigDecimal\n  marketCap_lte: BigDecimal\n  marketCap_not: BigDecimal\n  marketCap_not_in: [BigDecimal!]\n  nextDistributedOhm: BigDecimal\n  nextDistributedOhm_gt: BigDecimal\n  nextDistributedOhm_gte: BigDecimal\n  nextDistributedOhm_in: [BigDecimal!]\n  nextDistributedOhm_lt: BigDecimal\n  nextDistributedOhm_lte: BigDecimal\n  nextDistributedOhm_not: BigDecimal\n  nextDistributedOhm_not_in: [BigDecimal!]\n  nextEpochRebase: BigDecimal\n  nextEpochRebase_gt: BigDecimal\n  nextEpochRebase_gte: BigDecimal\n  nextEpochRebase_in: [BigDecimal!]\n  nextEpochRebase_lt: BigDecimal\n  nextEpochRebase_lte: BigDecimal\n  nextEpochRebase_not: BigDecimal\n  nextEpochRebase_not_in: [BigDecimal!]\n  ohmCirculatingSupply: BigDecimal\n  ohmCirculatingSupply_gt: BigDecimal\n  ohmCirculatingSupply_gte: BigDecimal\n  ohmCirculatingSupply_in: [BigDecimal!]\n  ohmCirculatingSupply_lt: BigDecimal\n  ohmCirculatingSupply_lte: BigDecimal\n  ohmCirculatingSupply_not: BigDecimal\n  ohmCirculatingSupply_not_in: [BigDecimal!]\n  ohmFloatingSupply: BigDecimal\n  ohmFloatingSupply_gt: BigDecimal\n  ohmFloatingSupply_gte: BigDecimal\n  ohmFloatingSupply_in: [BigDecimal!]\n  ohmFloatingSupply_lt: BigDecimal\n  ohmFloatingSupply_lte: BigDecimal\n  ohmFloatingSupply_not: BigDecimal\n  ohmFloatingSupply_not_in: [BigDecimal!]\n  ohmPrice: BigDecimal\n  ohmPrice_gt: BigDecimal\n  ohmPrice_gte: BigDecimal\n  ohmPrice_in: [BigDecimal!]\n  ohmPrice_lt: BigDecimal\n  ohmPrice_lte: BigDecimal\n  ohmPrice_not: BigDecimal\n  ohmPrice_not_in: [BigDecimal!]\n  ohmTotalSupply: BigDecimal\n  ohmTotalSupply_gt: BigDecimal\n  ohmTotalSupply_gte: BigDecimal\n  ohmTotalSupply_in: [BigDecimal!]\n  ohmTotalSupply_lt: BigDecimal\n  ohmTotalSupply_lte: BigDecimal\n  ohmTotalSupply_not: BigDecimal\n  ohmTotalSupply_not_in: [BigDecimal!]\n  or: [ProtocolMetric_filter]\n  sOhmCirculatingSupply: BigDecimal\n  sOhmCirculatingSupply_gt: BigDecimal\n  sOhmCirculatingSupply_gte: BigDecimal\n  sOhmCirculatingSupply_in: [BigDecimal!]\n  sOhmCirculatingSupply_lt: BigDecimal\n  sOhmCirculatingSupply_lte: BigDecimal\n  sOhmCirculatingSupply_not: BigDecimal\n  sOhmCirculatingSupply_not_in: [BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  totalValueLocked: BigDecimal\n  totalValueLocked_gt: BigDecimal\n  totalValueLocked_gte: BigDecimal\n  totalValueLocked_in: [BigDecimal!]\n  totalValueLocked_lt: BigDecimal\n  totalValueLocked_lte: BigDecimal\n  totalValueLocked_not: BigDecimal\n  totalValueLocked_not_in: [BigDecimal!]\n  treasuryLiquidBacking: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_gt: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_gte: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_in: [BigDecimal!]\n  treasuryLiquidBackingPerGOhmSynthetic_lt: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_lte: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_not: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_not_in: [BigDecimal!]\n  treasuryLiquidBackingPerOhmFloating: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_gt: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_gte: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_in: [BigDecimal!]\n  treasuryLiquidBackingPerOhmFloating_lt: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_lte: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_not: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_not_in: [BigDecimal!]\n  treasuryLiquidBacking_gt: BigDecimal\n  treasuryLiquidBacking_gte: BigDecimal\n  treasuryLiquidBacking_in: [BigDecimal!]\n  treasuryLiquidBacking_lt: BigDecimal\n  treasuryLiquidBacking_lte: BigDecimal\n  treasuryLiquidBacking_not: BigDecimal\n  treasuryLiquidBacking_not_in: [BigDecimal!]\n  treasuryMarketValue: BigDecimal\n  treasuryMarketValue_gt: BigDecimal\n  treasuryMarketValue_gte: BigDecimal\n  treasuryMarketValue_in: [BigDecimal!]\n  treasuryMarketValue_lt: BigDecimal\n  treasuryMarketValue_lte: BigDecimal\n  treasuryMarketValue_not: BigDecimal\n  treasuryMarketValue_not_in: [BigDecimal!]\n}\n\nenum ProtocolMetric_orderBy {\n  block\n  currentAPY\n  currentIndex\n  date\n  gOhmPrice\n  gOhmSyntheticSupply\n  gOhmTotalSupply\n  id\n  marketCap\n  nextDistributedOhm\n  nextEpochRebase\n  ohmCirculatingSupply\n  ohmFloatingSupply\n  ohmPrice\n  ohmTotalSupply\n  sOhmCirculatingSupply\n  timestamp\n  totalValueLocked\n  treasuryLiquidBacking\n  treasuryLiquidBackingPerGOhmSynthetic\n  treasuryLiquidBackingPerOhmFloating\n  treasuryMarketValue\n}\n\ntype Query {\n  \"Access to subgraph metadata\"\n  _meta(block: Block_height): _Meta_\n  balancerPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): BalancerPoolSnapshot\n  balancerPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: BalancerPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: BalancerPoolSnapshot_filter\n  ): [BalancerPoolSnapshot!]!\n  bondDiscount(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): BondDiscount\n  bondDiscounts(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: BondDiscount_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: BondDiscount_filter\n  ): [BondDiscount!]!\n  convexRewardPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ConvexRewardPoolSnapshot\n  convexRewardPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ConvexRewardPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ConvexRewardPoolSnapshot_filter\n  ): [ConvexRewardPoolSnapshot!]!\n  dailyBond(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): DailyBond\n  dailyBonds(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: DailyBond_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: DailyBond_filter\n  ): [DailyBond!]!\n  dailyStakingReward(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): DailyStakingReward\n  dailyStakingRewards(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: DailyStakingReward_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: DailyStakingReward_filter\n  ): [DailyStakingReward!]!\n  erc20TokenSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ERC20TokenSnapshot\n  erc20TokenSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ERC20TokenSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ERC20TokenSnapshot_filter\n  ): [ERC20TokenSnapshot!]!\n  gnosisAuction(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): GnosisAuction\n  gnosisAuctionRoot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): GnosisAuctionRoot\n  gnosisAuctionRoots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: GnosisAuctionRoot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: GnosisAuctionRoot_filter\n  ): [GnosisAuctionRoot!]!\n  gnosisAuctions(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: GnosisAuction_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: GnosisAuction_filter\n  ): [GnosisAuction!]!\n  poolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PoolSnapshot\n  poolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: PoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: PoolSnapshot_filter\n  ): [PoolSnapshot!]!\n  priceSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PriceSnapshot\n  priceSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: PriceSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: PriceSnapshot_filter\n  ): [PriceSnapshot!]!\n  protocolMetric(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ProtocolMetric\n  protocolMetrics(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ProtocolMetric_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ProtocolMetric_filter\n  ): [ProtocolMetric!]!\n  rebase(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Rebase\n  rebases(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: Rebase_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: Rebase_filter\n  ): [Rebase!]!\n  stakingPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): StakingPoolSnapshot\n  stakingPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: StakingPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: StakingPoolSnapshot_filter\n  ): [StakingPoolSnapshot!]!\n  token(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Token\n  tokenPriceSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenPriceSnapshot\n  tokenPriceSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenPriceSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenPriceSnapshot_filter\n  ): [TokenPriceSnapshot!]!\n  tokenRecord(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenRecord\n  tokenRecords(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenRecord_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenRecord_filter\n  ): [TokenRecord!]!\n  tokenSupplies(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenSupply_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenSupply_filter\n  ): [TokenSupply!]!\n  tokenSupply(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenSupply\n  tokens(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: Token_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: Token_filter\n  ): [Token!]!\n}\n\ntype Rebase {\n  amount: BigDecimal!\n  contract: String!\n  id: ID!\n  percentage: BigDecimal!\n  stakedOhms: BigDecimal!\n  timestamp: BigInt!\n  value: BigDecimal!\n}\n\ninput Rebase_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  amount: BigDecimal\n  amount_gt: BigDecimal\n  amount_gte: BigDecimal\n  amount_in: [BigDecimal!]\n  amount_lt: BigDecimal\n  amount_lte: BigDecimal\n  amount_not: BigDecimal\n  amount_not_in: [BigDecimal!]\n  and: [Rebase_filter]\n  contract: String\n  contract_contains: String\n  contract_contains_nocase: String\n  contract_ends_with: String\n  contract_ends_with_nocase: String\n  contract_gt: String\n  contract_gte: String\n  contract_in: [String!]\n  contract_lt: String\n  contract_lte: String\n  contract_not: String\n  contract_not_contains: String\n  contract_not_contains_nocase: String\n  contract_not_ends_with: String\n  contract_not_ends_with_nocase: String\n  contract_not_in: [String!]\n  contract_not_starts_with: String\n  contract_not_starts_with_nocase: String\n  contract_starts_with: String\n  contract_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [Rebase_filter]\n  percentage: BigDecimal\n  percentage_gt: BigDecimal\n  percentage_gte: BigDecimal\n  percentage_in: [BigDecimal!]\n  percentage_lt: BigDecimal\n  percentage_lte: BigDecimal\n  percentage_not: BigDecimal\n  percentage_not_in: [BigDecimal!]\n  stakedOhms: BigDecimal\n  stakedOhms_gt: BigDecimal\n  stakedOhms_gte: BigDecimal\n  stakedOhms_in: [BigDecimal!]\n  stakedOhms_lt: BigDecimal\n  stakedOhms_lte: BigDecimal\n  stakedOhms_not: BigDecimal\n  stakedOhms_not_in: [BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  value: BigDecimal\n  value_gt: BigDecimal\n  value_gte: BigDecimal\n  value_in: [BigDecimal!]\n  value_lt: BigDecimal\n  value_lte: BigDecimal\n  value_not: BigDecimal\n  value_not_in: [BigDecimal!]\n}\n\nenum Rebase_orderBy {\n  amount\n  contract\n  id\n  percentage\n  stakedOhms\n  timestamp\n  value\n}\n\ntype StakingPoolSnapshot {\n  block: BigInt!\n  contractAddress: Bytes!\n  id: ID!\n  stakingToken: Bytes\n}\n\ninput StakingPoolSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [StakingPoolSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  contractAddress: Bytes\n  contractAddress_contains: Bytes\n  contractAddress_gt: Bytes\n  contractAddress_gte: Bytes\n  contractAddress_in: [Bytes!]\n  contractAddress_lt: Bytes\n  contractAddress_lte: Bytes\n  contractAddress_not: Bytes\n  contractAddress_not_contains: Bytes\n  contractAddress_not_in: [Bytes!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [StakingPoolSnapshot_filter]\n  stakingToken: Bytes\n  stakingToken_contains: Bytes\n  stakingToken_gt: Bytes\n  stakingToken_gte: Bytes\n  stakingToken_in: [Bytes!]\n  stakingToken_lt: Bytes\n  stakingToken_lte: Bytes\n  stakingToken_not: Bytes\n  stakingToken_not_contains: Bytes\n  stakingToken_not_in: [Bytes!]\n}\n\nenum StakingPoolSnapshot_orderBy {\n  block\n  contractAddress\n  id\n  stakingToken\n}\n\ntype Subscription {\n  \"Access to subgraph metadata\"\n  _meta(block: Block_height): _Meta_\n  balancerPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): BalancerPoolSnapshot\n  balancerPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: BalancerPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: BalancerPoolSnapshot_filter\n  ): [BalancerPoolSnapshot!]!\n  bondDiscount(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): BondDiscount\n  bondDiscounts(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: BondDiscount_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: BondDiscount_filter\n  ): [BondDiscount!]!\n  convexRewardPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ConvexRewardPoolSnapshot\n  convexRewardPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ConvexRewardPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ConvexRewardPoolSnapshot_filter\n  ): [ConvexRewardPoolSnapshot!]!\n  dailyBond(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): DailyBond\n  dailyBonds(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: DailyBond_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: DailyBond_filter\n  ): [DailyBond!]!\n  dailyStakingReward(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): DailyStakingReward\n  dailyStakingRewards(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: DailyStakingReward_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: DailyStakingReward_filter\n  ): [DailyStakingReward!]!\n  erc20TokenSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ERC20TokenSnapshot\n  erc20TokenSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ERC20TokenSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ERC20TokenSnapshot_filter\n  ): [ERC20TokenSnapshot!]!\n  gnosisAuction(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): GnosisAuction\n  gnosisAuctionRoot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): GnosisAuctionRoot\n  gnosisAuctionRoots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: GnosisAuctionRoot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: GnosisAuctionRoot_filter\n  ): [GnosisAuctionRoot!]!\n  gnosisAuctions(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: GnosisAuction_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: GnosisAuction_filter\n  ): [GnosisAuction!]!\n  poolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PoolSnapshot\n  poolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: PoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: PoolSnapshot_filter\n  ): [PoolSnapshot!]!\n  priceSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PriceSnapshot\n  priceSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: PriceSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: PriceSnapshot_filter\n  ): [PriceSnapshot!]!\n  protocolMetric(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ProtocolMetric\n  protocolMetrics(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ProtocolMetric_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ProtocolMetric_filter\n  ): [ProtocolMetric!]!\n  rebase(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Rebase\n  rebases(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: Rebase_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: Rebase_filter\n  ): [Rebase!]!\n  stakingPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): StakingPoolSnapshot\n  stakingPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: StakingPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: StakingPoolSnapshot_filter\n  ): [StakingPoolSnapshot!]!\n  token(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Token\n  tokenPriceSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenPriceSnapshot\n  tokenPriceSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenPriceSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenPriceSnapshot_filter\n  ): [TokenPriceSnapshot!]!\n  tokenRecord(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenRecord\n  tokenRecords(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenRecord_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenRecord_filter\n  ): [TokenRecord!]!\n  tokenSupplies(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenSupply_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenSupply_filter\n  ): [TokenSupply!]!\n  tokenSupply(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenSupply\n  tokens(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: Token_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: Token_filter\n  ): [Token!]!\n}\n\ntype Token {\n  id: ID!\n}\n\ntype TokenPriceSnapshot {\n  block: BigInt!\n  id: ID!\n  price: BigDecimal!\n  token: Bytes!\n}\n\ninput TokenPriceSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [TokenPriceSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [TokenPriceSnapshot_filter]\n  price: BigDecimal\n  price_gt: BigDecimal\n  price_gte: BigDecimal\n  price_in: [BigDecimal!]\n  price_lt: BigDecimal\n  price_lte: BigDecimal\n  price_not: BigDecimal\n  price_not_in: [BigDecimal!]\n  token: Bytes\n  token_contains: Bytes\n  token_gt: Bytes\n  token_gte: Bytes\n  token_in: [Bytes!]\n  token_lt: Bytes\n  token_lte: Bytes\n  token_not: Bytes\n  token_not_contains: Bytes\n  token_not_in: [Bytes!]\n}\n\nenum TokenPriceSnapshot_orderBy {\n  block\n  id\n  price\n  token\n}\n\ntype TokenRecord {\n  balance: BigDecimal!\n  block: BigInt!\n  blockchain: String!\n  category: String!\n  date: String!\n  id: ID!\n  isBluechip: Boolean!\n  isLiquid: Boolean!\n  multiplier: BigDecimal!\n  rate: BigDecimal!\n  source: String!\n  sourceAddress: String!\n  timestamp: BigInt!\n  token: String!\n  tokenAddress: String!\n  value: BigDecimal!\n  valueExcludingOhm: BigDecimal!\n}\n\ninput TokenRecord_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [TokenRecord_filter]\n  balance: BigDecimal\n  balance_gt: BigDecimal\n  balance_gte: BigDecimal\n  balance_in: [BigDecimal!]\n  balance_lt: BigDecimal\n  balance_lte: BigDecimal\n  balance_not: BigDecimal\n  balance_not_in: [BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  blockchain: String\n  blockchain_contains: String\n  blockchain_contains_nocase: String\n  blockchain_ends_with: String\n  blockchain_ends_with_nocase: String\n  blockchain_gt: String\n  blockchain_gte: String\n  blockchain_in: [String!]\n  blockchain_lt: String\n  blockchain_lte: String\n  blockchain_not: String\n  blockchain_not_contains: String\n  blockchain_not_contains_nocase: String\n  blockchain_not_ends_with: String\n  blockchain_not_ends_with_nocase: String\n  blockchain_not_in: [String!]\n  blockchain_not_starts_with: String\n  blockchain_not_starts_with_nocase: String\n  blockchain_starts_with: String\n  blockchain_starts_with_nocase: String\n  category: String\n  category_contains: String\n  category_contains_nocase: String\n  category_ends_with: String\n  category_ends_with_nocase: String\n  category_gt: String\n  category_gte: String\n  category_in: [String!]\n  category_lt: String\n  category_lte: String\n  category_not: String\n  category_not_contains: String\n  category_not_contains_nocase: String\n  category_not_ends_with: String\n  category_not_ends_with_nocase: String\n  category_not_in: [String!]\n  category_not_starts_with: String\n  category_not_starts_with_nocase: String\n  category_starts_with: String\n  category_starts_with_nocase: String\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  isBluechip: Boolean\n  isBluechip_in: [Boolean!]\n  isBluechip_not: Boolean\n  isBluechip_not_in: [Boolean!]\n  isLiquid: Boolean\n  isLiquid_in: [Boolean!]\n  isLiquid_not: Boolean\n  isLiquid_not_in: [Boolean!]\n  multiplier: BigDecimal\n  multiplier_gt: BigDecimal\n  multiplier_gte: BigDecimal\n  multiplier_in: [BigDecimal!]\n  multiplier_lt: BigDecimal\n  multiplier_lte: BigDecimal\n  multiplier_not: BigDecimal\n  multiplier_not_in: [BigDecimal!]\n  or: [TokenRecord_filter]\n  rate: BigDecimal\n  rate_gt: BigDecimal\n  rate_gte: BigDecimal\n  rate_in: [BigDecimal!]\n  rate_lt: BigDecimal\n  rate_lte: BigDecimal\n  rate_not: BigDecimal\n  rate_not_in: [BigDecimal!]\n  source: String\n  sourceAddress: String\n  sourceAddress_contains: String\n  sourceAddress_contains_nocase: String\n  sourceAddress_ends_with: String\n  sourceAddress_ends_with_nocase: String\n  sourceAddress_gt: String\n  sourceAddress_gte: String\n  sourceAddress_in: [String!]\n  sourceAddress_lt: String\n  sourceAddress_lte: String\n  sourceAddress_not: String\n  sourceAddress_not_contains: String\n  sourceAddress_not_contains_nocase: String\n  sourceAddress_not_ends_with: String\n  sourceAddress_not_ends_with_nocase: String\n  sourceAddress_not_in: [String!]\n  sourceAddress_not_starts_with: String\n  sourceAddress_not_starts_with_nocase: String\n  sourceAddress_starts_with: String\n  sourceAddress_starts_with_nocase: String\n  source_contains: String\n  source_contains_nocase: String\n  source_ends_with: String\n  source_ends_with_nocase: String\n  source_gt: String\n  source_gte: String\n  source_in: [String!]\n  source_lt: String\n  source_lte: String\n  source_not: String\n  source_not_contains: String\n  source_not_contains_nocase: String\n  source_not_ends_with: String\n  source_not_ends_with_nocase: String\n  source_not_in: [String!]\n  source_not_starts_with: String\n  source_not_starts_with_nocase: String\n  source_starts_with: String\n  source_starts_with_nocase: String\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  tokenAddress: String\n  tokenAddress_contains: String\n  tokenAddress_contains_nocase: String\n  tokenAddress_ends_with: String\n  tokenAddress_ends_with_nocase: String\n  tokenAddress_gt: String\n  tokenAddress_gte: String\n  tokenAddress_in: [String!]\n  tokenAddress_lt: String\n  tokenAddress_lte: String\n  tokenAddress_not: String\n  tokenAddress_not_contains: String\n  tokenAddress_not_contains_nocase: String\n  tokenAddress_not_ends_with: String\n  tokenAddress_not_ends_with_nocase: String\n  tokenAddress_not_in: [String!]\n  tokenAddress_not_starts_with: String\n  tokenAddress_not_starts_with_nocase: String\n  tokenAddress_starts_with: String\n  tokenAddress_starts_with_nocase: String\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  value: BigDecimal\n  valueExcludingOhm: BigDecimal\n  valueExcludingOhm_gt: BigDecimal\n  valueExcludingOhm_gte: BigDecimal\n  valueExcludingOhm_in: [BigDecimal!]\n  valueExcludingOhm_lt: BigDecimal\n  valueExcludingOhm_lte: BigDecimal\n  valueExcludingOhm_not: BigDecimal\n  valueExcludingOhm_not_in: [BigDecimal!]\n  value_gt: BigDecimal\n  value_gte: BigDecimal\n  value_in: [BigDecimal!]\n  value_lt: BigDecimal\n  value_lte: BigDecimal\n  value_not: BigDecimal\n  value_not_in: [BigDecimal!]\n}\n\nenum TokenRecord_orderBy {\n  balance\n  block\n  blockchain\n  category\n  date\n  id\n  isBluechip\n  isLiquid\n  multiplier\n  rate\n  source\n  sourceAddress\n  timestamp\n  token\n  tokenAddress\n  value\n  valueExcludingOhm\n}\n\ntype TokenSupply {\n  balance: BigDecimal!\n  block: BigInt!\n  date: String!\n  id: ID!\n  pool: String\n  poolAddress: String\n  source: String\n  sourceAddress: String\n  supplyBalance: BigDecimal!\n  timestamp: BigInt!\n  token: String!\n  tokenAddress: String!\n  type: String!\n}\n\ninput TokenSupply_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [TokenSupply_filter]\n  balance: BigDecimal\n  balance_gt: BigDecimal\n  balance_gte: BigDecimal\n  balance_in: [BigDecimal!]\n  balance_lt: BigDecimal\n  balance_lte: BigDecimal\n  balance_not: BigDecimal\n  balance_not_in: [BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [TokenSupply_filter]\n  pool: String\n  poolAddress: String\n  poolAddress_contains: String\n  poolAddress_contains_nocase: String\n  poolAddress_ends_with: String\n  poolAddress_ends_with_nocase: String\n  poolAddress_gt: String\n  poolAddress_gte: String\n  poolAddress_in: [String!]\n  poolAddress_lt: String\n  poolAddress_lte: String\n  poolAddress_not: String\n  poolAddress_not_contains: String\n  poolAddress_not_contains_nocase: String\n  poolAddress_not_ends_with: String\n  poolAddress_not_ends_with_nocase: String\n  poolAddress_not_in: [String!]\n  poolAddress_not_starts_with: String\n  poolAddress_not_starts_with_nocase: String\n  poolAddress_starts_with: String\n  poolAddress_starts_with_nocase: String\n  pool_contains: String\n  pool_contains_nocase: String\n  pool_ends_with: String\n  pool_ends_with_nocase: String\n  pool_gt: String\n  pool_gte: String\n  pool_in: [String!]\n  pool_lt: String\n  pool_lte: String\n  pool_not: String\n  pool_not_contains: String\n  pool_not_contains_nocase: String\n  pool_not_ends_with: String\n  pool_not_ends_with_nocase: String\n  pool_not_in: [String!]\n  pool_not_starts_with: String\n  pool_not_starts_with_nocase: String\n  pool_starts_with: String\n  pool_starts_with_nocase: String\n  source: String\n  sourceAddress: String\n  sourceAddress_contains: String\n  sourceAddress_contains_nocase: String\n  sourceAddress_ends_with: String\n  sourceAddress_ends_with_nocase: String\n  sourceAddress_gt: String\n  sourceAddress_gte: String\n  sourceAddress_in: [String!]\n  sourceAddress_lt: String\n  sourceAddress_lte: String\n  sourceAddress_not: String\n  sourceAddress_not_contains: String\n  sourceAddress_not_contains_nocase: String\n  sourceAddress_not_ends_with: String\n  sourceAddress_not_ends_with_nocase: String\n  sourceAddress_not_in: [String!]\n  sourceAddress_not_starts_with: String\n  sourceAddress_not_starts_with_nocase: String\n  sourceAddress_starts_with: String\n  sourceAddress_starts_with_nocase: String\n  source_contains: String\n  source_contains_nocase: String\n  source_ends_with: String\n  source_ends_with_nocase: String\n  source_gt: String\n  source_gte: String\n  source_in: [String!]\n  source_lt: String\n  source_lte: String\n  source_not: String\n  source_not_contains: String\n  source_not_contains_nocase: String\n  source_not_ends_with: String\n  source_not_ends_with_nocase: String\n  source_not_in: [String!]\n  source_not_starts_with: String\n  source_not_starts_with_nocase: String\n  source_starts_with: String\n  source_starts_with_nocase: String\n  supplyBalance: BigDecimal\n  supplyBalance_gt: BigDecimal\n  supplyBalance_gte: BigDecimal\n  supplyBalance_in: [BigDecimal!]\n  supplyBalance_lt: BigDecimal\n  supplyBalance_lte: BigDecimal\n  supplyBalance_not: BigDecimal\n  supplyBalance_not_in: [BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  tokenAddress: String\n  tokenAddress_contains: String\n  tokenAddress_contains_nocase: String\n  tokenAddress_ends_with: String\n  tokenAddress_ends_with_nocase: String\n  tokenAddress_gt: String\n  tokenAddress_gte: String\n  tokenAddress_in: [String!]\n  tokenAddress_lt: String\n  tokenAddress_lte: String\n  tokenAddress_not: String\n  tokenAddress_not_contains: String\n  tokenAddress_not_contains_nocase: String\n  tokenAddress_not_ends_with: String\n  tokenAddress_not_ends_with_nocase: String\n  tokenAddress_not_in: [String!]\n  tokenAddress_not_starts_with: String\n  tokenAddress_not_starts_with_nocase: String\n  tokenAddress_starts_with: String\n  tokenAddress_starts_with_nocase: String\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  type: String\n  type_contains: String\n  type_contains_nocase: String\n  type_ends_with: String\n  type_ends_with_nocase: String\n  type_gt: String\n  type_gte: String\n  type_in: [String!]\n  type_lt: String\n  type_lte: String\n  type_not: String\n  type_not_contains: String\n  type_not_contains_nocase: String\n  type_not_ends_with: String\n  type_not_ends_with_nocase: String\n  type_not_in: [String!]\n  type_not_starts_with: String\n  type_not_starts_with_nocase: String\n  type_starts_with: String\n  type_starts_with_nocase: String\n}\n\nenum TokenSupply_orderBy {\n  balance\n  block\n  date\n  id\n  pool\n  poolAddress\n  source\n  sourceAddress\n  supplyBalance\n  timestamp\n  token\n  tokenAddress\n  type\n}\n\ninput Token_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [Token_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [Token_filter]\n}\n\nenum Token_orderBy {\n  id\n}\n\ntype _Block_ {\n  \"The hash of the block\"\n  hash: Bytes\n  \"The block number\"\n  number: Int!\n  \"Integer representation of the timestamp stored in blocks for the chain\"\n  timestamp: Int\n}\n\n\"\"\"The type for the top-level _meta field\"\"\"\ntype _Meta_ {\n  \"Information about a specific subgraph block. The hash of the block\\nwill be null if the _meta field has a block constraint that asks for\\na block number. It will be filled if the _meta field has no block constraint\\nand therefore asks for the latest  block\\n\"\n  block: _Block_!\n  \"The deployment ID\"\n  deployment: String!\n  \"If `true`, the subgraph encountered indexing errors at some past block\"\n  hasIndexingErrors: Boolean!\n}\n\nenum _SubgraphErrorPolicy_ {\n  \"\"\"Data will be returned even if the subgraph has indexing errors\"\"\"\n  allow\n  \"\"\"\n  If the subgraph has indexing errors, data will be omitted. The default.\n  \"\"\"\n  deny\n}",
            "hooksConfiguration": {
              "onWSTransportConnectionInit": false
            },
            "customScalarTypeFields": []
          },
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "treasuryEthereum__meta",
                "treasuryEthereum_balancerPoolSnapshot",
                "treasuryEthereum_balancerPoolSnapshots",
                "treasuryEthereum_bondDiscount",
                "treasuryEthereum_bondDiscounts",
                "treasuryEthereum_convexRewardPoolSnapshot",
                "treasuryEthereum_convexRewardPoolSnapshots",
                "treasuryEthereum_dailyBond",
                "treasuryEthereum_dailyBonds",
                "treasuryEthereum_dailyStakingReward",
                "treasuryEthereum_dailyStakingRewards",
                "treasuryEthereum_erc20TokenSnapshot",
                "treasuryEthereum_erc20TokenSnapshots",
                "treasuryEthereum_gnosisAuction",
                "treasuryEthereum_gnosisAuctionRoot",
                "treasuryEthereum_gnosisAuctionRoots",
                "treasuryEthereum_gnosisAuctions",
                "treasuryEthereum_poolSnapshot",
                "treasuryEthereum_poolSnapshots",
                "treasuryEthereum_priceSnapshot",
                "treasuryEthereum_priceSnapshots",
                "treasuryEthereum_protocolMetric",
                "treasuryEthereum_protocolMetrics",
                "treasuryEthereum_rebase",
                "treasuryEthereum_rebases",
                "treasuryEthereum_stakingPoolSnapshot",
                "treasuryEthereum_stakingPoolSnapshots",
                "treasuryEthereum_token",
                "treasuryEthereum_tokenPriceSnapshot",
                "treasuryEthereum_tokenPriceSnapshots",
                "treasuryEthereum_tokenRecord",
                "treasuryEthereum_tokenRecords",
                "treasuryEthereum_tokenSupplies",
                "treasuryEthereum_tokenSupply",
                "treasuryEthereum_tokens"
              ]
            },
            {
              "typeName": "Subscription",
              "fieldNames": [
                "treasuryEthereum__meta",
                "treasuryEthereum_balancerPoolSnapshot",
                "treasuryEthereum_balancerPoolSnapshots",
                "treasuryEthereum_bondDiscount",
                "treasuryEthereum_bondDiscounts",
                "treasuryEthereum_convexRewardPoolSnapshot",
                "treasuryEthereum_convexRewardPoolSnapshots",
                "treasuryEthereum_dailyBond",
                "treasuryEthereum_dailyBonds",
                "treasuryEthereum_dailyStakingReward",
                "treasuryEthereum_dailyStakingRewards",
                "treasuryEthereum_erc20TokenSnapshot",
                "treasuryEthereum_erc20TokenSnapshots",
                "treasuryEthereum_gnosisAuction",
                "treasuryEthereum_gnosisAuctionRoot",
                "treasuryEthereum_gnosisAuctionRoots",
                "treasuryEthereum_gnosisAuctions",
                "treasuryEthereum_poolSnapshot",
                "treasuryEthereum_poolSnapshots",
                "treasuryEthereum_priceSnapshot",
                "treasuryEthereum_priceSnapshots",
                "treasuryEthereum_protocolMetric",
                "treasuryEthereum_protocolMetrics",
                "treasuryEthereum_rebase",
                "treasuryEthereum_rebases",
                "treasuryEthereum_stakingPoolSnapshot",
                "treasuryEthereum_stakingPoolSnapshots",
                "treasuryEthereum_token",
                "treasuryEthereum_tokenPriceSnapshot",
                "treasuryEthereum_tokenPriceSnapshots",
                "treasuryEthereum_tokenRecord",
                "treasuryEthereum_tokenRecords",
                "treasuryEthereum_tokenSupplies",
                "treasuryEthereum_tokenSupply",
                "treasuryEthereum_tokens"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "treasuryEthereum_BalancerPoolSnapshot",
              "fieldNames": [
                "balances",
                "block",
                "decimals",
                "id",
                "pool",
                "poolToken",
                "tokens",
                "totalSupply",
                "weights"
              ]
            },
            {
              "typeName": "treasuryEthereum_BondDiscount",
              "fieldNames": [
                "dai_discount",
                "eth_discount",
                "frax_discount",
                "id",
                "lusd_discount",
                "ohmdai_discount",
                "ohmfrax_discount",
                "ohmlusd_discount",
                "timestamp"
              ]
            },
            {
              "typeName": "treasuryEthereum_ConvexRewardPoolSnapshot",
              "fieldNames": [
                "address",
                "block",
                "id",
                "stakingToken"
              ]
            },
            {
              "typeName": "treasuryEthereum_DailyBond",
              "fieldNames": [
                "amount",
                "id",
                "timestamp",
                "token",
                "value"
              ]
            },
            {
              "typeName": "treasuryEthereum_DailyStakingReward",
              "fieldNames": [
                "amount",
                "id",
                "timestamp",
                "value"
              ]
            },
            {
              "typeName": "treasuryEthereum_ERC20TokenSnapshot",
              "fieldNames": [
                "address",
                "decimals",
                "id",
                "totalSupply"
              ]
            },
            {
              "typeName": "treasuryEthereum_GnosisAuction",
              "fieldNames": [
                "auctionCloseTimestamp",
                "auctionOpenTimestamp",
                "bidQuantity",
                "id",
                "payoutCapacity",
                "termSeconds"
              ]
            },
            {
              "typeName": "treasuryEthereum_GnosisAuctionRoot",
              "fieldNames": [
                "id",
                "markets"
              ]
            },
            {
              "typeName": "treasuryEthereum_PoolSnapshot",
              "fieldNames": [
                "balances",
                "block",
                "decimals",
                "id",
                "pool",
                "poolToken",
                "tokens",
                "totalSupply",
                "weights"
              ]
            },
            {
              "typeName": "treasuryEthereum_PriceSnapshot",
              "fieldNames": [
                "block",
                "date",
                "id",
                "priceGOhm",
                "priceOhm",
                "timestamp"
              ]
            },
            {
              "typeName": "treasuryEthereum_ProtocolMetric",
              "fieldNames": [
                "block",
                "currentAPY",
                "currentIndex",
                "date",
                "gOhmPrice",
                "gOhmSyntheticSupply",
                "gOhmTotalSupply",
                "id",
                "marketCap",
                "nextDistributedOhm",
                "nextEpochRebase",
                "ohmCirculatingSupply",
                "ohmFloatingSupply",
                "ohmPrice",
                "ohmTotalSupply",
                "sOhmCirculatingSupply",
                "timestamp",
                "totalValueLocked",
                "treasuryLiquidBacking",
                "treasuryLiquidBackingPerGOhmSynthetic",
                "treasuryLiquidBackingPerOhmFloating",
                "treasuryMarketValue"
              ]
            },
            {
              "typeName": "treasuryEthereum_Rebase",
              "fieldNames": [
                "amount",
                "contract",
                "id",
                "percentage",
                "stakedOhms",
                "timestamp",
                "value"
              ]
            },
            {
              "typeName": "treasuryEthereum_StakingPoolSnapshot",
              "fieldNames": [
                "block",
                "contractAddress",
                "id",
                "stakingToken"
              ]
            },
            {
              "typeName": "treasuryEthereum_Token",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "treasuryEthereum_TokenPriceSnapshot",
              "fieldNames": [
                "block",
                "id",
                "price",
                "token"
              ]
            },
            {
              "typeName": "treasuryEthereum_TokenRecord",
              "fieldNames": [
                "balance",
                "block",
                "blockchain",
                "category",
                "date",
                "id",
                "isBluechip",
                "isLiquid",
                "multiplier",
                "rate",
                "source",
                "sourceAddress",
                "timestamp",
                "token",
                "tokenAddress",
                "value",
                "valueExcludingOhm"
              ]
            },
            {
              "typeName": "treasuryEthereum_TokenSupply",
              "fieldNames": [
                "balance",
                "block",
                "date",
                "id",
                "pool",
                "poolAddress",
                "source",
                "sourceAddress",
                "supplyBalance",
                "timestamp",
                "token",
                "tokenAddress",
                "type"
              ]
            },
            {
              "typeName": "treasuryEthereum__Block_",
              "fieldNames": [
                "hash",
                "number",
                "timestamp"
              ]
            },
            {
              "typeName": "treasuryEthereum__Meta_",
              "fieldNames": [
                "block",
                "deployment",
                "hasIndexingErrors"
              ]
            }
          ],
          "overrideFieldPathFromAlias": true,
          "directives": [
            {
              "directiveName": "treasuryEthereum_derivedFrom",
              "renameTo": "derivedFrom"
            },
            {
              "directiveName": "treasuryEthereum_entity",
              "renameTo": "entity"
            },
            {
              "directiveName": "treasuryEthereum_subgraphId",
              "renameTo": "subgraphId"
            }
          ],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 2,
          "customGraphql": {
            "fetch": {
              "url": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": "https://api.thegraph.com/subgraphs/name/olympusdao/protocol-metrics-fantom"
              },
              "baseUrl": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": ""
              },
              "path": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": ""
              },
              "method": 1,
              "body": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": ""
              },
              "header": {},
              "query": [],
              "urlEncodeBody": false
            },
            "federation": {
              "enabled": false,
              "serviceSdl": ""
            },
            "subscription": {
              "enabled": true,
              "url": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": "https://api.thegraph.com/subgraphs/name/olympusdao/protocol-metrics-fantom"
              },
              "useSSE": false
            },
            "upstreamSchema": "\"\"\"\ncreates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.\n\"\"\"\ndirective @derivedFrom(field: String!) on FIELD_DEFINITION\n\n\"\"\"\nMarks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.\n\"\"\"\ndirective @entity on OBJECT\n\n\"\"\"Defined a Subgraph ID for an object type\"\"\"\ndirective @subgraphId(id: String!) on OBJECT\n\ntype BalancerPoolSnapshot {\n  balances: [BigDecimal!]!\n  block: BigInt!\n  decimals: Int!\n  id: ID!\n  pool: Bytes!\n  poolToken: Bytes!\n  tokens: [Bytes!]!\n  totalSupply: BigDecimal!\n  weights: [BigDecimal!]!\n}\n\ninput BalancerPoolSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [BalancerPoolSnapshot_filter]\n  balances: [BigDecimal!]\n  balances_contains: [BigDecimal!]\n  balances_contains_nocase: [BigDecimal!]\n  balances_not: [BigDecimal!]\n  balances_not_contains: [BigDecimal!]\n  balances_not_contains_nocase: [BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [BalancerPoolSnapshot_filter]\n  pool: Bytes\n  poolToken: Bytes\n  poolToken_contains: Bytes\n  poolToken_gt: Bytes\n  poolToken_gte: Bytes\n  poolToken_in: [Bytes!]\n  poolToken_lt: Bytes\n  poolToken_lte: Bytes\n  poolToken_not: Bytes\n  poolToken_not_contains: Bytes\n  poolToken_not_in: [Bytes!]\n  pool_contains: Bytes\n  pool_gt: Bytes\n  pool_gte: Bytes\n  pool_in: [Bytes!]\n  pool_lt: Bytes\n  pool_lte: Bytes\n  pool_not: Bytes\n  pool_not_contains: Bytes\n  pool_not_in: [Bytes!]\n  tokens: [Bytes!]\n  tokens_contains: [Bytes!]\n  tokens_contains_nocase: [Bytes!]\n  tokens_not: [Bytes!]\n  tokens_not_contains: [Bytes!]\n  tokens_not_contains_nocase: [Bytes!]\n  totalSupply: BigDecimal\n  totalSupply_gt: BigDecimal\n  totalSupply_gte: BigDecimal\n  totalSupply_in: [BigDecimal!]\n  totalSupply_lt: BigDecimal\n  totalSupply_lte: BigDecimal\n  totalSupply_not: BigDecimal\n  totalSupply_not_in: [BigDecimal!]\n  weights: [BigDecimal!]\n  weights_contains: [BigDecimal!]\n  weights_contains_nocase: [BigDecimal!]\n  weights_not: [BigDecimal!]\n  weights_not_contains: [BigDecimal!]\n  weights_not_contains_nocase: [BigDecimal!]\n}\n\nenum BalancerPoolSnapshot_orderBy {\n  balances\n  block\n  decimals\n  id\n  pool\n  poolToken\n  tokens\n  totalSupply\n  weights\n}\n\nscalar BigDecimal\n\nscalar BigInt\n\ninput BlockChangedFilter {\n  number_gte: Int!\n}\n\ninput Block_height {\n  hash: Bytes\n  number: Int\n  number_gte: Int\n}\n\ntype BondDiscount {\n  dai_discount: BigDecimal!\n  eth_discount: BigDecimal!\n  frax_discount: BigDecimal!\n  id: ID!\n  lusd_discount: BigDecimal!\n  ohmdai_discount: BigDecimal!\n  ohmfrax_discount: BigDecimal!\n  ohmlusd_discount: BigDecimal!\n  timestamp: BigInt!\n}\n\ninput BondDiscount_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [BondDiscount_filter]\n  dai_discount: BigDecimal\n  dai_discount_gt: BigDecimal\n  dai_discount_gte: BigDecimal\n  dai_discount_in: [BigDecimal!]\n  dai_discount_lt: BigDecimal\n  dai_discount_lte: BigDecimal\n  dai_discount_not: BigDecimal\n  dai_discount_not_in: [BigDecimal!]\n  eth_discount: BigDecimal\n  eth_discount_gt: BigDecimal\n  eth_discount_gte: BigDecimal\n  eth_discount_in: [BigDecimal!]\n  eth_discount_lt: BigDecimal\n  eth_discount_lte: BigDecimal\n  eth_discount_not: BigDecimal\n  eth_discount_not_in: [BigDecimal!]\n  frax_discount: BigDecimal\n  frax_discount_gt: BigDecimal\n  frax_discount_gte: BigDecimal\n  frax_discount_in: [BigDecimal!]\n  frax_discount_lt: BigDecimal\n  frax_discount_lte: BigDecimal\n  frax_discount_not: BigDecimal\n  frax_discount_not_in: [BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  lusd_discount: BigDecimal\n  lusd_discount_gt: BigDecimal\n  lusd_discount_gte: BigDecimal\n  lusd_discount_in: [BigDecimal!]\n  lusd_discount_lt: BigDecimal\n  lusd_discount_lte: BigDecimal\n  lusd_discount_not: BigDecimal\n  lusd_discount_not_in: [BigDecimal!]\n  ohmdai_discount: BigDecimal\n  ohmdai_discount_gt: BigDecimal\n  ohmdai_discount_gte: BigDecimal\n  ohmdai_discount_in: [BigDecimal!]\n  ohmdai_discount_lt: BigDecimal\n  ohmdai_discount_lte: BigDecimal\n  ohmdai_discount_not: BigDecimal\n  ohmdai_discount_not_in: [BigDecimal!]\n  ohmfrax_discount: BigDecimal\n  ohmfrax_discount_gt: BigDecimal\n  ohmfrax_discount_gte: BigDecimal\n  ohmfrax_discount_in: [BigDecimal!]\n  ohmfrax_discount_lt: BigDecimal\n  ohmfrax_discount_lte: BigDecimal\n  ohmfrax_discount_not: BigDecimal\n  ohmfrax_discount_not_in: [BigDecimal!]\n  ohmlusd_discount: BigDecimal\n  ohmlusd_discount_gt: BigDecimal\n  ohmlusd_discount_gte: BigDecimal\n  ohmlusd_discount_in: [BigDecimal!]\n  ohmlusd_discount_lt: BigDecimal\n  ohmlusd_discount_lte: BigDecimal\n  ohmlusd_discount_not: BigDecimal\n  ohmlusd_discount_not_in: [BigDecimal!]\n  or: [BondDiscount_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n}\n\nenum BondDiscount_orderBy {\n  dai_discount\n  eth_discount\n  frax_discount\n  id\n  lusd_discount\n  ohmdai_discount\n  ohmfrax_discount\n  ohmlusd_discount\n  timestamp\n}\n\nscalar Bytes\n\ntype ConvexRewardPoolSnapshot {\n  address: Bytes!\n  block: BigInt!\n  id: ID!\n  stakingToken: Bytes!\n}\n\ninput ConvexRewardPoolSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  address: Bytes\n  address_contains: Bytes\n  address_gt: Bytes\n  address_gte: Bytes\n  address_in: [Bytes!]\n  address_lt: Bytes\n  address_lte: Bytes\n  address_not: Bytes\n  address_not_contains: Bytes\n  address_not_in: [Bytes!]\n  and: [ConvexRewardPoolSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [ConvexRewardPoolSnapshot_filter]\n  stakingToken: Bytes\n  stakingToken_contains: Bytes\n  stakingToken_gt: Bytes\n  stakingToken_gte: Bytes\n  stakingToken_in: [Bytes!]\n  stakingToken_lt: Bytes\n  stakingToken_lte: Bytes\n  stakingToken_not: Bytes\n  stakingToken_not_contains: Bytes\n  stakingToken_not_in: [Bytes!]\n}\n\nenum ConvexRewardPoolSnapshot_orderBy {\n  address\n  block\n  id\n  stakingToken\n}\n\ntype DailyBond {\n  amount: BigDecimal!\n  id: ID!\n  timestamp: BigInt!\n  token: Token!\n  value: BigDecimal!\n}\n\ninput DailyBond_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  amount: BigDecimal\n  amount_gt: BigDecimal\n  amount_gte: BigDecimal\n  amount_in: [BigDecimal!]\n  amount_lt: BigDecimal\n  amount_lte: BigDecimal\n  amount_not: BigDecimal\n  amount_not_in: [BigDecimal!]\n  and: [DailyBond_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [DailyBond_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  token_: Token_filter\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  value: BigDecimal\n  value_gt: BigDecimal\n  value_gte: BigDecimal\n  value_in: [BigDecimal!]\n  value_lt: BigDecimal\n  value_lte: BigDecimal\n  value_not: BigDecimal\n  value_not_in: [BigDecimal!]\n}\n\nenum DailyBond_orderBy {\n  amount\n  id\n  timestamp\n  token\n  token__id\n  value\n}\n\ntype DailyStakingReward {\n  amount: BigDecimal!\n  id: ID!\n  timestamp: BigInt!\n  value: BigDecimal!\n}\n\ninput DailyStakingReward_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  amount: BigDecimal\n  amount_gt: BigDecimal\n  amount_gte: BigDecimal\n  amount_in: [BigDecimal!]\n  amount_lt: BigDecimal\n  amount_lte: BigDecimal\n  amount_not: BigDecimal\n  amount_not_in: [BigDecimal!]\n  and: [DailyStakingReward_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [DailyStakingReward_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  value: BigDecimal\n  value_gt: BigDecimal\n  value_gte: BigDecimal\n  value_in: [BigDecimal!]\n  value_lt: BigDecimal\n  value_lte: BigDecimal\n  value_not: BigDecimal\n  value_not_in: [BigDecimal!]\n}\n\nenum DailyStakingReward_orderBy {\n  amount\n  id\n  timestamp\n  value\n}\n\ntype ERC20TokenSnapshot {\n  address: Bytes!\n  decimals: Int!\n  id: ID!\n  totalSupply: BigDecimal\n}\n\ninput ERC20TokenSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  address: Bytes\n  address_contains: Bytes\n  address_gt: Bytes\n  address_gte: Bytes\n  address_in: [Bytes!]\n  address_lt: Bytes\n  address_lte: Bytes\n  address_not: Bytes\n  address_not_contains: Bytes\n  address_not_in: [Bytes!]\n  and: [ERC20TokenSnapshot_filter]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [ERC20TokenSnapshot_filter]\n  totalSupply: BigDecimal\n  totalSupply_gt: BigDecimal\n  totalSupply_gte: BigDecimal\n  totalSupply_in: [BigDecimal!]\n  totalSupply_lt: BigDecimal\n  totalSupply_lte: BigDecimal\n  totalSupply_not: BigDecimal\n  totalSupply_not_in: [BigDecimal!]\n}\n\nenum ERC20TokenSnapshot_orderBy {\n  address\n  decimals\n  id\n  totalSupply\n}\n\ntype GnosisAuction {\n  auctionCloseTimestamp: BigInt\n  auctionOpenTimestamp: BigInt!\n  bidQuantity: BigDecimal\n  id: ID!\n  payoutCapacity: BigDecimal!\n  termSeconds: BigInt!\n}\n\ntype GnosisAuctionRoot {\n  id: ID!\n  markets: [BigInt!]!\n}\n\ninput GnosisAuctionRoot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [GnosisAuctionRoot_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  markets: [BigInt!]\n  markets_contains: [BigInt!]\n  markets_contains_nocase: [BigInt!]\n  markets_not: [BigInt!]\n  markets_not_contains: [BigInt!]\n  markets_not_contains_nocase: [BigInt!]\n  or: [GnosisAuctionRoot_filter]\n}\n\nenum GnosisAuctionRoot_orderBy {\n  id\n  markets\n}\n\ninput GnosisAuction_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [GnosisAuction_filter]\n  auctionCloseTimestamp: BigInt\n  auctionCloseTimestamp_gt: BigInt\n  auctionCloseTimestamp_gte: BigInt\n  auctionCloseTimestamp_in: [BigInt!]\n  auctionCloseTimestamp_lt: BigInt\n  auctionCloseTimestamp_lte: BigInt\n  auctionCloseTimestamp_not: BigInt\n  auctionCloseTimestamp_not_in: [BigInt!]\n  auctionOpenTimestamp: BigInt\n  auctionOpenTimestamp_gt: BigInt\n  auctionOpenTimestamp_gte: BigInt\n  auctionOpenTimestamp_in: [BigInt!]\n  auctionOpenTimestamp_lt: BigInt\n  auctionOpenTimestamp_lte: BigInt\n  auctionOpenTimestamp_not: BigInt\n  auctionOpenTimestamp_not_in: [BigInt!]\n  bidQuantity: BigDecimal\n  bidQuantity_gt: BigDecimal\n  bidQuantity_gte: BigDecimal\n  bidQuantity_in: [BigDecimal!]\n  bidQuantity_lt: BigDecimal\n  bidQuantity_lte: BigDecimal\n  bidQuantity_not: BigDecimal\n  bidQuantity_not_in: [BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [GnosisAuction_filter]\n  payoutCapacity: BigDecimal\n  payoutCapacity_gt: BigDecimal\n  payoutCapacity_gte: BigDecimal\n  payoutCapacity_in: [BigDecimal!]\n  payoutCapacity_lt: BigDecimal\n  payoutCapacity_lte: BigDecimal\n  payoutCapacity_not: BigDecimal\n  payoutCapacity_not_in: [BigDecimal!]\n  termSeconds: BigInt\n  termSeconds_gt: BigInt\n  termSeconds_gte: BigInt\n  termSeconds_in: [BigInt!]\n  termSeconds_lt: BigInt\n  termSeconds_lte: BigInt\n  termSeconds_not: BigInt\n  termSeconds_not_in: [BigInt!]\n}\n\nenum GnosisAuction_orderBy {\n  auctionCloseTimestamp\n  auctionOpenTimestamp\n  bidQuantity\n  id\n  payoutCapacity\n  termSeconds\n}\n\n\"\"\"Defines the order direction, either ascending or descending\"\"\"\nenum OrderDirection {\n  asc\n  desc\n}\n\ntype PoolSnapshot {\n  balances: [BigDecimal!]!\n  block: BigInt!\n  decimals: Int!\n  id: ID!\n  pool: Bytes!\n  poolToken: Bytes\n  tokens: [Bytes!]!\n  totalSupply: BigDecimal!\n  weights: [BigDecimal!]\n}\n\ninput PoolSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [PoolSnapshot_filter]\n  balances: [BigDecimal!]\n  balances_contains: [BigDecimal!]\n  balances_contains_nocase: [BigDecimal!]\n  balances_not: [BigDecimal!]\n  balances_not_contains: [BigDecimal!]\n  balances_not_contains_nocase: [BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [PoolSnapshot_filter]\n  pool: Bytes\n  poolToken: Bytes\n  poolToken_contains: Bytes\n  poolToken_gt: Bytes\n  poolToken_gte: Bytes\n  poolToken_in: [Bytes!]\n  poolToken_lt: Bytes\n  poolToken_lte: Bytes\n  poolToken_not: Bytes\n  poolToken_not_contains: Bytes\n  poolToken_not_in: [Bytes!]\n  pool_contains: Bytes\n  pool_gt: Bytes\n  pool_gte: Bytes\n  pool_in: [Bytes!]\n  pool_lt: Bytes\n  pool_lte: Bytes\n  pool_not: Bytes\n  pool_not_contains: Bytes\n  pool_not_in: [Bytes!]\n  tokens: [Bytes!]\n  tokens_contains: [Bytes!]\n  tokens_contains_nocase: [Bytes!]\n  tokens_not: [Bytes!]\n  tokens_not_contains: [Bytes!]\n  tokens_not_contains_nocase: [Bytes!]\n  totalSupply: BigDecimal\n  totalSupply_gt: BigDecimal\n  totalSupply_gte: BigDecimal\n  totalSupply_in: [BigDecimal!]\n  totalSupply_lt: BigDecimal\n  totalSupply_lte: BigDecimal\n  totalSupply_not: BigDecimal\n  totalSupply_not_in: [BigDecimal!]\n  weights: [BigDecimal!]\n  weights_contains: [BigDecimal!]\n  weights_contains_nocase: [BigDecimal!]\n  weights_not: [BigDecimal!]\n  weights_not_contains: [BigDecimal!]\n  weights_not_contains_nocase: [BigDecimal!]\n}\n\nenum PoolSnapshot_orderBy {\n  balances\n  block\n  decimals\n  id\n  pool\n  poolToken\n  tokens\n  totalSupply\n  weights\n}\n\ntype PriceSnapshot {\n  block: BigInt!\n  date: String!\n  id: ID!\n  priceGOhm: BigDecimal!\n  priceOhm: BigDecimal!\n  timestamp: BigInt!\n}\n\ninput PriceSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [PriceSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [PriceSnapshot_filter]\n  priceGOhm: BigDecimal\n  priceGOhm_gt: BigDecimal\n  priceGOhm_gte: BigDecimal\n  priceGOhm_in: [BigDecimal!]\n  priceGOhm_lt: BigDecimal\n  priceGOhm_lte: BigDecimal\n  priceGOhm_not: BigDecimal\n  priceGOhm_not_in: [BigDecimal!]\n  priceOhm: BigDecimal\n  priceOhm_gt: BigDecimal\n  priceOhm_gte: BigDecimal\n  priceOhm_in: [BigDecimal!]\n  priceOhm_lt: BigDecimal\n  priceOhm_lte: BigDecimal\n  priceOhm_not: BigDecimal\n  priceOhm_not_in: [BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n}\n\nenum PriceSnapshot_orderBy {\n  block\n  date\n  id\n  priceGOhm\n  priceOhm\n  timestamp\n}\n\ntype ProtocolMetric {\n  block: BigInt!\n  currentAPY: BigDecimal!\n  currentIndex: BigDecimal!\n  date: String!\n  gOhmPrice: BigDecimal!\n  gOhmSyntheticSupply: BigDecimal\n  gOhmTotalSupply: BigDecimal!\n  id: ID!\n  marketCap: BigDecimal\n  nextDistributedOhm: BigDecimal!\n  nextEpochRebase: BigDecimal!\n  ohmCirculatingSupply: BigDecimal\n  ohmFloatingSupply: BigDecimal\n  ohmPrice: BigDecimal!\n  ohmTotalSupply: BigDecimal!\n  sOhmCirculatingSupply: BigDecimal!\n  timestamp: BigInt!\n  totalValueLocked: BigDecimal!\n  treasuryLiquidBacking: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic: BigDecimal\n  treasuryLiquidBackingPerOhmFloating: BigDecimal\n  treasuryMarketValue: BigDecimal\n}\n\ninput ProtocolMetric_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [ProtocolMetric_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  currentAPY: BigDecimal\n  currentAPY_gt: BigDecimal\n  currentAPY_gte: BigDecimal\n  currentAPY_in: [BigDecimal!]\n  currentAPY_lt: BigDecimal\n  currentAPY_lte: BigDecimal\n  currentAPY_not: BigDecimal\n  currentAPY_not_in: [BigDecimal!]\n  currentIndex: BigDecimal\n  currentIndex_gt: BigDecimal\n  currentIndex_gte: BigDecimal\n  currentIndex_in: [BigDecimal!]\n  currentIndex_lt: BigDecimal\n  currentIndex_lte: BigDecimal\n  currentIndex_not: BigDecimal\n  currentIndex_not_in: [BigDecimal!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  gOhmPrice: BigDecimal\n  gOhmPrice_gt: BigDecimal\n  gOhmPrice_gte: BigDecimal\n  gOhmPrice_in: [BigDecimal!]\n  gOhmPrice_lt: BigDecimal\n  gOhmPrice_lte: BigDecimal\n  gOhmPrice_not: BigDecimal\n  gOhmPrice_not_in: [BigDecimal!]\n  gOhmSyntheticSupply: BigDecimal\n  gOhmSyntheticSupply_gt: BigDecimal\n  gOhmSyntheticSupply_gte: BigDecimal\n  gOhmSyntheticSupply_in: [BigDecimal!]\n  gOhmSyntheticSupply_lt: BigDecimal\n  gOhmSyntheticSupply_lte: BigDecimal\n  gOhmSyntheticSupply_not: BigDecimal\n  gOhmSyntheticSupply_not_in: [BigDecimal!]\n  gOhmTotalSupply: BigDecimal\n  gOhmTotalSupply_gt: BigDecimal\n  gOhmTotalSupply_gte: BigDecimal\n  gOhmTotalSupply_in: [BigDecimal!]\n  gOhmTotalSupply_lt: BigDecimal\n  gOhmTotalSupply_lte: BigDecimal\n  gOhmTotalSupply_not: BigDecimal\n  gOhmTotalSupply_not_in: [BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  marketCap: BigDecimal\n  marketCap_gt: BigDecimal\n  marketCap_gte: BigDecimal\n  marketCap_in: [BigDecimal!]\n  marketCap_lt: BigDecimal\n  marketCap_lte: BigDecimal\n  marketCap_not: BigDecimal\n  marketCap_not_in: [BigDecimal!]\n  nextDistributedOhm: BigDecimal\n  nextDistributedOhm_gt: BigDecimal\n  nextDistributedOhm_gte: BigDecimal\n  nextDistributedOhm_in: [BigDecimal!]\n  nextDistributedOhm_lt: BigDecimal\n  nextDistributedOhm_lte: BigDecimal\n  nextDistributedOhm_not: BigDecimal\n  nextDistributedOhm_not_in: [BigDecimal!]\n  nextEpochRebase: BigDecimal\n  nextEpochRebase_gt: BigDecimal\n  nextEpochRebase_gte: BigDecimal\n  nextEpochRebase_in: [BigDecimal!]\n  nextEpochRebase_lt: BigDecimal\n  nextEpochRebase_lte: BigDecimal\n  nextEpochRebase_not: BigDecimal\n  nextEpochRebase_not_in: [BigDecimal!]\n  ohmCirculatingSupply: BigDecimal\n  ohmCirculatingSupply_gt: BigDecimal\n  ohmCirculatingSupply_gte: BigDecimal\n  ohmCirculatingSupply_in: [BigDecimal!]\n  ohmCirculatingSupply_lt: BigDecimal\n  ohmCirculatingSupply_lte: BigDecimal\n  ohmCirculatingSupply_not: BigDecimal\n  ohmCirculatingSupply_not_in: [BigDecimal!]\n  ohmFloatingSupply: BigDecimal\n  ohmFloatingSupply_gt: BigDecimal\n  ohmFloatingSupply_gte: BigDecimal\n  ohmFloatingSupply_in: [BigDecimal!]\n  ohmFloatingSupply_lt: BigDecimal\n  ohmFloatingSupply_lte: BigDecimal\n  ohmFloatingSupply_not: BigDecimal\n  ohmFloatingSupply_not_in: [BigDecimal!]\n  ohmPrice: BigDecimal\n  ohmPrice_gt: BigDecimal\n  ohmPrice_gte: BigDecimal\n  ohmPrice_in: [BigDecimal!]\n  ohmPrice_lt: BigDecimal\n  ohmPrice_lte: BigDecimal\n  ohmPrice_not: BigDecimal\n  ohmPrice_not_in: [BigDecimal!]\n  ohmTotalSupply: BigDecimal\n  ohmTotalSupply_gt: BigDecimal\n  ohmTotalSupply_gte: BigDecimal\n  ohmTotalSupply_in: [BigDecimal!]\n  ohmTotalSupply_lt: BigDecimal\n  ohmTotalSupply_lte: BigDecimal\n  ohmTotalSupply_not: BigDecimal\n  ohmTotalSupply_not_in: [BigDecimal!]\n  or: [ProtocolMetric_filter]\n  sOhmCirculatingSupply: BigDecimal\n  sOhmCirculatingSupply_gt: BigDecimal\n  sOhmCirculatingSupply_gte: BigDecimal\n  sOhmCirculatingSupply_in: [BigDecimal!]\n  sOhmCirculatingSupply_lt: BigDecimal\n  sOhmCirculatingSupply_lte: BigDecimal\n  sOhmCirculatingSupply_not: BigDecimal\n  sOhmCirculatingSupply_not_in: [BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  totalValueLocked: BigDecimal\n  totalValueLocked_gt: BigDecimal\n  totalValueLocked_gte: BigDecimal\n  totalValueLocked_in: [BigDecimal!]\n  totalValueLocked_lt: BigDecimal\n  totalValueLocked_lte: BigDecimal\n  totalValueLocked_not: BigDecimal\n  totalValueLocked_not_in: [BigDecimal!]\n  treasuryLiquidBacking: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_gt: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_gte: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_in: [BigDecimal!]\n  treasuryLiquidBackingPerGOhmSynthetic_lt: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_lte: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_not: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_not_in: [BigDecimal!]\n  treasuryLiquidBackingPerOhmFloating: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_gt: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_gte: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_in: [BigDecimal!]\n  treasuryLiquidBackingPerOhmFloating_lt: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_lte: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_not: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_not_in: [BigDecimal!]\n  treasuryLiquidBacking_gt: BigDecimal\n  treasuryLiquidBacking_gte: BigDecimal\n  treasuryLiquidBacking_in: [BigDecimal!]\n  treasuryLiquidBacking_lt: BigDecimal\n  treasuryLiquidBacking_lte: BigDecimal\n  treasuryLiquidBacking_not: BigDecimal\n  treasuryLiquidBacking_not_in: [BigDecimal!]\n  treasuryMarketValue: BigDecimal\n  treasuryMarketValue_gt: BigDecimal\n  treasuryMarketValue_gte: BigDecimal\n  treasuryMarketValue_in: [BigDecimal!]\n  treasuryMarketValue_lt: BigDecimal\n  treasuryMarketValue_lte: BigDecimal\n  treasuryMarketValue_not: BigDecimal\n  treasuryMarketValue_not_in: [BigDecimal!]\n}\n\nenum ProtocolMetric_orderBy {\n  block\n  currentAPY\n  currentIndex\n  date\n  gOhmPrice\n  gOhmSyntheticSupply\n  gOhmTotalSupply\n  id\n  marketCap\n  nextDistributedOhm\n  nextEpochRebase\n  ohmCirculatingSupply\n  ohmFloatingSupply\n  ohmPrice\n  ohmTotalSupply\n  sOhmCirculatingSupply\n  timestamp\n  totalValueLocked\n  treasuryLiquidBacking\n  treasuryLiquidBackingPerGOhmSynthetic\n  treasuryLiquidBackingPerOhmFloating\n  treasuryMarketValue\n}\n\ntype Query {\n  \"Access to subgraph metadata\"\n  _meta(block: Block_height): _Meta_\n  balancerPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): BalancerPoolSnapshot\n  balancerPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: BalancerPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: BalancerPoolSnapshot_filter\n  ): [BalancerPoolSnapshot!]!\n  bondDiscount(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): BondDiscount\n  bondDiscounts(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: BondDiscount_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: BondDiscount_filter\n  ): [BondDiscount!]!\n  convexRewardPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ConvexRewardPoolSnapshot\n  convexRewardPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ConvexRewardPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ConvexRewardPoolSnapshot_filter\n  ): [ConvexRewardPoolSnapshot!]!\n  dailyBond(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): DailyBond\n  dailyBonds(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: DailyBond_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: DailyBond_filter\n  ): [DailyBond!]!\n  dailyStakingReward(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): DailyStakingReward\n  dailyStakingRewards(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: DailyStakingReward_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: DailyStakingReward_filter\n  ): [DailyStakingReward!]!\n  erc20TokenSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ERC20TokenSnapshot\n  erc20TokenSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ERC20TokenSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ERC20TokenSnapshot_filter\n  ): [ERC20TokenSnapshot!]!\n  gnosisAuction(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): GnosisAuction\n  gnosisAuctionRoot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): GnosisAuctionRoot\n  gnosisAuctionRoots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: GnosisAuctionRoot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: GnosisAuctionRoot_filter\n  ): [GnosisAuctionRoot!]!\n  gnosisAuctions(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: GnosisAuction_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: GnosisAuction_filter\n  ): [GnosisAuction!]!\n  poolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PoolSnapshot\n  poolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: PoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: PoolSnapshot_filter\n  ): [PoolSnapshot!]!\n  priceSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PriceSnapshot\n  priceSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: PriceSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: PriceSnapshot_filter\n  ): [PriceSnapshot!]!\n  protocolMetric(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ProtocolMetric\n  protocolMetrics(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ProtocolMetric_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ProtocolMetric_filter\n  ): [ProtocolMetric!]!\n  rebase(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Rebase\n  rebases(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: Rebase_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: Rebase_filter\n  ): [Rebase!]!\n  stakingPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): StakingPoolSnapshot\n  stakingPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: StakingPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: StakingPoolSnapshot_filter\n  ): [StakingPoolSnapshot!]!\n  token(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Token\n  tokenPriceSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenPriceSnapshot\n  tokenPriceSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenPriceSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenPriceSnapshot_filter\n  ): [TokenPriceSnapshot!]!\n  tokenRecord(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenRecord\n  tokenRecords(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenRecord_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenRecord_filter\n  ): [TokenRecord!]!\n  tokenSupplies(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenSupply_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenSupply_filter\n  ): [TokenSupply!]!\n  tokenSupply(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenSupply\n  tokens(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: Token_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: Token_filter\n  ): [Token!]!\n}\n\ntype Rebase {\n  amount: BigDecimal!\n  contract: String!\n  id: ID!\n  percentage: BigDecimal!\n  stakedOhms: BigDecimal!\n  timestamp: BigInt!\n  value: BigDecimal!\n}\n\ninput Rebase_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  amount: BigDecimal\n  amount_gt: BigDecimal\n  amount_gte: BigDecimal\n  amount_in: [BigDecimal!]\n  amount_lt: BigDecimal\n  amount_lte: BigDecimal\n  amount_not: BigDecimal\n  amount_not_in: [BigDecimal!]\n  and: [Rebase_filter]\n  contract: String\n  contract_contains: String\n  contract_contains_nocase: String\n  contract_ends_with: String\n  contract_ends_with_nocase: String\n  contract_gt: String\n  contract_gte: String\n  contract_in: [String!]\n  contract_lt: String\n  contract_lte: String\n  contract_not: String\n  contract_not_contains: String\n  contract_not_contains_nocase: String\n  contract_not_ends_with: String\n  contract_not_ends_with_nocase: String\n  contract_not_in: [String!]\n  contract_not_starts_with: String\n  contract_not_starts_with_nocase: String\n  contract_starts_with: String\n  contract_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [Rebase_filter]\n  percentage: BigDecimal\n  percentage_gt: BigDecimal\n  percentage_gte: BigDecimal\n  percentage_in: [BigDecimal!]\n  percentage_lt: BigDecimal\n  percentage_lte: BigDecimal\n  percentage_not: BigDecimal\n  percentage_not_in: [BigDecimal!]\n  stakedOhms: BigDecimal\n  stakedOhms_gt: BigDecimal\n  stakedOhms_gte: BigDecimal\n  stakedOhms_in: [BigDecimal!]\n  stakedOhms_lt: BigDecimal\n  stakedOhms_lte: BigDecimal\n  stakedOhms_not: BigDecimal\n  stakedOhms_not_in: [BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  value: BigDecimal\n  value_gt: BigDecimal\n  value_gte: BigDecimal\n  value_in: [BigDecimal!]\n  value_lt: BigDecimal\n  value_lte: BigDecimal\n  value_not: BigDecimal\n  value_not_in: [BigDecimal!]\n}\n\nenum Rebase_orderBy {\n  amount\n  contract\n  id\n  percentage\n  stakedOhms\n  timestamp\n  value\n}\n\ntype StakingPoolSnapshot {\n  block: BigInt!\n  contractAddress: Bytes!\n  id: ID!\n  stakingToken: Bytes\n}\n\ninput StakingPoolSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [StakingPoolSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  contractAddress: Bytes\n  contractAddress_contains: Bytes\n  contractAddress_gt: Bytes\n  contractAddress_gte: Bytes\n  contractAddress_in: [Bytes!]\n  contractAddress_lt: Bytes\n  contractAddress_lte: Bytes\n  contractAddress_not: Bytes\n  contractAddress_not_contains: Bytes\n  contractAddress_not_in: [Bytes!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [StakingPoolSnapshot_filter]\n  stakingToken: Bytes\n  stakingToken_contains: Bytes\n  stakingToken_gt: Bytes\n  stakingToken_gte: Bytes\n  stakingToken_in: [Bytes!]\n  stakingToken_lt: Bytes\n  stakingToken_lte: Bytes\n  stakingToken_not: Bytes\n  stakingToken_not_contains: Bytes\n  stakingToken_not_in: [Bytes!]\n}\n\nenum StakingPoolSnapshot_orderBy {\n  block\n  contractAddress\n  id\n  stakingToken\n}\n\ntype Subscription {\n  \"Access to subgraph metadata\"\n  _meta(block: Block_height): _Meta_\n  balancerPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): BalancerPoolSnapshot\n  balancerPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: BalancerPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: BalancerPoolSnapshot_filter\n  ): [BalancerPoolSnapshot!]!\n  bondDiscount(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): BondDiscount\n  bondDiscounts(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: BondDiscount_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: BondDiscount_filter\n  ): [BondDiscount!]!\n  convexRewardPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ConvexRewardPoolSnapshot\n  convexRewardPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ConvexRewardPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ConvexRewardPoolSnapshot_filter\n  ): [ConvexRewardPoolSnapshot!]!\n  dailyBond(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): DailyBond\n  dailyBonds(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: DailyBond_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: DailyBond_filter\n  ): [DailyBond!]!\n  dailyStakingReward(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): DailyStakingReward\n  dailyStakingRewards(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: DailyStakingReward_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: DailyStakingReward_filter\n  ): [DailyStakingReward!]!\n  erc20TokenSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ERC20TokenSnapshot\n  erc20TokenSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ERC20TokenSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ERC20TokenSnapshot_filter\n  ): [ERC20TokenSnapshot!]!\n  gnosisAuction(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): GnosisAuction\n  gnosisAuctionRoot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): GnosisAuctionRoot\n  gnosisAuctionRoots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: GnosisAuctionRoot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: GnosisAuctionRoot_filter\n  ): [GnosisAuctionRoot!]!\n  gnosisAuctions(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: GnosisAuction_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: GnosisAuction_filter\n  ): [GnosisAuction!]!\n  poolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PoolSnapshot\n  poolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: PoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: PoolSnapshot_filter\n  ): [PoolSnapshot!]!\n  priceSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PriceSnapshot\n  priceSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: PriceSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: PriceSnapshot_filter\n  ): [PriceSnapshot!]!\n  protocolMetric(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ProtocolMetric\n  protocolMetrics(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ProtocolMetric_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ProtocolMetric_filter\n  ): [ProtocolMetric!]!\n  rebase(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Rebase\n  rebases(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: Rebase_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: Rebase_filter\n  ): [Rebase!]!\n  stakingPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): StakingPoolSnapshot\n  stakingPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: StakingPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: StakingPoolSnapshot_filter\n  ): [StakingPoolSnapshot!]!\n  token(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Token\n  tokenPriceSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenPriceSnapshot\n  tokenPriceSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenPriceSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenPriceSnapshot_filter\n  ): [TokenPriceSnapshot!]!\n  tokenRecord(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenRecord\n  tokenRecords(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenRecord_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenRecord_filter\n  ): [TokenRecord!]!\n  tokenSupplies(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenSupply_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenSupply_filter\n  ): [TokenSupply!]!\n  tokenSupply(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenSupply\n  tokens(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: Token_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: Token_filter\n  ): [Token!]!\n}\n\ntype Token {\n  id: ID!\n}\n\ntype TokenPriceSnapshot {\n  block: BigInt!\n  id: ID!\n  price: BigDecimal!\n  token: Bytes!\n}\n\ninput TokenPriceSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [TokenPriceSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [TokenPriceSnapshot_filter]\n  price: BigDecimal\n  price_gt: BigDecimal\n  price_gte: BigDecimal\n  price_in: [BigDecimal!]\n  price_lt: BigDecimal\n  price_lte: BigDecimal\n  price_not: BigDecimal\n  price_not_in: [BigDecimal!]\n  token: Bytes\n  token_contains: Bytes\n  token_gt: Bytes\n  token_gte: Bytes\n  token_in: [Bytes!]\n  token_lt: Bytes\n  token_lte: Bytes\n  token_not: Bytes\n  token_not_contains: Bytes\n  token_not_in: [Bytes!]\n}\n\nenum TokenPriceSnapshot_orderBy {\n  block\n  id\n  price\n  token\n}\n\ntype TokenRecord {\n  balance: BigDecimal!\n  block: BigInt!\n  blockchain: String!\n  category: String!\n  date: String!\n  id: ID!\n  isBluechip: Boolean!\n  isLiquid: Boolean!\n  multiplier: BigDecimal!\n  rate: BigDecimal!\n  source: String!\n  sourceAddress: String!\n  timestamp: BigInt!\n  token: String!\n  tokenAddress: String!\n  value: BigDecimal!\n  valueExcludingOhm: BigDecimal!\n}\n\ninput TokenRecord_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [TokenRecord_filter]\n  balance: BigDecimal\n  balance_gt: BigDecimal\n  balance_gte: BigDecimal\n  balance_in: [BigDecimal!]\n  balance_lt: BigDecimal\n  balance_lte: BigDecimal\n  balance_not: BigDecimal\n  balance_not_in: [BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  blockchain: String\n  blockchain_contains: String\n  blockchain_contains_nocase: String\n  blockchain_ends_with: String\n  blockchain_ends_with_nocase: String\n  blockchain_gt: String\n  blockchain_gte: String\n  blockchain_in: [String!]\n  blockchain_lt: String\n  blockchain_lte: String\n  blockchain_not: String\n  blockchain_not_contains: String\n  blockchain_not_contains_nocase: String\n  blockchain_not_ends_with: String\n  blockchain_not_ends_with_nocase: String\n  blockchain_not_in: [String!]\n  blockchain_not_starts_with: String\n  blockchain_not_starts_with_nocase: String\n  blockchain_starts_with: String\n  blockchain_starts_with_nocase: String\n  category: String\n  category_contains: String\n  category_contains_nocase: String\n  category_ends_with: String\n  category_ends_with_nocase: String\n  category_gt: String\n  category_gte: String\n  category_in: [String!]\n  category_lt: String\n  category_lte: String\n  category_not: String\n  category_not_contains: String\n  category_not_contains_nocase: String\n  category_not_ends_with: String\n  category_not_ends_with_nocase: String\n  category_not_in: [String!]\n  category_not_starts_with: String\n  category_not_starts_with_nocase: String\n  category_starts_with: String\n  category_starts_with_nocase: String\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  isBluechip: Boolean\n  isBluechip_in: [Boolean!]\n  isBluechip_not: Boolean\n  isBluechip_not_in: [Boolean!]\n  isLiquid: Boolean\n  isLiquid_in: [Boolean!]\n  isLiquid_not: Boolean\n  isLiquid_not_in: [Boolean!]\n  multiplier: BigDecimal\n  multiplier_gt: BigDecimal\n  multiplier_gte: BigDecimal\n  multiplier_in: [BigDecimal!]\n  multiplier_lt: BigDecimal\n  multiplier_lte: BigDecimal\n  multiplier_not: BigDecimal\n  multiplier_not_in: [BigDecimal!]\n  or: [TokenRecord_filter]\n  rate: BigDecimal\n  rate_gt: BigDecimal\n  rate_gte: BigDecimal\n  rate_in: [BigDecimal!]\n  rate_lt: BigDecimal\n  rate_lte: BigDecimal\n  rate_not: BigDecimal\n  rate_not_in: [BigDecimal!]\n  source: String\n  sourceAddress: String\n  sourceAddress_contains: String\n  sourceAddress_contains_nocase: String\n  sourceAddress_ends_with: String\n  sourceAddress_ends_with_nocase: String\n  sourceAddress_gt: String\n  sourceAddress_gte: String\n  sourceAddress_in: [String!]\n  sourceAddress_lt: String\n  sourceAddress_lte: String\n  sourceAddress_not: String\n  sourceAddress_not_contains: String\n  sourceAddress_not_contains_nocase: String\n  sourceAddress_not_ends_with: String\n  sourceAddress_not_ends_with_nocase: String\n  sourceAddress_not_in: [String!]\n  sourceAddress_not_starts_with: String\n  sourceAddress_not_starts_with_nocase: String\n  sourceAddress_starts_with: String\n  sourceAddress_starts_with_nocase: String\n  source_contains: String\n  source_contains_nocase: String\n  source_ends_with: String\n  source_ends_with_nocase: String\n  source_gt: String\n  source_gte: String\n  source_in: [String!]\n  source_lt: String\n  source_lte: String\n  source_not: String\n  source_not_contains: String\n  source_not_contains_nocase: String\n  source_not_ends_with: String\n  source_not_ends_with_nocase: String\n  source_not_in: [String!]\n  source_not_starts_with: String\n  source_not_starts_with_nocase: String\n  source_starts_with: String\n  source_starts_with_nocase: String\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  tokenAddress: String\n  tokenAddress_contains: String\n  tokenAddress_contains_nocase: String\n  tokenAddress_ends_with: String\n  tokenAddress_ends_with_nocase: String\n  tokenAddress_gt: String\n  tokenAddress_gte: String\n  tokenAddress_in: [String!]\n  tokenAddress_lt: String\n  tokenAddress_lte: String\n  tokenAddress_not: String\n  tokenAddress_not_contains: String\n  tokenAddress_not_contains_nocase: String\n  tokenAddress_not_ends_with: String\n  tokenAddress_not_ends_with_nocase: String\n  tokenAddress_not_in: [String!]\n  tokenAddress_not_starts_with: String\n  tokenAddress_not_starts_with_nocase: String\n  tokenAddress_starts_with: String\n  tokenAddress_starts_with_nocase: String\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  value: BigDecimal\n  valueExcludingOhm: BigDecimal\n  valueExcludingOhm_gt: BigDecimal\n  valueExcludingOhm_gte: BigDecimal\n  valueExcludingOhm_in: [BigDecimal!]\n  valueExcludingOhm_lt: BigDecimal\n  valueExcludingOhm_lte: BigDecimal\n  valueExcludingOhm_not: BigDecimal\n  valueExcludingOhm_not_in: [BigDecimal!]\n  value_gt: BigDecimal\n  value_gte: BigDecimal\n  value_in: [BigDecimal!]\n  value_lt: BigDecimal\n  value_lte: BigDecimal\n  value_not: BigDecimal\n  value_not_in: [BigDecimal!]\n}\n\nenum TokenRecord_orderBy {\n  balance\n  block\n  blockchain\n  category\n  date\n  id\n  isBluechip\n  isLiquid\n  multiplier\n  rate\n  source\n  sourceAddress\n  timestamp\n  token\n  tokenAddress\n  value\n  valueExcludingOhm\n}\n\ntype TokenSupply {\n  balance: BigDecimal!\n  block: BigInt!\n  date: String!\n  id: ID!\n  pool: String\n  poolAddress: String\n  source: String\n  sourceAddress: String\n  supplyBalance: BigDecimal!\n  timestamp: BigInt!\n  token: String!\n  tokenAddress: String!\n  type: String!\n}\n\ninput TokenSupply_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [TokenSupply_filter]\n  balance: BigDecimal\n  balance_gt: BigDecimal\n  balance_gte: BigDecimal\n  balance_in: [BigDecimal!]\n  balance_lt: BigDecimal\n  balance_lte: BigDecimal\n  balance_not: BigDecimal\n  balance_not_in: [BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [TokenSupply_filter]\n  pool: String\n  poolAddress: String\n  poolAddress_contains: String\n  poolAddress_contains_nocase: String\n  poolAddress_ends_with: String\n  poolAddress_ends_with_nocase: String\n  poolAddress_gt: String\n  poolAddress_gte: String\n  poolAddress_in: [String!]\n  poolAddress_lt: String\n  poolAddress_lte: String\n  poolAddress_not: String\n  poolAddress_not_contains: String\n  poolAddress_not_contains_nocase: String\n  poolAddress_not_ends_with: String\n  poolAddress_not_ends_with_nocase: String\n  poolAddress_not_in: [String!]\n  poolAddress_not_starts_with: String\n  poolAddress_not_starts_with_nocase: String\n  poolAddress_starts_with: String\n  poolAddress_starts_with_nocase: String\n  pool_contains: String\n  pool_contains_nocase: String\n  pool_ends_with: String\n  pool_ends_with_nocase: String\n  pool_gt: String\n  pool_gte: String\n  pool_in: [String!]\n  pool_lt: String\n  pool_lte: String\n  pool_not: String\n  pool_not_contains: String\n  pool_not_contains_nocase: String\n  pool_not_ends_with: String\n  pool_not_ends_with_nocase: String\n  pool_not_in: [String!]\n  pool_not_starts_with: String\n  pool_not_starts_with_nocase: String\n  pool_starts_with: String\n  pool_starts_with_nocase: String\n  source: String\n  sourceAddress: String\n  sourceAddress_contains: String\n  sourceAddress_contains_nocase: String\n  sourceAddress_ends_with: String\n  sourceAddress_ends_with_nocase: String\n  sourceAddress_gt: String\n  sourceAddress_gte: String\n  sourceAddress_in: [String!]\n  sourceAddress_lt: String\n  sourceAddress_lte: String\n  sourceAddress_not: String\n  sourceAddress_not_contains: String\n  sourceAddress_not_contains_nocase: String\n  sourceAddress_not_ends_with: String\n  sourceAddress_not_ends_with_nocase: String\n  sourceAddress_not_in: [String!]\n  sourceAddress_not_starts_with: String\n  sourceAddress_not_starts_with_nocase: String\n  sourceAddress_starts_with: String\n  sourceAddress_starts_with_nocase: String\n  source_contains: String\n  source_contains_nocase: String\n  source_ends_with: String\n  source_ends_with_nocase: String\n  source_gt: String\n  source_gte: String\n  source_in: [String!]\n  source_lt: String\n  source_lte: String\n  source_not: String\n  source_not_contains: String\n  source_not_contains_nocase: String\n  source_not_ends_with: String\n  source_not_ends_with_nocase: String\n  source_not_in: [String!]\n  source_not_starts_with: String\n  source_not_starts_with_nocase: String\n  source_starts_with: String\n  source_starts_with_nocase: String\n  supplyBalance: BigDecimal\n  supplyBalance_gt: BigDecimal\n  supplyBalance_gte: BigDecimal\n  supplyBalance_in: [BigDecimal!]\n  supplyBalance_lt: BigDecimal\n  supplyBalance_lte: BigDecimal\n  supplyBalance_not: BigDecimal\n  supplyBalance_not_in: [BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  tokenAddress: String\n  tokenAddress_contains: String\n  tokenAddress_contains_nocase: String\n  tokenAddress_ends_with: String\n  tokenAddress_ends_with_nocase: String\n  tokenAddress_gt: String\n  tokenAddress_gte: String\n  tokenAddress_in: [String!]\n  tokenAddress_lt: String\n  tokenAddress_lte: String\n  tokenAddress_not: String\n  tokenAddress_not_contains: String\n  tokenAddress_not_contains_nocase: String\n  tokenAddress_not_ends_with: String\n  tokenAddress_not_ends_with_nocase: String\n  tokenAddress_not_in: [String!]\n  tokenAddress_not_starts_with: String\n  tokenAddress_not_starts_with_nocase: String\n  tokenAddress_starts_with: String\n  tokenAddress_starts_with_nocase: String\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  type: String\n  type_contains: String\n  type_contains_nocase: String\n  type_ends_with: String\n  type_ends_with_nocase: String\n  type_gt: String\n  type_gte: String\n  type_in: [String!]\n  type_lt: String\n  type_lte: String\n  type_not: String\n  type_not_contains: String\n  type_not_contains_nocase: String\n  type_not_ends_with: String\n  type_not_ends_with_nocase: String\n  type_not_in: [String!]\n  type_not_starts_with: String\n  type_not_starts_with_nocase: String\n  type_starts_with: String\n  type_starts_with_nocase: String\n}\n\nenum TokenSupply_orderBy {\n  balance\n  block\n  date\n  id\n  pool\n  poolAddress\n  source\n  sourceAddress\n  supplyBalance\n  timestamp\n  token\n  tokenAddress\n  type\n}\n\ninput Token_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [Token_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [Token_filter]\n}\n\nenum Token_orderBy {\n  id\n}\n\ntype _Block_ {\n  \"The hash of the block\"\n  hash: Bytes\n  \"The block number\"\n  number: Int!\n  \"Integer representation of the timestamp stored in blocks for the chain\"\n  timestamp: Int\n}\n\n\"\"\"The type for the top-level _meta field\"\"\"\ntype _Meta_ {\n  \"Information about a specific subgraph block. The hash of the block\\nwill be null if the _meta field has a block constraint that asks for\\na block number. It will be filled if the _meta field has no block constraint\\nand therefore asks for the latest  block\\n\"\n  block: _Block_!\n  \"The deployment ID\"\n  deployment: String!\n  \"If `true`, the subgraph encountered indexing errors at some past block\"\n  hasIndexingErrors: Boolean!\n}\n\nenum _SubgraphErrorPolicy_ {\n  \"\"\"Data will be returned even if the subgraph has indexing errors\"\"\"\n  allow\n  \"\"\"\n  If the subgraph has indexing errors, data will be omitted. The default.\n  \"\"\"\n  deny\n}",
            "hooksConfiguration": {
              "onWSTransportConnectionInit": false
            },
            "customScalarTypeFields": []
          },
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "treasuryFantom__meta",
                "treasuryFantom_balancerPoolSnapshot",
                "treasuryFantom_balancerPoolSnapshots",
                "treasuryFantom_bondDiscount",
                "treasuryFantom_bondDiscounts",
                "treasuryFantom_convexRewardPoolSnapshot",
                "treasuryFantom_convexRewardPoolSnapshots",
                "treasuryFantom_dailyBond",
                "treasuryFantom_dailyBonds",
                "treasuryFantom_dailyStakingReward",
                "treasuryFantom_dailyStakingRewards",
                "treasuryFantom_erc20TokenSnapshot",
                "treasuryFantom_erc20TokenSnapshots",
                "treasuryFantom_gnosisAuction",
                "treasuryFantom_gnosisAuctionRoot",
                "treasuryFantom_gnosisAuctionRoots",
                "treasuryFantom_gnosisAuctions",
                "treasuryFantom_poolSnapshot",
                "treasuryFantom_poolSnapshots",
                "treasuryFantom_priceSnapshot",
                "treasuryFantom_priceSnapshots",
                "treasuryFantom_protocolMetric",
                "treasuryFantom_protocolMetrics",
                "treasuryFantom_rebase",
                "treasuryFantom_rebases",
                "treasuryFantom_stakingPoolSnapshot",
                "treasuryFantom_stakingPoolSnapshots",
                "treasuryFantom_token",
                "treasuryFantom_tokenPriceSnapshot",
                "treasuryFantom_tokenPriceSnapshots",
                "treasuryFantom_tokenRecord",
                "treasuryFantom_tokenRecords",
                "treasuryFantom_tokenSupplies",
                "treasuryFantom_tokenSupply",
                "treasuryFantom_tokens"
              ]
            },
            {
              "typeName": "Subscription",
              "fieldNames": [
                "treasuryFantom__meta",
                "treasuryFantom_balancerPoolSnapshot",
                "treasuryFantom_balancerPoolSnapshots",
                "treasuryFantom_bondDiscount",
                "treasuryFantom_bondDiscounts",
                "treasuryFantom_convexRewardPoolSnapshot",
                "treasuryFantom_convexRewardPoolSnapshots",
                "treasuryFantom_dailyBond",
                "treasuryFantom_dailyBonds",
                "treasuryFantom_dailyStakingReward",
                "treasuryFantom_dailyStakingRewards",
                "treasuryFantom_erc20TokenSnapshot",
                "treasuryFantom_erc20TokenSnapshots",
                "treasuryFantom_gnosisAuction",
                "treasuryFantom_gnosisAuctionRoot",
                "treasuryFantom_gnosisAuctionRoots",
                "treasuryFantom_gnosisAuctions",
                "treasuryFantom_poolSnapshot",
                "treasuryFantom_poolSnapshots",
                "treasuryFantom_priceSnapshot",
                "treasuryFantom_priceSnapshots",
                "treasuryFantom_protocolMetric",
                "treasuryFantom_protocolMetrics",
                "treasuryFantom_rebase",
                "treasuryFantom_rebases",
                "treasuryFantom_stakingPoolSnapshot",
                "treasuryFantom_stakingPoolSnapshots",
                "treasuryFantom_token",
                "treasuryFantom_tokenPriceSnapshot",
                "treasuryFantom_tokenPriceSnapshots",
                "treasuryFantom_tokenRecord",
                "treasuryFantom_tokenRecords",
                "treasuryFantom_tokenSupplies",
                "treasuryFantom_tokenSupply",
                "treasuryFantom_tokens"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "treasuryFantom_BalancerPoolSnapshot",
              "fieldNames": [
                "balances",
                "block",
                "decimals",
                "id",
                "pool",
                "poolToken",
                "tokens",
                "totalSupply",
                "weights"
              ]
            },
            {
              "typeName": "treasuryFantom_BondDiscount",
              "fieldNames": [
                "dai_discount",
                "eth_discount",
                "frax_discount",
                "id",
                "lusd_discount",
                "ohmdai_discount",
                "ohmfrax_discount",
                "ohmlusd_discount",
                "timestamp"
              ]
            },
            {
              "typeName": "treasuryFantom_ConvexRewardPoolSnapshot",
              "fieldNames": [
                "address",
                "block",
                "id",
                "stakingToken"
              ]
            },
            {
              "typeName": "treasuryFantom_DailyBond",
              "fieldNames": [
                "amount",
                "id",
                "timestamp",
                "token",
                "value"
              ]
            },
            {
              "typeName": "treasuryFantom_DailyStakingReward",
              "fieldNames": [
                "amount",
                "id",
                "timestamp",
                "value"
              ]
            },
            {
              "typeName": "treasuryFantom_ERC20TokenSnapshot",
              "fieldNames": [
                "address",
                "decimals",
                "id",
                "totalSupply"
              ]
            },
            {
              "typeName": "treasuryFantom_GnosisAuction",
              "fieldNames": [
                "auctionCloseTimestamp",
                "auctionOpenTimestamp",
                "bidQuantity",
                "id",
                "payoutCapacity",
                "termSeconds"
              ]
            },
            {
              "typeName": "treasuryFantom_GnosisAuctionRoot",
              "fieldNames": [
                "id",
                "markets"
              ]
            },
            {
              "typeName": "treasuryFantom_PoolSnapshot",
              "fieldNames": [
                "balances",
                "block",
                "decimals",
                "id",
                "pool",
                "poolToken",
                "tokens",
                "totalSupply",
                "weights"
              ]
            },
            {
              "typeName": "treasuryFantom_PriceSnapshot",
              "fieldNames": [
                "block",
                "date",
                "id",
                "priceGOhm",
                "priceOhm",
                "timestamp"
              ]
            },
            {
              "typeName": "treasuryFantom_ProtocolMetric",
              "fieldNames": [
                "block",
                "currentAPY",
                "currentIndex",
                "date",
                "gOhmPrice",
                "gOhmSyntheticSupply",
                "gOhmTotalSupply",
                "id",
                "marketCap",
                "nextDistributedOhm",
                "nextEpochRebase",
                "ohmCirculatingSupply",
                "ohmFloatingSupply",
                "ohmPrice",
                "ohmTotalSupply",
                "sOhmCirculatingSupply",
                "timestamp",
                "totalValueLocked",
                "treasuryLiquidBacking",
                "treasuryLiquidBackingPerGOhmSynthetic",
                "treasuryLiquidBackingPerOhmFloating",
                "treasuryMarketValue"
              ]
            },
            {
              "typeName": "treasuryFantom_Rebase",
              "fieldNames": [
                "amount",
                "contract",
                "id",
                "percentage",
                "stakedOhms",
                "timestamp",
                "value"
              ]
            },
            {
              "typeName": "treasuryFantom_StakingPoolSnapshot",
              "fieldNames": [
                "block",
                "contractAddress",
                "id",
                "stakingToken"
              ]
            },
            {
              "typeName": "treasuryFantom_Token",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "treasuryFantom_TokenPriceSnapshot",
              "fieldNames": [
                "block",
                "id",
                "price",
                "token"
              ]
            },
            {
              "typeName": "treasuryFantom_TokenRecord",
              "fieldNames": [
                "balance",
                "block",
                "blockchain",
                "category",
                "date",
                "id",
                "isBluechip",
                "isLiquid",
                "multiplier",
                "rate",
                "source",
                "sourceAddress",
                "timestamp",
                "token",
                "tokenAddress",
                "value",
                "valueExcludingOhm"
              ]
            },
            {
              "typeName": "treasuryFantom_TokenSupply",
              "fieldNames": [
                "balance",
                "block",
                "date",
                "id",
                "pool",
                "poolAddress",
                "source",
                "sourceAddress",
                "supplyBalance",
                "timestamp",
                "token",
                "tokenAddress",
                "type"
              ]
            },
            {
              "typeName": "treasuryFantom__Block_",
              "fieldNames": [
                "hash",
                "number",
                "timestamp"
              ]
            },
            {
              "typeName": "treasuryFantom__Meta_",
              "fieldNames": [
                "block",
                "deployment",
                "hasIndexingErrors"
              ]
            }
          ],
          "overrideFieldPathFromAlias": true,
          "directives": [
            {
              "directiveName": "treasuryFantom_derivedFrom",
              "renameTo": "derivedFrom"
            },
            {
              "directiveName": "treasuryFantom_entity",
              "renameTo": "entity"
            },
            {
              "directiveName": "treasuryFantom_subgraphId",
              "renameTo": "subgraphId"
            }
          ],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 2,
          "customGraphql": {
            "fetch": {
              "url": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": "https://api.thegraph.com/subgraphs/name/olympusdao/protocol-metrics-polygon"
              },
              "baseUrl": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": ""
              },
              "path": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": ""
              },
              "method": 1,
              "body": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": ""
              },
              "header": {},
              "query": [],
              "urlEncodeBody": false
            },
            "federation": {
              "enabled": false,
              "serviceSdl": ""
            },
            "subscription": {
              "enabled": true,
              "url": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": "https://api.thegraph.com/subgraphs/name/olympusdao/protocol-metrics-polygon"
              },
              "useSSE": false
            },
            "upstreamSchema": "\"\"\"\ncreates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.\n\"\"\"\ndirective @derivedFrom(field: String!) on FIELD_DEFINITION\n\n\"\"\"\nMarks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.\n\"\"\"\ndirective @entity on OBJECT\n\n\"\"\"Defined a Subgraph ID for an object type\"\"\"\ndirective @subgraphId(id: String!) on OBJECT\n\ntype BalancerPoolSnapshot {\n  balances: [BigDecimal!]!\n  block: BigInt!\n  decimals: Int!\n  id: ID!\n  pool: Bytes!\n  poolToken: Bytes!\n  tokens: [Bytes!]!\n  totalSupply: BigDecimal!\n  weights: [BigDecimal!]!\n}\n\ninput BalancerPoolSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [BalancerPoolSnapshot_filter]\n  balances: [BigDecimal!]\n  balances_contains: [BigDecimal!]\n  balances_contains_nocase: [BigDecimal!]\n  balances_not: [BigDecimal!]\n  balances_not_contains: [BigDecimal!]\n  balances_not_contains_nocase: [BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [BalancerPoolSnapshot_filter]\n  pool: Bytes\n  poolToken: Bytes\n  poolToken_contains: Bytes\n  poolToken_gt: Bytes\n  poolToken_gte: Bytes\n  poolToken_in: [Bytes!]\n  poolToken_lt: Bytes\n  poolToken_lte: Bytes\n  poolToken_not: Bytes\n  poolToken_not_contains: Bytes\n  poolToken_not_in: [Bytes!]\n  pool_contains: Bytes\n  pool_gt: Bytes\n  pool_gte: Bytes\n  pool_in: [Bytes!]\n  pool_lt: Bytes\n  pool_lte: Bytes\n  pool_not: Bytes\n  pool_not_contains: Bytes\n  pool_not_in: [Bytes!]\n  tokens: [Bytes!]\n  tokens_contains: [Bytes!]\n  tokens_contains_nocase: [Bytes!]\n  tokens_not: [Bytes!]\n  tokens_not_contains: [Bytes!]\n  tokens_not_contains_nocase: [Bytes!]\n  totalSupply: BigDecimal\n  totalSupply_gt: BigDecimal\n  totalSupply_gte: BigDecimal\n  totalSupply_in: [BigDecimal!]\n  totalSupply_lt: BigDecimal\n  totalSupply_lte: BigDecimal\n  totalSupply_not: BigDecimal\n  totalSupply_not_in: [BigDecimal!]\n  weights: [BigDecimal!]\n  weights_contains: [BigDecimal!]\n  weights_contains_nocase: [BigDecimal!]\n  weights_not: [BigDecimal!]\n  weights_not_contains: [BigDecimal!]\n  weights_not_contains_nocase: [BigDecimal!]\n}\n\nenum BalancerPoolSnapshot_orderBy {\n  balances\n  block\n  decimals\n  id\n  pool\n  poolToken\n  tokens\n  totalSupply\n  weights\n}\n\nscalar BigDecimal\n\nscalar BigInt\n\ninput BlockChangedFilter {\n  number_gte: Int!\n}\n\ninput Block_height {\n  hash: Bytes\n  number: Int\n  number_gte: Int\n}\n\ntype BondDiscount {\n  dai_discount: BigDecimal!\n  eth_discount: BigDecimal!\n  frax_discount: BigDecimal!\n  id: ID!\n  lusd_discount: BigDecimal!\n  ohmdai_discount: BigDecimal!\n  ohmfrax_discount: BigDecimal!\n  ohmlusd_discount: BigDecimal!\n  timestamp: BigInt!\n}\n\ninput BondDiscount_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [BondDiscount_filter]\n  dai_discount: BigDecimal\n  dai_discount_gt: BigDecimal\n  dai_discount_gte: BigDecimal\n  dai_discount_in: [BigDecimal!]\n  dai_discount_lt: BigDecimal\n  dai_discount_lte: BigDecimal\n  dai_discount_not: BigDecimal\n  dai_discount_not_in: [BigDecimal!]\n  eth_discount: BigDecimal\n  eth_discount_gt: BigDecimal\n  eth_discount_gte: BigDecimal\n  eth_discount_in: [BigDecimal!]\n  eth_discount_lt: BigDecimal\n  eth_discount_lte: BigDecimal\n  eth_discount_not: BigDecimal\n  eth_discount_not_in: [BigDecimal!]\n  frax_discount: BigDecimal\n  frax_discount_gt: BigDecimal\n  frax_discount_gte: BigDecimal\n  frax_discount_in: [BigDecimal!]\n  frax_discount_lt: BigDecimal\n  frax_discount_lte: BigDecimal\n  frax_discount_not: BigDecimal\n  frax_discount_not_in: [BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  lusd_discount: BigDecimal\n  lusd_discount_gt: BigDecimal\n  lusd_discount_gte: BigDecimal\n  lusd_discount_in: [BigDecimal!]\n  lusd_discount_lt: BigDecimal\n  lusd_discount_lte: BigDecimal\n  lusd_discount_not: BigDecimal\n  lusd_discount_not_in: [BigDecimal!]\n  ohmdai_discount: BigDecimal\n  ohmdai_discount_gt: BigDecimal\n  ohmdai_discount_gte: BigDecimal\n  ohmdai_discount_in: [BigDecimal!]\n  ohmdai_discount_lt: BigDecimal\n  ohmdai_discount_lte: BigDecimal\n  ohmdai_discount_not: BigDecimal\n  ohmdai_discount_not_in: [BigDecimal!]\n  ohmfrax_discount: BigDecimal\n  ohmfrax_discount_gt: BigDecimal\n  ohmfrax_discount_gte: BigDecimal\n  ohmfrax_discount_in: [BigDecimal!]\n  ohmfrax_discount_lt: BigDecimal\n  ohmfrax_discount_lte: BigDecimal\n  ohmfrax_discount_not: BigDecimal\n  ohmfrax_discount_not_in: [BigDecimal!]\n  ohmlusd_discount: BigDecimal\n  ohmlusd_discount_gt: BigDecimal\n  ohmlusd_discount_gte: BigDecimal\n  ohmlusd_discount_in: [BigDecimal!]\n  ohmlusd_discount_lt: BigDecimal\n  ohmlusd_discount_lte: BigDecimal\n  ohmlusd_discount_not: BigDecimal\n  ohmlusd_discount_not_in: [BigDecimal!]\n  or: [BondDiscount_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n}\n\nenum BondDiscount_orderBy {\n  dai_discount\n  eth_discount\n  frax_discount\n  id\n  lusd_discount\n  ohmdai_discount\n  ohmfrax_discount\n  ohmlusd_discount\n  timestamp\n}\n\nscalar Bytes\n\ntype ConvexRewardPoolSnapshot {\n  address: Bytes!\n  block: BigInt!\n  id: ID!\n  stakingToken: Bytes!\n}\n\ninput ConvexRewardPoolSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  address: Bytes\n  address_contains: Bytes\n  address_gt: Bytes\n  address_gte: Bytes\n  address_in: [Bytes!]\n  address_lt: Bytes\n  address_lte: Bytes\n  address_not: Bytes\n  address_not_contains: Bytes\n  address_not_in: [Bytes!]\n  and: [ConvexRewardPoolSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [ConvexRewardPoolSnapshot_filter]\n  stakingToken: Bytes\n  stakingToken_contains: Bytes\n  stakingToken_gt: Bytes\n  stakingToken_gte: Bytes\n  stakingToken_in: [Bytes!]\n  stakingToken_lt: Bytes\n  stakingToken_lte: Bytes\n  stakingToken_not: Bytes\n  stakingToken_not_contains: Bytes\n  stakingToken_not_in: [Bytes!]\n}\n\nenum ConvexRewardPoolSnapshot_orderBy {\n  address\n  block\n  id\n  stakingToken\n}\n\ntype DailyBond {\n  amount: BigDecimal!\n  id: ID!\n  timestamp: BigInt!\n  token: Token!\n  value: BigDecimal!\n}\n\ninput DailyBond_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  amount: BigDecimal\n  amount_gt: BigDecimal\n  amount_gte: BigDecimal\n  amount_in: [BigDecimal!]\n  amount_lt: BigDecimal\n  amount_lte: BigDecimal\n  amount_not: BigDecimal\n  amount_not_in: [BigDecimal!]\n  and: [DailyBond_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [DailyBond_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  token_: Token_filter\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  value: BigDecimal\n  value_gt: BigDecimal\n  value_gte: BigDecimal\n  value_in: [BigDecimal!]\n  value_lt: BigDecimal\n  value_lte: BigDecimal\n  value_not: BigDecimal\n  value_not_in: [BigDecimal!]\n}\n\nenum DailyBond_orderBy {\n  amount\n  id\n  timestamp\n  token\n  token__id\n  value\n}\n\ntype DailyStakingReward {\n  amount: BigDecimal!\n  id: ID!\n  timestamp: BigInt!\n  value: BigDecimal!\n}\n\ninput DailyStakingReward_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  amount: BigDecimal\n  amount_gt: BigDecimal\n  amount_gte: BigDecimal\n  amount_in: [BigDecimal!]\n  amount_lt: BigDecimal\n  amount_lte: BigDecimal\n  amount_not: BigDecimal\n  amount_not_in: [BigDecimal!]\n  and: [DailyStakingReward_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [DailyStakingReward_filter]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  value: BigDecimal\n  value_gt: BigDecimal\n  value_gte: BigDecimal\n  value_in: [BigDecimal!]\n  value_lt: BigDecimal\n  value_lte: BigDecimal\n  value_not: BigDecimal\n  value_not_in: [BigDecimal!]\n}\n\nenum DailyStakingReward_orderBy {\n  amount\n  id\n  timestamp\n  value\n}\n\ntype ERC20TokenSnapshot {\n  address: Bytes!\n  decimals: Int!\n  id: ID!\n  totalSupply: BigDecimal\n}\n\ninput ERC20TokenSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  address: Bytes\n  address_contains: Bytes\n  address_gt: Bytes\n  address_gte: Bytes\n  address_in: [Bytes!]\n  address_lt: Bytes\n  address_lte: Bytes\n  address_not: Bytes\n  address_not_contains: Bytes\n  address_not_in: [Bytes!]\n  and: [ERC20TokenSnapshot_filter]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [ERC20TokenSnapshot_filter]\n  totalSupply: BigDecimal\n  totalSupply_gt: BigDecimal\n  totalSupply_gte: BigDecimal\n  totalSupply_in: [BigDecimal!]\n  totalSupply_lt: BigDecimal\n  totalSupply_lte: BigDecimal\n  totalSupply_not: BigDecimal\n  totalSupply_not_in: [BigDecimal!]\n}\n\nenum ERC20TokenSnapshot_orderBy {\n  address\n  decimals\n  id\n  totalSupply\n}\n\ntype GnosisAuction {\n  auctionCloseTimestamp: BigInt\n  auctionOpenTimestamp: BigInt!\n  bidQuantity: BigDecimal\n  id: ID!\n  payoutCapacity: BigDecimal!\n  termSeconds: BigInt!\n}\n\ntype GnosisAuctionRoot {\n  id: ID!\n  markets: [BigInt!]!\n}\n\ninput GnosisAuctionRoot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [GnosisAuctionRoot_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  markets: [BigInt!]\n  markets_contains: [BigInt!]\n  markets_contains_nocase: [BigInt!]\n  markets_not: [BigInt!]\n  markets_not_contains: [BigInt!]\n  markets_not_contains_nocase: [BigInt!]\n  or: [GnosisAuctionRoot_filter]\n}\n\nenum GnosisAuctionRoot_orderBy {\n  id\n  markets\n}\n\ninput GnosisAuction_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [GnosisAuction_filter]\n  auctionCloseTimestamp: BigInt\n  auctionCloseTimestamp_gt: BigInt\n  auctionCloseTimestamp_gte: BigInt\n  auctionCloseTimestamp_in: [BigInt!]\n  auctionCloseTimestamp_lt: BigInt\n  auctionCloseTimestamp_lte: BigInt\n  auctionCloseTimestamp_not: BigInt\n  auctionCloseTimestamp_not_in: [BigInt!]\n  auctionOpenTimestamp: BigInt\n  auctionOpenTimestamp_gt: BigInt\n  auctionOpenTimestamp_gte: BigInt\n  auctionOpenTimestamp_in: [BigInt!]\n  auctionOpenTimestamp_lt: BigInt\n  auctionOpenTimestamp_lte: BigInt\n  auctionOpenTimestamp_not: BigInt\n  auctionOpenTimestamp_not_in: [BigInt!]\n  bidQuantity: BigDecimal\n  bidQuantity_gt: BigDecimal\n  bidQuantity_gte: BigDecimal\n  bidQuantity_in: [BigDecimal!]\n  bidQuantity_lt: BigDecimal\n  bidQuantity_lte: BigDecimal\n  bidQuantity_not: BigDecimal\n  bidQuantity_not_in: [BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [GnosisAuction_filter]\n  payoutCapacity: BigDecimal\n  payoutCapacity_gt: BigDecimal\n  payoutCapacity_gte: BigDecimal\n  payoutCapacity_in: [BigDecimal!]\n  payoutCapacity_lt: BigDecimal\n  payoutCapacity_lte: BigDecimal\n  payoutCapacity_not: BigDecimal\n  payoutCapacity_not_in: [BigDecimal!]\n  termSeconds: BigInt\n  termSeconds_gt: BigInt\n  termSeconds_gte: BigInt\n  termSeconds_in: [BigInt!]\n  termSeconds_lt: BigInt\n  termSeconds_lte: BigInt\n  termSeconds_not: BigInt\n  termSeconds_not_in: [BigInt!]\n}\n\nenum GnosisAuction_orderBy {\n  auctionCloseTimestamp\n  auctionOpenTimestamp\n  bidQuantity\n  id\n  payoutCapacity\n  termSeconds\n}\n\n\"\"\"Defines the order direction, either ascending or descending\"\"\"\nenum OrderDirection {\n  asc\n  desc\n}\n\ntype PoolSnapshot {\n  balances: [BigDecimal!]!\n  block: BigInt!\n  decimals: Int!\n  id: ID!\n  pool: Bytes!\n  poolToken: Bytes\n  tokens: [Bytes!]!\n  totalSupply: BigDecimal!\n  weights: [BigDecimal!]\n}\n\ninput PoolSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [PoolSnapshot_filter]\n  balances: [BigDecimal!]\n  balances_contains: [BigDecimal!]\n  balances_contains_nocase: [BigDecimal!]\n  balances_not: [BigDecimal!]\n  balances_not_contains: [BigDecimal!]\n  balances_not_contains_nocase: [BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  decimals: Int\n  decimals_gt: Int\n  decimals_gte: Int\n  decimals_in: [Int!]\n  decimals_lt: Int\n  decimals_lte: Int\n  decimals_not: Int\n  decimals_not_in: [Int!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [PoolSnapshot_filter]\n  pool: Bytes\n  poolToken: Bytes\n  poolToken_contains: Bytes\n  poolToken_gt: Bytes\n  poolToken_gte: Bytes\n  poolToken_in: [Bytes!]\n  poolToken_lt: Bytes\n  poolToken_lte: Bytes\n  poolToken_not: Bytes\n  poolToken_not_contains: Bytes\n  poolToken_not_in: [Bytes!]\n  pool_contains: Bytes\n  pool_gt: Bytes\n  pool_gte: Bytes\n  pool_in: [Bytes!]\n  pool_lt: Bytes\n  pool_lte: Bytes\n  pool_not: Bytes\n  pool_not_contains: Bytes\n  pool_not_in: [Bytes!]\n  tokens: [Bytes!]\n  tokens_contains: [Bytes!]\n  tokens_contains_nocase: [Bytes!]\n  tokens_not: [Bytes!]\n  tokens_not_contains: [Bytes!]\n  tokens_not_contains_nocase: [Bytes!]\n  totalSupply: BigDecimal\n  totalSupply_gt: BigDecimal\n  totalSupply_gte: BigDecimal\n  totalSupply_in: [BigDecimal!]\n  totalSupply_lt: BigDecimal\n  totalSupply_lte: BigDecimal\n  totalSupply_not: BigDecimal\n  totalSupply_not_in: [BigDecimal!]\n  weights: [BigDecimal!]\n  weights_contains: [BigDecimal!]\n  weights_contains_nocase: [BigDecimal!]\n  weights_not: [BigDecimal!]\n  weights_not_contains: [BigDecimal!]\n  weights_not_contains_nocase: [BigDecimal!]\n}\n\nenum PoolSnapshot_orderBy {\n  balances\n  block\n  decimals\n  id\n  pool\n  poolToken\n  tokens\n  totalSupply\n  weights\n}\n\ntype PriceSnapshot {\n  block: BigInt!\n  date: String!\n  id: ID!\n  priceGOhm: BigDecimal!\n  priceOhm: BigDecimal!\n  timestamp: BigInt!\n}\n\ninput PriceSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [PriceSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [PriceSnapshot_filter]\n  priceGOhm: BigDecimal\n  priceGOhm_gt: BigDecimal\n  priceGOhm_gte: BigDecimal\n  priceGOhm_in: [BigDecimal!]\n  priceGOhm_lt: BigDecimal\n  priceGOhm_lte: BigDecimal\n  priceGOhm_not: BigDecimal\n  priceGOhm_not_in: [BigDecimal!]\n  priceOhm: BigDecimal\n  priceOhm_gt: BigDecimal\n  priceOhm_gte: BigDecimal\n  priceOhm_in: [BigDecimal!]\n  priceOhm_lt: BigDecimal\n  priceOhm_lte: BigDecimal\n  priceOhm_not: BigDecimal\n  priceOhm_not_in: [BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n}\n\nenum PriceSnapshot_orderBy {\n  block\n  date\n  id\n  priceGOhm\n  priceOhm\n  timestamp\n}\n\ntype ProtocolMetric {\n  block: BigInt!\n  currentAPY: BigDecimal!\n  currentIndex: BigDecimal!\n  date: String!\n  gOhmPrice: BigDecimal!\n  gOhmSyntheticSupply: BigDecimal\n  gOhmTotalSupply: BigDecimal!\n  id: ID!\n  marketCap: BigDecimal\n  nextDistributedOhm: BigDecimal!\n  nextEpochRebase: BigDecimal!\n  ohmCirculatingSupply: BigDecimal\n  ohmFloatingSupply: BigDecimal\n  ohmPrice: BigDecimal!\n  ohmTotalSupply: BigDecimal!\n  sOhmCirculatingSupply: BigDecimal!\n  timestamp: BigInt!\n  totalValueLocked: BigDecimal!\n  treasuryLiquidBacking: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic: BigDecimal\n  treasuryLiquidBackingPerOhmFloating: BigDecimal\n  treasuryMarketValue: BigDecimal\n}\n\ninput ProtocolMetric_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [ProtocolMetric_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  currentAPY: BigDecimal\n  currentAPY_gt: BigDecimal\n  currentAPY_gte: BigDecimal\n  currentAPY_in: [BigDecimal!]\n  currentAPY_lt: BigDecimal\n  currentAPY_lte: BigDecimal\n  currentAPY_not: BigDecimal\n  currentAPY_not_in: [BigDecimal!]\n  currentIndex: BigDecimal\n  currentIndex_gt: BigDecimal\n  currentIndex_gte: BigDecimal\n  currentIndex_in: [BigDecimal!]\n  currentIndex_lt: BigDecimal\n  currentIndex_lte: BigDecimal\n  currentIndex_not: BigDecimal\n  currentIndex_not_in: [BigDecimal!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  gOhmPrice: BigDecimal\n  gOhmPrice_gt: BigDecimal\n  gOhmPrice_gte: BigDecimal\n  gOhmPrice_in: [BigDecimal!]\n  gOhmPrice_lt: BigDecimal\n  gOhmPrice_lte: BigDecimal\n  gOhmPrice_not: BigDecimal\n  gOhmPrice_not_in: [BigDecimal!]\n  gOhmSyntheticSupply: BigDecimal\n  gOhmSyntheticSupply_gt: BigDecimal\n  gOhmSyntheticSupply_gte: BigDecimal\n  gOhmSyntheticSupply_in: [BigDecimal!]\n  gOhmSyntheticSupply_lt: BigDecimal\n  gOhmSyntheticSupply_lte: BigDecimal\n  gOhmSyntheticSupply_not: BigDecimal\n  gOhmSyntheticSupply_not_in: [BigDecimal!]\n  gOhmTotalSupply: BigDecimal\n  gOhmTotalSupply_gt: BigDecimal\n  gOhmTotalSupply_gte: BigDecimal\n  gOhmTotalSupply_in: [BigDecimal!]\n  gOhmTotalSupply_lt: BigDecimal\n  gOhmTotalSupply_lte: BigDecimal\n  gOhmTotalSupply_not: BigDecimal\n  gOhmTotalSupply_not_in: [BigDecimal!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  marketCap: BigDecimal\n  marketCap_gt: BigDecimal\n  marketCap_gte: BigDecimal\n  marketCap_in: [BigDecimal!]\n  marketCap_lt: BigDecimal\n  marketCap_lte: BigDecimal\n  marketCap_not: BigDecimal\n  marketCap_not_in: [BigDecimal!]\n  nextDistributedOhm: BigDecimal\n  nextDistributedOhm_gt: BigDecimal\n  nextDistributedOhm_gte: BigDecimal\n  nextDistributedOhm_in: [BigDecimal!]\n  nextDistributedOhm_lt: BigDecimal\n  nextDistributedOhm_lte: BigDecimal\n  nextDistributedOhm_not: BigDecimal\n  nextDistributedOhm_not_in: [BigDecimal!]\n  nextEpochRebase: BigDecimal\n  nextEpochRebase_gt: BigDecimal\n  nextEpochRebase_gte: BigDecimal\n  nextEpochRebase_in: [BigDecimal!]\n  nextEpochRebase_lt: BigDecimal\n  nextEpochRebase_lte: BigDecimal\n  nextEpochRebase_not: BigDecimal\n  nextEpochRebase_not_in: [BigDecimal!]\n  ohmCirculatingSupply: BigDecimal\n  ohmCirculatingSupply_gt: BigDecimal\n  ohmCirculatingSupply_gte: BigDecimal\n  ohmCirculatingSupply_in: [BigDecimal!]\n  ohmCirculatingSupply_lt: BigDecimal\n  ohmCirculatingSupply_lte: BigDecimal\n  ohmCirculatingSupply_not: BigDecimal\n  ohmCirculatingSupply_not_in: [BigDecimal!]\n  ohmFloatingSupply: BigDecimal\n  ohmFloatingSupply_gt: BigDecimal\n  ohmFloatingSupply_gte: BigDecimal\n  ohmFloatingSupply_in: [BigDecimal!]\n  ohmFloatingSupply_lt: BigDecimal\n  ohmFloatingSupply_lte: BigDecimal\n  ohmFloatingSupply_not: BigDecimal\n  ohmFloatingSupply_not_in: [BigDecimal!]\n  ohmPrice: BigDecimal\n  ohmPrice_gt: BigDecimal\n  ohmPrice_gte: BigDecimal\n  ohmPrice_in: [BigDecimal!]\n  ohmPrice_lt: BigDecimal\n  ohmPrice_lte: BigDecimal\n  ohmPrice_not: BigDecimal\n  ohmPrice_not_in: [BigDecimal!]\n  ohmTotalSupply: BigDecimal\n  ohmTotalSupply_gt: BigDecimal\n  ohmTotalSupply_gte: BigDecimal\n  ohmTotalSupply_in: [BigDecimal!]\n  ohmTotalSupply_lt: BigDecimal\n  ohmTotalSupply_lte: BigDecimal\n  ohmTotalSupply_not: BigDecimal\n  ohmTotalSupply_not_in: [BigDecimal!]\n  or: [ProtocolMetric_filter]\n  sOhmCirculatingSupply: BigDecimal\n  sOhmCirculatingSupply_gt: BigDecimal\n  sOhmCirculatingSupply_gte: BigDecimal\n  sOhmCirculatingSupply_in: [BigDecimal!]\n  sOhmCirculatingSupply_lt: BigDecimal\n  sOhmCirculatingSupply_lte: BigDecimal\n  sOhmCirculatingSupply_not: BigDecimal\n  sOhmCirculatingSupply_not_in: [BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  totalValueLocked: BigDecimal\n  totalValueLocked_gt: BigDecimal\n  totalValueLocked_gte: BigDecimal\n  totalValueLocked_in: [BigDecimal!]\n  totalValueLocked_lt: BigDecimal\n  totalValueLocked_lte: BigDecimal\n  totalValueLocked_not: BigDecimal\n  totalValueLocked_not_in: [BigDecimal!]\n  treasuryLiquidBacking: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_gt: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_gte: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_in: [BigDecimal!]\n  treasuryLiquidBackingPerGOhmSynthetic_lt: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_lte: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_not: BigDecimal\n  treasuryLiquidBackingPerGOhmSynthetic_not_in: [BigDecimal!]\n  treasuryLiquidBackingPerOhmFloating: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_gt: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_gte: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_in: [BigDecimal!]\n  treasuryLiquidBackingPerOhmFloating_lt: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_lte: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_not: BigDecimal\n  treasuryLiquidBackingPerOhmFloating_not_in: [BigDecimal!]\n  treasuryLiquidBacking_gt: BigDecimal\n  treasuryLiquidBacking_gte: BigDecimal\n  treasuryLiquidBacking_in: [BigDecimal!]\n  treasuryLiquidBacking_lt: BigDecimal\n  treasuryLiquidBacking_lte: BigDecimal\n  treasuryLiquidBacking_not: BigDecimal\n  treasuryLiquidBacking_not_in: [BigDecimal!]\n  treasuryMarketValue: BigDecimal\n  treasuryMarketValue_gt: BigDecimal\n  treasuryMarketValue_gte: BigDecimal\n  treasuryMarketValue_in: [BigDecimal!]\n  treasuryMarketValue_lt: BigDecimal\n  treasuryMarketValue_lte: BigDecimal\n  treasuryMarketValue_not: BigDecimal\n  treasuryMarketValue_not_in: [BigDecimal!]\n}\n\nenum ProtocolMetric_orderBy {\n  block\n  currentAPY\n  currentIndex\n  date\n  gOhmPrice\n  gOhmSyntheticSupply\n  gOhmTotalSupply\n  id\n  marketCap\n  nextDistributedOhm\n  nextEpochRebase\n  ohmCirculatingSupply\n  ohmFloatingSupply\n  ohmPrice\n  ohmTotalSupply\n  sOhmCirculatingSupply\n  timestamp\n  totalValueLocked\n  treasuryLiquidBacking\n  treasuryLiquidBackingPerGOhmSynthetic\n  treasuryLiquidBackingPerOhmFloating\n  treasuryMarketValue\n}\n\ntype Query {\n  \"Access to subgraph metadata\"\n  _meta(block: Block_height): _Meta_\n  balancerPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): BalancerPoolSnapshot\n  balancerPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: BalancerPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: BalancerPoolSnapshot_filter\n  ): [BalancerPoolSnapshot!]!\n  bondDiscount(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): BondDiscount\n  bondDiscounts(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: BondDiscount_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: BondDiscount_filter\n  ): [BondDiscount!]!\n  convexRewardPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ConvexRewardPoolSnapshot\n  convexRewardPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ConvexRewardPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ConvexRewardPoolSnapshot_filter\n  ): [ConvexRewardPoolSnapshot!]!\n  dailyBond(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): DailyBond\n  dailyBonds(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: DailyBond_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: DailyBond_filter\n  ): [DailyBond!]!\n  dailyStakingReward(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): DailyStakingReward\n  dailyStakingRewards(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: DailyStakingReward_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: DailyStakingReward_filter\n  ): [DailyStakingReward!]!\n  erc20TokenSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ERC20TokenSnapshot\n  erc20TokenSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ERC20TokenSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ERC20TokenSnapshot_filter\n  ): [ERC20TokenSnapshot!]!\n  gnosisAuction(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): GnosisAuction\n  gnosisAuctionRoot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): GnosisAuctionRoot\n  gnosisAuctionRoots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: GnosisAuctionRoot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: GnosisAuctionRoot_filter\n  ): [GnosisAuctionRoot!]!\n  gnosisAuctions(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: GnosisAuction_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: GnosisAuction_filter\n  ): [GnosisAuction!]!\n  poolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PoolSnapshot\n  poolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: PoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: PoolSnapshot_filter\n  ): [PoolSnapshot!]!\n  priceSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PriceSnapshot\n  priceSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: PriceSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: PriceSnapshot_filter\n  ): [PriceSnapshot!]!\n  protocolMetric(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ProtocolMetric\n  protocolMetrics(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ProtocolMetric_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ProtocolMetric_filter\n  ): [ProtocolMetric!]!\n  rebase(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Rebase\n  rebases(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: Rebase_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: Rebase_filter\n  ): [Rebase!]!\n  stakingPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): StakingPoolSnapshot\n  stakingPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: StakingPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: StakingPoolSnapshot_filter\n  ): [StakingPoolSnapshot!]!\n  token(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Token\n  tokenPriceSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenPriceSnapshot\n  tokenPriceSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenPriceSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenPriceSnapshot_filter\n  ): [TokenPriceSnapshot!]!\n  tokenRecord(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenRecord\n  tokenRecords(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenRecord_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenRecord_filter\n  ): [TokenRecord!]!\n  tokenSupplies(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenSupply_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenSupply_filter\n  ): [TokenSupply!]!\n  tokenSupply(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenSupply\n  tokens(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: Token_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: Token_filter\n  ): [Token!]!\n}\n\ntype Rebase {\n  amount: BigDecimal!\n  contract: String!\n  id: ID!\n  percentage: BigDecimal!\n  stakedOhms: BigDecimal!\n  timestamp: BigInt!\n  value: BigDecimal!\n}\n\ninput Rebase_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  amount: BigDecimal\n  amount_gt: BigDecimal\n  amount_gte: BigDecimal\n  amount_in: [BigDecimal!]\n  amount_lt: BigDecimal\n  amount_lte: BigDecimal\n  amount_not: BigDecimal\n  amount_not_in: [BigDecimal!]\n  and: [Rebase_filter]\n  contract: String\n  contract_contains: String\n  contract_contains_nocase: String\n  contract_ends_with: String\n  contract_ends_with_nocase: String\n  contract_gt: String\n  contract_gte: String\n  contract_in: [String!]\n  contract_lt: String\n  contract_lte: String\n  contract_not: String\n  contract_not_contains: String\n  contract_not_contains_nocase: String\n  contract_not_ends_with: String\n  contract_not_ends_with_nocase: String\n  contract_not_in: [String!]\n  contract_not_starts_with: String\n  contract_not_starts_with_nocase: String\n  contract_starts_with: String\n  contract_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [Rebase_filter]\n  percentage: BigDecimal\n  percentage_gt: BigDecimal\n  percentage_gte: BigDecimal\n  percentage_in: [BigDecimal!]\n  percentage_lt: BigDecimal\n  percentage_lte: BigDecimal\n  percentage_not: BigDecimal\n  percentage_not_in: [BigDecimal!]\n  stakedOhms: BigDecimal\n  stakedOhms_gt: BigDecimal\n  stakedOhms_gte: BigDecimal\n  stakedOhms_in: [BigDecimal!]\n  stakedOhms_lt: BigDecimal\n  stakedOhms_lte: BigDecimal\n  stakedOhms_not: BigDecimal\n  stakedOhms_not_in: [BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  value: BigDecimal\n  value_gt: BigDecimal\n  value_gte: BigDecimal\n  value_in: [BigDecimal!]\n  value_lt: BigDecimal\n  value_lte: BigDecimal\n  value_not: BigDecimal\n  value_not_in: [BigDecimal!]\n}\n\nenum Rebase_orderBy {\n  amount\n  contract\n  id\n  percentage\n  stakedOhms\n  timestamp\n  value\n}\n\ntype StakingPoolSnapshot {\n  block: BigInt!\n  contractAddress: Bytes!\n  id: ID!\n  stakingToken: Bytes\n}\n\ninput StakingPoolSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [StakingPoolSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  contractAddress: Bytes\n  contractAddress_contains: Bytes\n  contractAddress_gt: Bytes\n  contractAddress_gte: Bytes\n  contractAddress_in: [Bytes!]\n  contractAddress_lt: Bytes\n  contractAddress_lte: Bytes\n  contractAddress_not: Bytes\n  contractAddress_not_contains: Bytes\n  contractAddress_not_in: [Bytes!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [StakingPoolSnapshot_filter]\n  stakingToken: Bytes\n  stakingToken_contains: Bytes\n  stakingToken_gt: Bytes\n  stakingToken_gte: Bytes\n  stakingToken_in: [Bytes!]\n  stakingToken_lt: Bytes\n  stakingToken_lte: Bytes\n  stakingToken_not: Bytes\n  stakingToken_not_contains: Bytes\n  stakingToken_not_in: [Bytes!]\n}\n\nenum StakingPoolSnapshot_orderBy {\n  block\n  contractAddress\n  id\n  stakingToken\n}\n\ntype Subscription {\n  \"Access to subgraph metadata\"\n  _meta(block: Block_height): _Meta_\n  balancerPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): BalancerPoolSnapshot\n  balancerPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: BalancerPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: BalancerPoolSnapshot_filter\n  ): [BalancerPoolSnapshot!]!\n  bondDiscount(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): BondDiscount\n  bondDiscounts(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: BondDiscount_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: BondDiscount_filter\n  ): [BondDiscount!]!\n  convexRewardPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ConvexRewardPoolSnapshot\n  convexRewardPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ConvexRewardPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ConvexRewardPoolSnapshot_filter\n  ): [ConvexRewardPoolSnapshot!]!\n  dailyBond(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): DailyBond\n  dailyBonds(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: DailyBond_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: DailyBond_filter\n  ): [DailyBond!]!\n  dailyStakingReward(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): DailyStakingReward\n  dailyStakingRewards(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: DailyStakingReward_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: DailyStakingReward_filter\n  ): [DailyStakingReward!]!\n  erc20TokenSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ERC20TokenSnapshot\n  erc20TokenSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ERC20TokenSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ERC20TokenSnapshot_filter\n  ): [ERC20TokenSnapshot!]!\n  gnosisAuction(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): GnosisAuction\n  gnosisAuctionRoot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): GnosisAuctionRoot\n  gnosisAuctionRoots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: GnosisAuctionRoot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: GnosisAuctionRoot_filter\n  ): [GnosisAuctionRoot!]!\n  gnosisAuctions(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: GnosisAuction_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: GnosisAuction_filter\n  ): [GnosisAuction!]!\n  poolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PoolSnapshot\n  poolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: PoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: PoolSnapshot_filter\n  ): [PoolSnapshot!]!\n  priceSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): PriceSnapshot\n  priceSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: PriceSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: PriceSnapshot_filter\n  ): [PriceSnapshot!]!\n  protocolMetric(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): ProtocolMetric\n  protocolMetrics(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: ProtocolMetric_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: ProtocolMetric_filter\n  ): [ProtocolMetric!]!\n  rebase(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Rebase\n  rebases(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: Rebase_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: Rebase_filter\n  ): [Rebase!]!\n  stakingPoolSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): StakingPoolSnapshot\n  stakingPoolSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: StakingPoolSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: StakingPoolSnapshot_filter\n  ): [StakingPoolSnapshot!]!\n  token(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): Token\n  tokenPriceSnapshot(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenPriceSnapshot\n  tokenPriceSnapshots(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenPriceSnapshot_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenPriceSnapshot_filter\n  ): [TokenPriceSnapshot!]!\n  tokenRecord(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenRecord\n  tokenRecords(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenRecord_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenRecord_filter\n  ): [TokenRecord!]!\n  tokenSupplies(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: TokenSupply_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: TokenSupply_filter\n  ): [TokenSupply!]!\n  tokenSupply(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    id: ID!\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n  ): TokenSupply\n  tokens(\n    \"The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.\"\n    block: Block_height\n    first: Int = 100\n    orderBy: Token_orderBy\n    orderDirection: OrderDirection\n    skip: Int = 0\n    \"Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.\"\n    subgraphError: _SubgraphErrorPolicy_! = deny\n    where: Token_filter\n  ): [Token!]!\n}\n\ntype Token {\n  id: ID!\n}\n\ntype TokenPriceSnapshot {\n  block: BigInt!\n  id: ID!\n  price: BigDecimal!\n  token: Bytes!\n}\n\ninput TokenPriceSnapshot_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [TokenPriceSnapshot_filter]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [TokenPriceSnapshot_filter]\n  price: BigDecimal\n  price_gt: BigDecimal\n  price_gte: BigDecimal\n  price_in: [BigDecimal!]\n  price_lt: BigDecimal\n  price_lte: BigDecimal\n  price_not: BigDecimal\n  price_not_in: [BigDecimal!]\n  token: Bytes\n  token_contains: Bytes\n  token_gt: Bytes\n  token_gte: Bytes\n  token_in: [Bytes!]\n  token_lt: Bytes\n  token_lte: Bytes\n  token_not: Bytes\n  token_not_contains: Bytes\n  token_not_in: [Bytes!]\n}\n\nenum TokenPriceSnapshot_orderBy {\n  block\n  id\n  price\n  token\n}\n\ntype TokenRecord {\n  balance: BigDecimal!\n  block: BigInt!\n  blockchain: String!\n  category: String!\n  date: String!\n  id: ID!\n  isBluechip: Boolean!\n  isLiquid: Boolean!\n  multiplier: BigDecimal!\n  rate: BigDecimal!\n  source: String!\n  sourceAddress: String!\n  timestamp: BigInt!\n  token: String!\n  tokenAddress: String!\n  value: BigDecimal!\n  valueExcludingOhm: BigDecimal!\n}\n\ninput TokenRecord_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [TokenRecord_filter]\n  balance: BigDecimal\n  balance_gt: BigDecimal\n  balance_gte: BigDecimal\n  balance_in: [BigDecimal!]\n  balance_lt: BigDecimal\n  balance_lte: BigDecimal\n  balance_not: BigDecimal\n  balance_not_in: [BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  blockchain: String\n  blockchain_contains: String\n  blockchain_contains_nocase: String\n  blockchain_ends_with: String\n  blockchain_ends_with_nocase: String\n  blockchain_gt: String\n  blockchain_gte: String\n  blockchain_in: [String!]\n  blockchain_lt: String\n  blockchain_lte: String\n  blockchain_not: String\n  blockchain_not_contains: String\n  blockchain_not_contains_nocase: String\n  blockchain_not_ends_with: String\n  blockchain_not_ends_with_nocase: String\n  blockchain_not_in: [String!]\n  blockchain_not_starts_with: String\n  blockchain_not_starts_with_nocase: String\n  blockchain_starts_with: String\n  blockchain_starts_with_nocase: String\n  category: String\n  category_contains: String\n  category_contains_nocase: String\n  category_ends_with: String\n  category_ends_with_nocase: String\n  category_gt: String\n  category_gte: String\n  category_in: [String!]\n  category_lt: String\n  category_lte: String\n  category_not: String\n  category_not_contains: String\n  category_not_contains_nocase: String\n  category_not_ends_with: String\n  category_not_ends_with_nocase: String\n  category_not_in: [String!]\n  category_not_starts_with: String\n  category_not_starts_with_nocase: String\n  category_starts_with: String\n  category_starts_with_nocase: String\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  isBluechip: Boolean\n  isBluechip_in: [Boolean!]\n  isBluechip_not: Boolean\n  isBluechip_not_in: [Boolean!]\n  isLiquid: Boolean\n  isLiquid_in: [Boolean!]\n  isLiquid_not: Boolean\n  isLiquid_not_in: [Boolean!]\n  multiplier: BigDecimal\n  multiplier_gt: BigDecimal\n  multiplier_gte: BigDecimal\n  multiplier_in: [BigDecimal!]\n  multiplier_lt: BigDecimal\n  multiplier_lte: BigDecimal\n  multiplier_not: BigDecimal\n  multiplier_not_in: [BigDecimal!]\n  or: [TokenRecord_filter]\n  rate: BigDecimal\n  rate_gt: BigDecimal\n  rate_gte: BigDecimal\n  rate_in: [BigDecimal!]\n  rate_lt: BigDecimal\n  rate_lte: BigDecimal\n  rate_not: BigDecimal\n  rate_not_in: [BigDecimal!]\n  source: String\n  sourceAddress: String\n  sourceAddress_contains: String\n  sourceAddress_contains_nocase: String\n  sourceAddress_ends_with: String\n  sourceAddress_ends_with_nocase: String\n  sourceAddress_gt: String\n  sourceAddress_gte: String\n  sourceAddress_in: [String!]\n  sourceAddress_lt: String\n  sourceAddress_lte: String\n  sourceAddress_not: String\n  sourceAddress_not_contains: String\n  sourceAddress_not_contains_nocase: String\n  sourceAddress_not_ends_with: String\n  sourceAddress_not_ends_with_nocase: String\n  sourceAddress_not_in: [String!]\n  sourceAddress_not_starts_with: String\n  sourceAddress_not_starts_with_nocase: String\n  sourceAddress_starts_with: String\n  sourceAddress_starts_with_nocase: String\n  source_contains: String\n  source_contains_nocase: String\n  source_ends_with: String\n  source_ends_with_nocase: String\n  source_gt: String\n  source_gte: String\n  source_in: [String!]\n  source_lt: String\n  source_lte: String\n  source_not: String\n  source_not_contains: String\n  source_not_contains_nocase: String\n  source_not_ends_with: String\n  source_not_ends_with_nocase: String\n  source_not_in: [String!]\n  source_not_starts_with: String\n  source_not_starts_with_nocase: String\n  source_starts_with: String\n  source_starts_with_nocase: String\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  tokenAddress: String\n  tokenAddress_contains: String\n  tokenAddress_contains_nocase: String\n  tokenAddress_ends_with: String\n  tokenAddress_ends_with_nocase: String\n  tokenAddress_gt: String\n  tokenAddress_gte: String\n  tokenAddress_in: [String!]\n  tokenAddress_lt: String\n  tokenAddress_lte: String\n  tokenAddress_not: String\n  tokenAddress_not_contains: String\n  tokenAddress_not_contains_nocase: String\n  tokenAddress_not_ends_with: String\n  tokenAddress_not_ends_with_nocase: String\n  tokenAddress_not_in: [String!]\n  tokenAddress_not_starts_with: String\n  tokenAddress_not_starts_with_nocase: String\n  tokenAddress_starts_with: String\n  tokenAddress_starts_with_nocase: String\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  value: BigDecimal\n  valueExcludingOhm: BigDecimal\n  valueExcludingOhm_gt: BigDecimal\n  valueExcludingOhm_gte: BigDecimal\n  valueExcludingOhm_in: [BigDecimal!]\n  valueExcludingOhm_lt: BigDecimal\n  valueExcludingOhm_lte: BigDecimal\n  valueExcludingOhm_not: BigDecimal\n  valueExcludingOhm_not_in: [BigDecimal!]\n  value_gt: BigDecimal\n  value_gte: BigDecimal\n  value_in: [BigDecimal!]\n  value_lt: BigDecimal\n  value_lte: BigDecimal\n  value_not: BigDecimal\n  value_not_in: [BigDecimal!]\n}\n\nenum TokenRecord_orderBy {\n  balance\n  block\n  blockchain\n  category\n  date\n  id\n  isBluechip\n  isLiquid\n  multiplier\n  rate\n  source\n  sourceAddress\n  timestamp\n  token\n  tokenAddress\n  value\n  valueExcludingOhm\n}\n\ntype TokenSupply {\n  balance: BigDecimal!\n  block: BigInt!\n  date: String!\n  id: ID!\n  pool: String\n  poolAddress: String\n  source: String\n  sourceAddress: String\n  supplyBalance: BigDecimal!\n  timestamp: BigInt!\n  token: String!\n  tokenAddress: String!\n  type: String!\n}\n\ninput TokenSupply_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [TokenSupply_filter]\n  balance: BigDecimal\n  balance_gt: BigDecimal\n  balance_gte: BigDecimal\n  balance_in: [BigDecimal!]\n  balance_lt: BigDecimal\n  balance_lte: BigDecimal\n  balance_not: BigDecimal\n  balance_not_in: [BigDecimal!]\n  block: BigInt\n  block_gt: BigInt\n  block_gte: BigInt\n  block_in: [BigInt!]\n  block_lt: BigInt\n  block_lte: BigInt\n  block_not: BigInt\n  block_not_in: [BigInt!]\n  date: String\n  date_contains: String\n  date_contains_nocase: String\n  date_ends_with: String\n  date_ends_with_nocase: String\n  date_gt: String\n  date_gte: String\n  date_in: [String!]\n  date_lt: String\n  date_lte: String\n  date_not: String\n  date_not_contains: String\n  date_not_contains_nocase: String\n  date_not_ends_with: String\n  date_not_ends_with_nocase: String\n  date_not_in: [String!]\n  date_not_starts_with: String\n  date_not_starts_with_nocase: String\n  date_starts_with: String\n  date_starts_with_nocase: String\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [TokenSupply_filter]\n  pool: String\n  poolAddress: String\n  poolAddress_contains: String\n  poolAddress_contains_nocase: String\n  poolAddress_ends_with: String\n  poolAddress_ends_with_nocase: String\n  poolAddress_gt: String\n  poolAddress_gte: String\n  poolAddress_in: [String!]\n  poolAddress_lt: String\n  poolAddress_lte: String\n  poolAddress_not: String\n  poolAddress_not_contains: String\n  poolAddress_not_contains_nocase: String\n  poolAddress_not_ends_with: String\n  poolAddress_not_ends_with_nocase: String\n  poolAddress_not_in: [String!]\n  poolAddress_not_starts_with: String\n  poolAddress_not_starts_with_nocase: String\n  poolAddress_starts_with: String\n  poolAddress_starts_with_nocase: String\n  pool_contains: String\n  pool_contains_nocase: String\n  pool_ends_with: String\n  pool_ends_with_nocase: String\n  pool_gt: String\n  pool_gte: String\n  pool_in: [String!]\n  pool_lt: String\n  pool_lte: String\n  pool_not: String\n  pool_not_contains: String\n  pool_not_contains_nocase: String\n  pool_not_ends_with: String\n  pool_not_ends_with_nocase: String\n  pool_not_in: [String!]\n  pool_not_starts_with: String\n  pool_not_starts_with_nocase: String\n  pool_starts_with: String\n  pool_starts_with_nocase: String\n  source: String\n  sourceAddress: String\n  sourceAddress_contains: String\n  sourceAddress_contains_nocase: String\n  sourceAddress_ends_with: String\n  sourceAddress_ends_with_nocase: String\n  sourceAddress_gt: String\n  sourceAddress_gte: String\n  sourceAddress_in: [String!]\n  sourceAddress_lt: String\n  sourceAddress_lte: String\n  sourceAddress_not: String\n  sourceAddress_not_contains: String\n  sourceAddress_not_contains_nocase: String\n  sourceAddress_not_ends_with: String\n  sourceAddress_not_ends_with_nocase: String\n  sourceAddress_not_in: [String!]\n  sourceAddress_not_starts_with: String\n  sourceAddress_not_starts_with_nocase: String\n  sourceAddress_starts_with: String\n  sourceAddress_starts_with_nocase: String\n  source_contains: String\n  source_contains_nocase: String\n  source_ends_with: String\n  source_ends_with_nocase: String\n  source_gt: String\n  source_gte: String\n  source_in: [String!]\n  source_lt: String\n  source_lte: String\n  source_not: String\n  source_not_contains: String\n  source_not_contains_nocase: String\n  source_not_ends_with: String\n  source_not_ends_with_nocase: String\n  source_not_in: [String!]\n  source_not_starts_with: String\n  source_not_starts_with_nocase: String\n  source_starts_with: String\n  source_starts_with_nocase: String\n  supplyBalance: BigDecimal\n  supplyBalance_gt: BigDecimal\n  supplyBalance_gte: BigDecimal\n  supplyBalance_in: [BigDecimal!]\n  supplyBalance_lt: BigDecimal\n  supplyBalance_lte: BigDecimal\n  supplyBalance_not: BigDecimal\n  supplyBalance_not_in: [BigDecimal!]\n  timestamp: BigInt\n  timestamp_gt: BigInt\n  timestamp_gte: BigInt\n  timestamp_in: [BigInt!]\n  timestamp_lt: BigInt\n  timestamp_lte: BigInt\n  timestamp_not: BigInt\n  timestamp_not_in: [BigInt!]\n  token: String\n  tokenAddress: String\n  tokenAddress_contains: String\n  tokenAddress_contains_nocase: String\n  tokenAddress_ends_with: String\n  tokenAddress_ends_with_nocase: String\n  tokenAddress_gt: String\n  tokenAddress_gte: String\n  tokenAddress_in: [String!]\n  tokenAddress_lt: String\n  tokenAddress_lte: String\n  tokenAddress_not: String\n  tokenAddress_not_contains: String\n  tokenAddress_not_contains_nocase: String\n  tokenAddress_not_ends_with: String\n  tokenAddress_not_ends_with_nocase: String\n  tokenAddress_not_in: [String!]\n  tokenAddress_not_starts_with: String\n  tokenAddress_not_starts_with_nocase: String\n  tokenAddress_starts_with: String\n  tokenAddress_starts_with_nocase: String\n  token_contains: String\n  token_contains_nocase: String\n  token_ends_with: String\n  token_ends_with_nocase: String\n  token_gt: String\n  token_gte: String\n  token_in: [String!]\n  token_lt: String\n  token_lte: String\n  token_not: String\n  token_not_contains: String\n  token_not_contains_nocase: String\n  token_not_ends_with: String\n  token_not_ends_with_nocase: String\n  token_not_in: [String!]\n  token_not_starts_with: String\n  token_not_starts_with_nocase: String\n  token_starts_with: String\n  token_starts_with_nocase: String\n  type: String\n  type_contains: String\n  type_contains_nocase: String\n  type_ends_with: String\n  type_ends_with_nocase: String\n  type_gt: String\n  type_gte: String\n  type_in: [String!]\n  type_lt: String\n  type_lte: String\n  type_not: String\n  type_not_contains: String\n  type_not_contains_nocase: String\n  type_not_ends_with: String\n  type_not_ends_with_nocase: String\n  type_not_in: [String!]\n  type_not_starts_with: String\n  type_not_starts_with_nocase: String\n  type_starts_with: String\n  type_starts_with_nocase: String\n}\n\nenum TokenSupply_orderBy {\n  balance\n  block\n  date\n  id\n  pool\n  poolAddress\n  source\n  sourceAddress\n  supplyBalance\n  timestamp\n  token\n  tokenAddress\n  type\n}\n\ninput Token_filter {\n  \"Filter for the block changed event.\"\n  _change_block: BlockChangedFilter\n  and: [Token_filter]\n  id: ID\n  id_gt: ID\n  id_gte: ID\n  id_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_not: ID\n  id_not_in: [ID!]\n  or: [Token_filter]\n}\n\nenum Token_orderBy {\n  id\n}\n\ntype _Block_ {\n  \"The hash of the block\"\n  hash: Bytes\n  \"The block number\"\n  number: Int!\n  \"Integer representation of the timestamp stored in blocks for the chain\"\n  timestamp: Int\n}\n\n\"\"\"The type for the top-level _meta field\"\"\"\ntype _Meta_ {\n  \"Information about a specific subgraph block. The hash of the block\\nwill be null if the _meta field has a block constraint that asks for\\na block number. It will be filled if the _meta field has no block constraint\\nand therefore asks for the latest  block\\n\"\n  block: _Block_!\n  \"The deployment ID\"\n  deployment: String!\n  \"If `true`, the subgraph encountered indexing errors at some past block\"\n  hasIndexingErrors: Boolean!\n}\n\nenum _SubgraphErrorPolicy_ {\n  \"\"\"Data will be returned even if the subgraph has indexing errors\"\"\"\n  allow\n  \"\"\"\n  If the subgraph has indexing errors, data will be omitted. The default.\n  \"\"\"\n  deny\n}",
            "hooksConfiguration": {
              "onWSTransportConnectionInit": false
            },
            "customScalarTypeFields": []
          },
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "treasuryPolygon__meta",
                "treasuryPolygon_balancerPoolSnapshot",
                "treasuryPolygon_balancerPoolSnapshots",
                "treasuryPolygon_bondDiscount",
                "treasuryPolygon_bondDiscounts",
                "treasuryPolygon_convexRewardPoolSnapshot",
                "treasuryPolygon_convexRewardPoolSnapshots",
                "treasuryPolygon_dailyBond",
                "treasuryPolygon_dailyBonds",
                "treasuryPolygon_dailyStakingReward",
                "treasuryPolygon_dailyStakingRewards",
                "treasuryPolygon_erc20TokenSnapshot",
                "treasuryPolygon_erc20TokenSnapshots",
                "treasuryPolygon_gnosisAuction",
                "treasuryPolygon_gnosisAuctionRoot",
                "treasuryPolygon_gnosisAuctionRoots",
                "treasuryPolygon_gnosisAuctions",
                "treasuryPolygon_poolSnapshot",
                "treasuryPolygon_poolSnapshots",
                "treasuryPolygon_priceSnapshot",
                "treasuryPolygon_priceSnapshots",
                "treasuryPolygon_protocolMetric",
                "treasuryPolygon_protocolMetrics",
                "treasuryPolygon_rebase",
                "treasuryPolygon_rebases",
                "treasuryPolygon_stakingPoolSnapshot",
                "treasuryPolygon_stakingPoolSnapshots",
                "treasuryPolygon_token",
                "treasuryPolygon_tokenPriceSnapshot",
                "treasuryPolygon_tokenPriceSnapshots",
                "treasuryPolygon_tokenRecord",
                "treasuryPolygon_tokenRecords",
                "treasuryPolygon_tokenSupplies",
                "treasuryPolygon_tokenSupply",
                "treasuryPolygon_tokens"
              ]
            },
            {
              "typeName": "Subscription",
              "fieldNames": [
                "treasuryPolygon__meta",
                "treasuryPolygon_balancerPoolSnapshot",
                "treasuryPolygon_balancerPoolSnapshots",
                "treasuryPolygon_bondDiscount",
                "treasuryPolygon_bondDiscounts",
                "treasuryPolygon_convexRewardPoolSnapshot",
                "treasuryPolygon_convexRewardPoolSnapshots",
                "treasuryPolygon_dailyBond",
                "treasuryPolygon_dailyBonds",
                "treasuryPolygon_dailyStakingReward",
                "treasuryPolygon_dailyStakingRewards",
                "treasuryPolygon_erc20TokenSnapshot",
                "treasuryPolygon_erc20TokenSnapshots",
                "treasuryPolygon_gnosisAuction",
                "treasuryPolygon_gnosisAuctionRoot",
                "treasuryPolygon_gnosisAuctionRoots",
                "treasuryPolygon_gnosisAuctions",
                "treasuryPolygon_poolSnapshot",
                "treasuryPolygon_poolSnapshots",
                "treasuryPolygon_priceSnapshot",
                "treasuryPolygon_priceSnapshots",
                "treasuryPolygon_protocolMetric",
                "treasuryPolygon_protocolMetrics",
                "treasuryPolygon_rebase",
                "treasuryPolygon_rebases",
                "treasuryPolygon_stakingPoolSnapshot",
                "treasuryPolygon_stakingPoolSnapshots",
                "treasuryPolygon_token",
                "treasuryPolygon_tokenPriceSnapshot",
                "treasuryPolygon_tokenPriceSnapshots",
                "treasuryPolygon_tokenRecord",
                "treasuryPolygon_tokenRecords",
                "treasuryPolygon_tokenSupplies",
                "treasuryPolygon_tokenSupply",
                "treasuryPolygon_tokens"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "treasuryPolygon_BalancerPoolSnapshot",
              "fieldNames": [
                "balances",
                "block",
                "decimals",
                "id",
                "pool",
                "poolToken",
                "tokens",
                "totalSupply",
                "weights"
              ]
            },
            {
              "typeName": "treasuryPolygon_BondDiscount",
              "fieldNames": [
                "dai_discount",
                "eth_discount",
                "frax_discount",
                "id",
                "lusd_discount",
                "ohmdai_discount",
                "ohmfrax_discount",
                "ohmlusd_discount",
                "timestamp"
              ]
            },
            {
              "typeName": "treasuryPolygon_ConvexRewardPoolSnapshot",
              "fieldNames": [
                "address",
                "block",
                "id",
                "stakingToken"
              ]
            },
            {
              "typeName": "treasuryPolygon_DailyBond",
              "fieldNames": [
                "amount",
                "id",
                "timestamp",
                "token",
                "value"
              ]
            },
            {
              "typeName": "treasuryPolygon_DailyStakingReward",
              "fieldNames": [
                "amount",
                "id",
                "timestamp",
                "value"
              ]
            },
            {
              "typeName": "treasuryPolygon_ERC20TokenSnapshot",
              "fieldNames": [
                "address",
                "decimals",
                "id",
                "totalSupply"
              ]
            },
            {
              "typeName": "treasuryPolygon_GnosisAuction",
              "fieldNames": [
                "auctionCloseTimestamp",
                "auctionOpenTimestamp",
                "bidQuantity",
                "id",
                "payoutCapacity",
                "termSeconds"
              ]
            },
            {
              "typeName": "treasuryPolygon_GnosisAuctionRoot",
              "fieldNames": [
                "id",
                "markets"
              ]
            },
            {
              "typeName": "treasuryPolygon_PoolSnapshot",
              "fieldNames": [
                "balances",
                "block",
                "decimals",
                "id",
                "pool",
                "poolToken",
                "tokens",
                "totalSupply",
                "weights"
              ]
            },
            {
              "typeName": "treasuryPolygon_PriceSnapshot",
              "fieldNames": [
                "block",
                "date",
                "id",
                "priceGOhm",
                "priceOhm",
                "timestamp"
              ]
            },
            {
              "typeName": "treasuryPolygon_ProtocolMetric",
              "fieldNames": [
                "block",
                "currentAPY",
                "currentIndex",
                "date",
                "gOhmPrice",
                "gOhmSyntheticSupply",
                "gOhmTotalSupply",
                "id",
                "marketCap",
                "nextDistributedOhm",
                "nextEpochRebase",
                "ohmCirculatingSupply",
                "ohmFloatingSupply",
                "ohmPrice",
                "ohmTotalSupply",
                "sOhmCirculatingSupply",
                "timestamp",
                "totalValueLocked",
                "treasuryLiquidBacking",
                "treasuryLiquidBackingPerGOhmSynthetic",
                "treasuryLiquidBackingPerOhmFloating",
                "treasuryMarketValue"
              ]
            },
            {
              "typeName": "treasuryPolygon_Rebase",
              "fieldNames": [
                "amount",
                "contract",
                "id",
                "percentage",
                "stakedOhms",
                "timestamp",
                "value"
              ]
            },
            {
              "typeName": "treasuryPolygon_StakingPoolSnapshot",
              "fieldNames": [
                "block",
                "contractAddress",
                "id",
                "stakingToken"
              ]
            },
            {
              "typeName": "treasuryPolygon_Token",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "treasuryPolygon_TokenPriceSnapshot",
              "fieldNames": [
                "block",
                "id",
                "price",
                "token"
              ]
            },
            {
              "typeName": "treasuryPolygon_TokenRecord",
              "fieldNames": [
                "balance",
                "block",
                "blockchain",
                "category",
                "date",
                "id",
                "isBluechip",
                "isLiquid",
                "multiplier",
                "rate",
                "source",
                "sourceAddress",
                "timestamp",
                "token",
                "tokenAddress",
                "value",
                "valueExcludingOhm"
              ]
            },
            {
              "typeName": "treasuryPolygon_TokenSupply",
              "fieldNames": [
                "balance",
                "block",
                "date",
                "id",
                "pool",
                "poolAddress",
                "source",
                "sourceAddress",
                "supplyBalance",
                "timestamp",
                "token",
                "tokenAddress",
                "type"
              ]
            },
            {
              "typeName": "treasuryPolygon__Block_",
              "fieldNames": [
                "hash",
                "number",
                "timestamp"
              ]
            },
            {
              "typeName": "treasuryPolygon__Meta_",
              "fieldNames": [
                "block",
                "deployment",
                "hasIndexingErrors"
              ]
            }
          ],
          "overrideFieldPathFromAlias": true,
          "directives": [
            {
              "directiveName": "treasuryPolygon_derivedFrom",
              "renameTo": "derivedFrom"
            },
            {
              "directiveName": "treasuryPolygon_entity",
              "renameTo": "entity"
            },
            {
              "directiveName": "treasuryPolygon_subgraphId",
              "renameTo": "subgraphId"
            }
          ],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryArbitrum_BalancerPoolSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryArbitrum_BondDiscount",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryArbitrum_ConvexRewardPoolSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryArbitrum_DailyBond",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryArbitrum_DailyStakingReward",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryArbitrum_ERC20TokenSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryArbitrum_GnosisAuction",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryArbitrum_GnosisAuctionRoot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryArbitrum_PoolSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryArbitrum_PriceSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryArbitrum_ProtocolMetric",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryArbitrum_Rebase",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryArbitrum_StakingPoolSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryArbitrum_Token",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryArbitrum_TokenPriceSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryArbitrum_TokenRecord",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryArbitrum_TokenSupply",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryArbitrum__Block_",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryArbitrum__Meta_",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryEthereum_BalancerPoolSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryEthereum_BondDiscount",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryEthereum_ConvexRewardPoolSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryEthereum_DailyBond",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryEthereum_DailyStakingReward",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryEthereum_ERC20TokenSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryEthereum_GnosisAuction",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryEthereum_GnosisAuctionRoot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryEthereum_PoolSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryEthereum_PriceSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryEthereum_ProtocolMetric",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryEthereum_Rebase",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryEthereum_StakingPoolSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryEthereum_Token",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryEthereum_TokenPriceSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryEthereum_TokenRecord",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryEthereum_TokenSupply",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryEthereum__Block_",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryEthereum__Meta_",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryFantom_BalancerPoolSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryFantom_BondDiscount",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryFantom_ConvexRewardPoolSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryFantom_DailyBond",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryFantom_DailyStakingReward",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryFantom_ERC20TokenSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryFantom_GnosisAuction",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryFantom_GnosisAuctionRoot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryFantom_PoolSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryFantom_PriceSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryFantom_ProtocolMetric",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryFantom_Rebase",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryFantom_StakingPoolSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryFantom_Token",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryFantom_TokenPriceSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryFantom_TokenRecord",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryFantom_TokenSupply",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryFantom__Block_",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryFantom__Meta_",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryPolygon_BalancerPoolSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryPolygon_BondDiscount",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryPolygon_ConvexRewardPoolSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryPolygon_DailyBond",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryPolygon_DailyStakingReward",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryPolygon_ERC20TokenSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryPolygon_GnosisAuction",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryPolygon_GnosisAuctionRoot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryPolygon_PoolSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryPolygon_PriceSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryPolygon_ProtocolMetric",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryPolygon_Rebase",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryPolygon_StakingPoolSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryPolygon_Token",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryPolygon_TokenPriceSnapshot",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryPolygon_TokenRecord",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryPolygon_TokenSupply",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryPolygon__Block_",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        },
        {
          "id": "",
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "treasuryPolygon__Meta_",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": [],
          "requestTimeoutSeconds": 0
        }
      ],
      "fieldConfigurations": [
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum__meta",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "_meta"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_balancerPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "balancerPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_balancerPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "balancerPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_bondDiscount",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "bondDiscount"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_bondDiscounts",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "bondDiscounts"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_convexRewardPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "convexRewardPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_convexRewardPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "convexRewardPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_dailyBond",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyBond"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_dailyBonds",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyBonds"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_dailyStakingReward",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyStakingReward"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_dailyStakingRewards",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyStakingRewards"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_erc20TokenSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "erc20TokenSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_erc20TokenSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "erc20TokenSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_gnosisAuction",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuction"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_gnosisAuctionRoot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctionRoot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_gnosisAuctionRoots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctionRoots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_gnosisAuctions",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctions"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_poolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "poolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_poolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "poolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_priceSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "priceSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_priceSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "priceSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_protocolMetric",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "protocolMetric"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_protocolMetrics",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "protocolMetrics"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_rebase",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "rebase"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_rebases",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "rebases"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_stakingPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "stakingPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_stakingPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "stakingPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_token",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "token"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_tokenPriceSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenPriceSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_tokenPriceSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenPriceSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_tokenRecord",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenRecord"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_tokenRecords",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenRecords"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_tokenSupplies",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenSupplies"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_tokenSupply",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenSupply"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryArbitrum_tokens",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokens"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum__meta",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "_meta"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_balancerPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "balancerPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_balancerPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "balancerPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_bondDiscount",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "bondDiscount"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_bondDiscounts",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "bondDiscounts"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_convexRewardPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "convexRewardPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_convexRewardPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "convexRewardPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_dailyBond",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyBond"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_dailyBonds",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyBonds"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_dailyStakingReward",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyStakingReward"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_dailyStakingRewards",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyStakingRewards"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_erc20TokenSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "erc20TokenSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_erc20TokenSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "erc20TokenSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_gnosisAuction",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuction"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_gnosisAuctionRoot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctionRoot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_gnosisAuctionRoots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctionRoots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_gnosisAuctions",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctions"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_poolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "poolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_poolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "poolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_priceSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "priceSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_priceSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "priceSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_protocolMetric",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "protocolMetric"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_protocolMetrics",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "protocolMetrics"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_rebase",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "rebase"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_rebases",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "rebases"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_stakingPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "stakingPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_stakingPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "stakingPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_token",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "token"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_tokenPriceSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenPriceSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_tokenPriceSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenPriceSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_tokenRecord",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenRecord"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_tokenRecords",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenRecords"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_tokenSupplies",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenSupplies"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_tokenSupply",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenSupply"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryArbitrum_tokens",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokens"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum__meta",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "_meta"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_balancerPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "balancerPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_balancerPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "balancerPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_bondDiscount",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "bondDiscount"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_bondDiscounts",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "bondDiscounts"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_convexRewardPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "convexRewardPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_convexRewardPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "convexRewardPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_dailyBond",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyBond"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_dailyBonds",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyBonds"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_dailyStakingReward",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyStakingReward"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_dailyStakingRewards",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyStakingRewards"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_erc20TokenSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "erc20TokenSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_erc20TokenSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "erc20TokenSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_gnosisAuction",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuction"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_gnosisAuctionRoot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctionRoot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_gnosisAuctionRoots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctionRoots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_gnosisAuctions",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctions"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_poolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "poolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_poolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "poolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_priceSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "priceSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_priceSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "priceSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_protocolMetric",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "protocolMetric"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_protocolMetrics",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "protocolMetrics"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_rebase",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "rebase"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_rebases",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "rebases"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_stakingPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "stakingPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_stakingPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "stakingPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_token",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "token"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_tokenPriceSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenPriceSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_tokenPriceSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenPriceSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_tokenRecord",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenRecord"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_tokenRecords",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenRecords"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_tokenSupplies",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenSupplies"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_tokenSupply",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenSupply"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryEthereum_tokens",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokens"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum__meta",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "_meta"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_balancerPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "balancerPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_balancerPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "balancerPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_bondDiscount",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "bondDiscount"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_bondDiscounts",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "bondDiscounts"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_convexRewardPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "convexRewardPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_convexRewardPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "convexRewardPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_dailyBond",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyBond"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_dailyBonds",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyBonds"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_dailyStakingReward",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyStakingReward"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_dailyStakingRewards",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyStakingRewards"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_erc20TokenSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "erc20TokenSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_erc20TokenSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "erc20TokenSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_gnosisAuction",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuction"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_gnosisAuctionRoot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctionRoot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_gnosisAuctionRoots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctionRoots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_gnosisAuctions",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctions"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_poolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "poolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_poolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "poolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_priceSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "priceSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_priceSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "priceSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_protocolMetric",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "protocolMetric"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_protocolMetrics",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "protocolMetrics"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_rebase",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "rebase"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_rebases",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "rebases"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_stakingPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "stakingPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_stakingPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "stakingPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_token",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "token"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_tokenPriceSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenPriceSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_tokenPriceSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenPriceSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_tokenRecord",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenRecord"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_tokenRecords",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenRecords"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_tokenSupplies",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenSupplies"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_tokenSupply",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenSupply"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryEthereum_tokens",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokens"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom__meta",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "_meta"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_balancerPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "balancerPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_balancerPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "balancerPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_bondDiscount",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "bondDiscount"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_bondDiscounts",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "bondDiscounts"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_convexRewardPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "convexRewardPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_convexRewardPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "convexRewardPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_dailyBond",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyBond"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_dailyBonds",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyBonds"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_dailyStakingReward",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyStakingReward"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_dailyStakingRewards",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyStakingRewards"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_erc20TokenSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "erc20TokenSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_erc20TokenSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "erc20TokenSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_gnosisAuction",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuction"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_gnosisAuctionRoot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctionRoot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_gnosisAuctionRoots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctionRoots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_gnosisAuctions",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctions"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_poolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "poolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_poolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "poolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_priceSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "priceSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_priceSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "priceSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_protocolMetric",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "protocolMetric"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_protocolMetrics",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "protocolMetrics"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_rebase",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "rebase"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_rebases",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "rebases"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_stakingPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "stakingPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_stakingPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "stakingPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_token",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "token"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_tokenPriceSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenPriceSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_tokenPriceSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenPriceSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_tokenRecord",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenRecord"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_tokenRecords",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenRecords"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_tokenSupplies",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenSupplies"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_tokenSupply",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenSupply"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryFantom_tokens",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokens"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom__meta",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "_meta"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_balancerPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "balancerPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_balancerPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "balancerPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_bondDiscount",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "bondDiscount"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_bondDiscounts",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "bondDiscounts"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_convexRewardPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "convexRewardPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_convexRewardPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "convexRewardPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_dailyBond",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyBond"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_dailyBonds",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyBonds"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_dailyStakingReward",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyStakingReward"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_dailyStakingRewards",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyStakingRewards"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_erc20TokenSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "erc20TokenSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_erc20TokenSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "erc20TokenSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_gnosisAuction",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuction"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_gnosisAuctionRoot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctionRoot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_gnosisAuctionRoots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctionRoots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_gnosisAuctions",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctions"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_poolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "poolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_poolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "poolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_priceSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "priceSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_priceSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "priceSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_protocolMetric",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "protocolMetric"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_protocolMetrics",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "protocolMetrics"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_rebase",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "rebase"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_rebases",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "rebases"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_stakingPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "stakingPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_stakingPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "stakingPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_token",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "token"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_tokenPriceSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenPriceSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_tokenPriceSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenPriceSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_tokenRecord",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenRecord"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_tokenRecords",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenRecords"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_tokenSupplies",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenSupplies"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_tokenSupply",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenSupply"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryFantom_tokens",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokens"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon__meta",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "_meta"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_balancerPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "balancerPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_balancerPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "balancerPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_bondDiscount",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "bondDiscount"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_bondDiscounts",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "bondDiscounts"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_convexRewardPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "convexRewardPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_convexRewardPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "convexRewardPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_dailyBond",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyBond"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_dailyBonds",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyBonds"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_dailyStakingReward",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyStakingReward"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_dailyStakingRewards",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyStakingRewards"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_erc20TokenSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "erc20TokenSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_erc20TokenSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "erc20TokenSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_gnosisAuction",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuction"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_gnosisAuctionRoot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctionRoot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_gnosisAuctionRoots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctionRoots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_gnosisAuctions",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctions"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_poolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "poolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_poolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "poolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_priceSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "priceSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_priceSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "priceSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_protocolMetric",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "protocolMetric"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_protocolMetrics",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "protocolMetrics"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_rebase",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "rebase"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_rebases",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "rebases"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_stakingPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "stakingPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_stakingPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "stakingPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_token",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "token"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_tokenPriceSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenPriceSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_tokenPriceSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenPriceSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_tokenRecord",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenRecord"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_tokenRecords",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenRecords"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_tokenSupplies",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenSupplies"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_tokenSupply",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenSupply"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "treasuryPolygon_tokens",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokens"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon__meta",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "_meta"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_balancerPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "balancerPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_balancerPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "balancerPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_bondDiscount",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "bondDiscount"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_bondDiscounts",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "bondDiscounts"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_convexRewardPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "convexRewardPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_convexRewardPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "convexRewardPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_dailyBond",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyBond"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_dailyBonds",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyBonds"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_dailyStakingReward",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyStakingReward"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_dailyStakingRewards",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "dailyStakingRewards"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_erc20TokenSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "erc20TokenSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_erc20TokenSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "erc20TokenSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_gnosisAuction",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuction"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_gnosisAuctionRoot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctionRoot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_gnosisAuctionRoots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctionRoots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_gnosisAuctions",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "gnosisAuctions"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_poolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "poolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_poolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "poolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_priceSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "priceSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_priceSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "priceSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_protocolMetric",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "protocolMetric"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_protocolMetrics",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "protocolMetrics"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_rebase",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "rebase"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_rebases",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "rebases"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_stakingPoolSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "stakingPoolSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_stakingPoolSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "stakingPoolSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_token",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "token"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_tokenPriceSnapshot",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenPriceSnapshot"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_tokenPriceSnapshots",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenPriceSnapshots"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_tokenRecord",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenRecord"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_tokenRecords",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenRecords"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_tokenSupplies",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenSupplies"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_tokenSupply",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "id",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokenSupply"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Subscription",
          "fieldName": "treasuryPolygon_tokens",
          "argumentsConfiguration": [
            {
              "name": "block",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "first",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "orderDirection",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "subgraphError",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0,
              "renameTypeTo": ""
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "tokens"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryArbitrum_BalancerPoolSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryArbitrum_BondDiscount",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryArbitrum_ConvexRewardPoolSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryArbitrum_DailyBond",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryArbitrum_DailyStakingReward",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryArbitrum_ERC20TokenSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryArbitrum_GnosisAuction",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryArbitrum_GnosisAuctionRoot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryArbitrum_PoolSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryArbitrum_PriceSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryArbitrum_ProtocolMetric",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryArbitrum_Rebase",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryArbitrum_StakingPoolSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryArbitrum_Token",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryArbitrum_TokenPriceSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryArbitrum_TokenRecord",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryArbitrum_TokenSupply",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryArbitrum__Block_",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryArbitrum__Meta_",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryEthereum_BalancerPoolSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryEthereum_BondDiscount",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryEthereum_ConvexRewardPoolSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryEthereum_DailyBond",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryEthereum_DailyStakingReward",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryEthereum_ERC20TokenSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryEthereum_GnosisAuction",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryEthereum_GnosisAuctionRoot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryEthereum_PoolSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryEthereum_PriceSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryEthereum_ProtocolMetric",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryEthereum_Rebase",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryEthereum_StakingPoolSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryEthereum_Token",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryEthereum_TokenPriceSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryEthereum_TokenRecord",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryEthereum_TokenSupply",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryEthereum__Block_",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryEthereum__Meta_",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryFantom_BalancerPoolSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryFantom_BondDiscount",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryFantom_ConvexRewardPoolSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryFantom_DailyBond",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryFantom_DailyStakingReward",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryFantom_ERC20TokenSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryFantom_GnosisAuction",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryFantom_GnosisAuctionRoot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryFantom_PoolSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryFantom_PriceSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryFantom_ProtocolMetric",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryFantom_Rebase",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryFantom_StakingPoolSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryFantom_Token",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryFantom_TokenPriceSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryFantom_TokenRecord",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryFantom_TokenSupply",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryFantom__Block_",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryFantom__Meta_",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryPolygon_BalancerPoolSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryPolygon_BondDiscount",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryPolygon_ConvexRewardPoolSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryPolygon_DailyBond",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryPolygon_DailyStakingReward",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryPolygon_ERC20TokenSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryPolygon_GnosisAuction",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryPolygon_GnosisAuctionRoot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryPolygon_PoolSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryPolygon_PriceSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryPolygon_ProtocolMetric",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryPolygon_Rebase",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryPolygon_StakingPoolSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryPolygon_Token",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryPolygon_TokenPriceSnapshot",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryPolygon_TokenRecord",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryPolygon_TokenSupply",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryPolygon__Block_",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "treasuryPolygon__Meta_",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        }
      ],
      "typeConfigurations": [
        {
          "typeName": "treasuryArbitrum_BalancerPoolSnapshot",
          "renameTo": "BalancerPoolSnapshot"
        },
        {
          "typeName": "treasuryArbitrum_BalancerPoolSnapshot_filter",
          "renameTo": "BalancerPoolSnapshot_filter"
        },
        {
          "typeName": "treasuryArbitrum_BalancerPoolSnapshot_orderBy",
          "renameTo": "BalancerPoolSnapshot_orderBy"
        },
        {
          "typeName": "treasuryArbitrum_BigDecimal",
          "renameTo": "BigDecimal"
        },
        {
          "typeName": "treasuryArbitrum_BlockChangedFilter",
          "renameTo": "BlockChangedFilter"
        },
        {
          "typeName": "treasuryArbitrum_Block_height",
          "renameTo": "Block_height"
        },
        {
          "typeName": "treasuryArbitrum_BondDiscount",
          "renameTo": "BondDiscount"
        },
        {
          "typeName": "treasuryArbitrum_BondDiscount_filter",
          "renameTo": "BondDiscount_filter"
        },
        {
          "typeName": "treasuryArbitrum_BondDiscount_orderBy",
          "renameTo": "BondDiscount_orderBy"
        },
        {
          "typeName": "treasuryArbitrum_Bytes",
          "renameTo": "Bytes"
        },
        {
          "typeName": "treasuryArbitrum_ConvexRewardPoolSnapshot",
          "renameTo": "ConvexRewardPoolSnapshot"
        },
        {
          "typeName": "treasuryArbitrum_ConvexRewardPoolSnapshot_filter",
          "renameTo": "ConvexRewardPoolSnapshot_filter"
        },
        {
          "typeName": "treasuryArbitrum_ConvexRewardPoolSnapshot_orderBy",
          "renameTo": "ConvexRewardPoolSnapshot_orderBy"
        },
        {
          "typeName": "treasuryArbitrum_DailyBond",
          "renameTo": "DailyBond"
        },
        {
          "typeName": "treasuryArbitrum_DailyBond_filter",
          "renameTo": "DailyBond_filter"
        },
        {
          "typeName": "treasuryArbitrum_DailyBond_orderBy",
          "renameTo": "DailyBond_orderBy"
        },
        {
          "typeName": "treasuryArbitrum_DailyStakingReward",
          "renameTo": "DailyStakingReward"
        },
        {
          "typeName": "treasuryArbitrum_DailyStakingReward_filter",
          "renameTo": "DailyStakingReward_filter"
        },
        {
          "typeName": "treasuryArbitrum_DailyStakingReward_orderBy",
          "renameTo": "DailyStakingReward_orderBy"
        },
        {
          "typeName": "treasuryArbitrum_ERC20TokenSnapshot",
          "renameTo": "ERC20TokenSnapshot"
        },
        {
          "typeName": "treasuryArbitrum_ERC20TokenSnapshot_filter",
          "renameTo": "ERC20TokenSnapshot_filter"
        },
        {
          "typeName": "treasuryArbitrum_ERC20TokenSnapshot_orderBy",
          "renameTo": "ERC20TokenSnapshot_orderBy"
        },
        {
          "typeName": "treasuryArbitrum_GnosisAuction",
          "renameTo": "GnosisAuction"
        },
        {
          "typeName": "treasuryArbitrum_GnosisAuctionRoot",
          "renameTo": "GnosisAuctionRoot"
        },
        {
          "typeName": "treasuryArbitrum_GnosisAuctionRoot_filter",
          "renameTo": "GnosisAuctionRoot_filter"
        },
        {
          "typeName": "treasuryArbitrum_GnosisAuctionRoot_orderBy",
          "renameTo": "GnosisAuctionRoot_orderBy"
        },
        {
          "typeName": "treasuryArbitrum_GnosisAuction_filter",
          "renameTo": "GnosisAuction_filter"
        },
        {
          "typeName": "treasuryArbitrum_GnosisAuction_orderBy",
          "renameTo": "GnosisAuction_orderBy"
        },
        {
          "typeName": "treasuryArbitrum_OrderDirection",
          "renameTo": "OrderDirection"
        },
        {
          "typeName": "treasuryArbitrum_PoolSnapshot",
          "renameTo": "PoolSnapshot"
        },
        {
          "typeName": "treasuryArbitrum_PoolSnapshot_filter",
          "renameTo": "PoolSnapshot_filter"
        },
        {
          "typeName": "treasuryArbitrum_PoolSnapshot_orderBy",
          "renameTo": "PoolSnapshot_orderBy"
        },
        {
          "typeName": "treasuryArbitrum_PriceSnapshot",
          "renameTo": "PriceSnapshot"
        },
        {
          "typeName": "treasuryArbitrum_PriceSnapshot_filter",
          "renameTo": "PriceSnapshot_filter"
        },
        {
          "typeName": "treasuryArbitrum_PriceSnapshot_orderBy",
          "renameTo": "PriceSnapshot_orderBy"
        },
        {
          "typeName": "treasuryArbitrum_ProtocolMetric",
          "renameTo": "ProtocolMetric"
        },
        {
          "typeName": "treasuryArbitrum_ProtocolMetric_filter",
          "renameTo": "ProtocolMetric_filter"
        },
        {
          "typeName": "treasuryArbitrum_ProtocolMetric_orderBy",
          "renameTo": "ProtocolMetric_orderBy"
        },
        {
          "typeName": "treasuryArbitrum_Rebase",
          "renameTo": "Rebase"
        },
        {
          "typeName": "treasuryArbitrum_Rebase_filter",
          "renameTo": "Rebase_filter"
        },
        {
          "typeName": "treasuryArbitrum_Rebase_orderBy",
          "renameTo": "Rebase_orderBy"
        },
        {
          "typeName": "treasuryArbitrum_StakingPoolSnapshot",
          "renameTo": "StakingPoolSnapshot"
        },
        {
          "typeName": "treasuryArbitrum_StakingPoolSnapshot_filter",
          "renameTo": "StakingPoolSnapshot_filter"
        },
        {
          "typeName": "treasuryArbitrum_StakingPoolSnapshot_orderBy",
          "renameTo": "StakingPoolSnapshot_orderBy"
        },
        {
          "typeName": "treasuryArbitrum_Token",
          "renameTo": "Token"
        },
        {
          "typeName": "treasuryArbitrum_TokenPriceSnapshot",
          "renameTo": "TokenPriceSnapshot"
        },
        {
          "typeName": "treasuryArbitrum_TokenPriceSnapshot_filter",
          "renameTo": "TokenPriceSnapshot_filter"
        },
        {
          "typeName": "treasuryArbitrum_TokenPriceSnapshot_orderBy",
          "renameTo": "TokenPriceSnapshot_orderBy"
        },
        {
          "typeName": "treasuryArbitrum_TokenRecord",
          "renameTo": "TokenRecord"
        },
        {
          "typeName": "treasuryArbitrum_TokenRecord_filter",
          "renameTo": "TokenRecord_filter"
        },
        {
          "typeName": "treasuryArbitrum_TokenRecord_orderBy",
          "renameTo": "TokenRecord_orderBy"
        },
        {
          "typeName": "treasuryArbitrum_TokenSupply",
          "renameTo": "TokenSupply"
        },
        {
          "typeName": "treasuryArbitrum_TokenSupply_filter",
          "renameTo": "TokenSupply_filter"
        },
        {
          "typeName": "treasuryArbitrum_TokenSupply_orderBy",
          "renameTo": "TokenSupply_orderBy"
        },
        {
          "typeName": "treasuryArbitrum_Token_filter",
          "renameTo": "Token_filter"
        },
        {
          "typeName": "treasuryArbitrum_Token_orderBy",
          "renameTo": "Token_orderBy"
        },
        {
          "typeName": "treasuryArbitrum__Block_",
          "renameTo": "_Block_"
        },
        {
          "typeName": "treasuryArbitrum__Meta_",
          "renameTo": "_Meta_"
        },
        {
          "typeName": "treasuryArbitrum__SubgraphErrorPolicy_",
          "renameTo": "_SubgraphErrorPolicy_"
        },
        {
          "typeName": "treasuryEthereum_BalancerPoolSnapshot",
          "renameTo": "BalancerPoolSnapshot"
        },
        {
          "typeName": "treasuryEthereum_BalancerPoolSnapshot_filter",
          "renameTo": "BalancerPoolSnapshot_filter"
        },
        {
          "typeName": "treasuryEthereum_BalancerPoolSnapshot_orderBy",
          "renameTo": "BalancerPoolSnapshot_orderBy"
        },
        {
          "typeName": "treasuryEthereum_BigDecimal",
          "renameTo": "BigDecimal"
        },
        {
          "typeName": "treasuryEthereum_BlockChangedFilter",
          "renameTo": "BlockChangedFilter"
        },
        {
          "typeName": "treasuryEthereum_Block_height",
          "renameTo": "Block_height"
        },
        {
          "typeName": "treasuryEthereum_BondDiscount",
          "renameTo": "BondDiscount"
        },
        {
          "typeName": "treasuryEthereum_BondDiscount_filter",
          "renameTo": "BondDiscount_filter"
        },
        {
          "typeName": "treasuryEthereum_BondDiscount_orderBy",
          "renameTo": "BondDiscount_orderBy"
        },
        {
          "typeName": "treasuryEthereum_Bytes",
          "renameTo": "Bytes"
        },
        {
          "typeName": "treasuryEthereum_ConvexRewardPoolSnapshot",
          "renameTo": "ConvexRewardPoolSnapshot"
        },
        {
          "typeName": "treasuryEthereum_ConvexRewardPoolSnapshot_filter",
          "renameTo": "ConvexRewardPoolSnapshot_filter"
        },
        {
          "typeName": "treasuryEthereum_ConvexRewardPoolSnapshot_orderBy",
          "renameTo": "ConvexRewardPoolSnapshot_orderBy"
        },
        {
          "typeName": "treasuryEthereum_DailyBond",
          "renameTo": "DailyBond"
        },
        {
          "typeName": "treasuryEthereum_DailyBond_filter",
          "renameTo": "DailyBond_filter"
        },
        {
          "typeName": "treasuryEthereum_DailyBond_orderBy",
          "renameTo": "DailyBond_orderBy"
        },
        {
          "typeName": "treasuryEthereum_DailyStakingReward",
          "renameTo": "DailyStakingReward"
        },
        {
          "typeName": "treasuryEthereum_DailyStakingReward_filter",
          "renameTo": "DailyStakingReward_filter"
        },
        {
          "typeName": "treasuryEthereum_DailyStakingReward_orderBy",
          "renameTo": "DailyStakingReward_orderBy"
        },
        {
          "typeName": "treasuryEthereum_ERC20TokenSnapshot",
          "renameTo": "ERC20TokenSnapshot"
        },
        {
          "typeName": "treasuryEthereum_ERC20TokenSnapshot_filter",
          "renameTo": "ERC20TokenSnapshot_filter"
        },
        {
          "typeName": "treasuryEthereum_ERC20TokenSnapshot_orderBy",
          "renameTo": "ERC20TokenSnapshot_orderBy"
        },
        {
          "typeName": "treasuryEthereum_GnosisAuction",
          "renameTo": "GnosisAuction"
        },
        {
          "typeName": "treasuryEthereum_GnosisAuctionRoot",
          "renameTo": "GnosisAuctionRoot"
        },
        {
          "typeName": "treasuryEthereum_GnosisAuctionRoot_filter",
          "renameTo": "GnosisAuctionRoot_filter"
        },
        {
          "typeName": "treasuryEthereum_GnosisAuctionRoot_orderBy",
          "renameTo": "GnosisAuctionRoot_orderBy"
        },
        {
          "typeName": "treasuryEthereum_GnosisAuction_filter",
          "renameTo": "GnosisAuction_filter"
        },
        {
          "typeName": "treasuryEthereum_GnosisAuction_orderBy",
          "renameTo": "GnosisAuction_orderBy"
        },
        {
          "typeName": "treasuryEthereum_OrderDirection",
          "renameTo": "OrderDirection"
        },
        {
          "typeName": "treasuryEthereum_PoolSnapshot",
          "renameTo": "PoolSnapshot"
        },
        {
          "typeName": "treasuryEthereum_PoolSnapshot_filter",
          "renameTo": "PoolSnapshot_filter"
        },
        {
          "typeName": "treasuryEthereum_PoolSnapshot_orderBy",
          "renameTo": "PoolSnapshot_orderBy"
        },
        {
          "typeName": "treasuryEthereum_PriceSnapshot",
          "renameTo": "PriceSnapshot"
        },
        {
          "typeName": "treasuryEthereum_PriceSnapshot_filter",
          "renameTo": "PriceSnapshot_filter"
        },
        {
          "typeName": "treasuryEthereum_PriceSnapshot_orderBy",
          "renameTo": "PriceSnapshot_orderBy"
        },
        {
          "typeName": "treasuryEthereum_ProtocolMetric",
          "renameTo": "ProtocolMetric"
        },
        {
          "typeName": "treasuryEthereum_ProtocolMetric_filter",
          "renameTo": "ProtocolMetric_filter"
        },
        {
          "typeName": "treasuryEthereum_ProtocolMetric_orderBy",
          "renameTo": "ProtocolMetric_orderBy"
        },
        {
          "typeName": "treasuryEthereum_Rebase",
          "renameTo": "Rebase"
        },
        {
          "typeName": "treasuryEthereum_Rebase_filter",
          "renameTo": "Rebase_filter"
        },
        {
          "typeName": "treasuryEthereum_Rebase_orderBy",
          "renameTo": "Rebase_orderBy"
        },
        {
          "typeName": "treasuryEthereum_StakingPoolSnapshot",
          "renameTo": "StakingPoolSnapshot"
        },
        {
          "typeName": "treasuryEthereum_StakingPoolSnapshot_filter",
          "renameTo": "StakingPoolSnapshot_filter"
        },
        {
          "typeName": "treasuryEthereum_StakingPoolSnapshot_orderBy",
          "renameTo": "StakingPoolSnapshot_orderBy"
        },
        {
          "typeName": "treasuryEthereum_Token",
          "renameTo": "Token"
        },
        {
          "typeName": "treasuryEthereum_TokenPriceSnapshot",
          "renameTo": "TokenPriceSnapshot"
        },
        {
          "typeName": "treasuryEthereum_TokenPriceSnapshot_filter",
          "renameTo": "TokenPriceSnapshot_filter"
        },
        {
          "typeName": "treasuryEthereum_TokenPriceSnapshot_orderBy",
          "renameTo": "TokenPriceSnapshot_orderBy"
        },
        {
          "typeName": "treasuryEthereum_TokenRecord",
          "renameTo": "TokenRecord"
        },
        {
          "typeName": "treasuryEthereum_TokenRecord_filter",
          "renameTo": "TokenRecord_filter"
        },
        {
          "typeName": "treasuryEthereum_TokenRecord_orderBy",
          "renameTo": "TokenRecord_orderBy"
        },
        {
          "typeName": "treasuryEthereum_TokenSupply",
          "renameTo": "TokenSupply"
        },
        {
          "typeName": "treasuryEthereum_TokenSupply_filter",
          "renameTo": "TokenSupply_filter"
        },
        {
          "typeName": "treasuryEthereum_TokenSupply_orderBy",
          "renameTo": "TokenSupply_orderBy"
        },
        {
          "typeName": "treasuryEthereum_Token_filter",
          "renameTo": "Token_filter"
        },
        {
          "typeName": "treasuryEthereum_Token_orderBy",
          "renameTo": "Token_orderBy"
        },
        {
          "typeName": "treasuryEthereum__Block_",
          "renameTo": "_Block_"
        },
        {
          "typeName": "treasuryEthereum__Meta_",
          "renameTo": "_Meta_"
        },
        {
          "typeName": "treasuryEthereum__SubgraphErrorPolicy_",
          "renameTo": "_SubgraphErrorPolicy_"
        },
        {
          "typeName": "treasuryFantom_BalancerPoolSnapshot",
          "renameTo": "BalancerPoolSnapshot"
        },
        {
          "typeName": "treasuryFantom_BalancerPoolSnapshot_filter",
          "renameTo": "BalancerPoolSnapshot_filter"
        },
        {
          "typeName": "treasuryFantom_BalancerPoolSnapshot_orderBy",
          "renameTo": "BalancerPoolSnapshot_orderBy"
        },
        {
          "typeName": "treasuryFantom_BigDecimal",
          "renameTo": "BigDecimal"
        },
        {
          "typeName": "treasuryFantom_BlockChangedFilter",
          "renameTo": "BlockChangedFilter"
        },
        {
          "typeName": "treasuryFantom_Block_height",
          "renameTo": "Block_height"
        },
        {
          "typeName": "treasuryFantom_BondDiscount",
          "renameTo": "BondDiscount"
        },
        {
          "typeName": "treasuryFantom_BondDiscount_filter",
          "renameTo": "BondDiscount_filter"
        },
        {
          "typeName": "treasuryFantom_BondDiscount_orderBy",
          "renameTo": "BondDiscount_orderBy"
        },
        {
          "typeName": "treasuryFantom_Bytes",
          "renameTo": "Bytes"
        },
        {
          "typeName": "treasuryFantom_ConvexRewardPoolSnapshot",
          "renameTo": "ConvexRewardPoolSnapshot"
        },
        {
          "typeName": "treasuryFantom_ConvexRewardPoolSnapshot_filter",
          "renameTo": "ConvexRewardPoolSnapshot_filter"
        },
        {
          "typeName": "treasuryFantom_ConvexRewardPoolSnapshot_orderBy",
          "renameTo": "ConvexRewardPoolSnapshot_orderBy"
        },
        {
          "typeName": "treasuryFantom_DailyBond",
          "renameTo": "DailyBond"
        },
        {
          "typeName": "treasuryFantom_DailyBond_filter",
          "renameTo": "DailyBond_filter"
        },
        {
          "typeName": "treasuryFantom_DailyBond_orderBy",
          "renameTo": "DailyBond_orderBy"
        },
        {
          "typeName": "treasuryFantom_DailyStakingReward",
          "renameTo": "DailyStakingReward"
        },
        {
          "typeName": "treasuryFantom_DailyStakingReward_filter",
          "renameTo": "DailyStakingReward_filter"
        },
        {
          "typeName": "treasuryFantom_DailyStakingReward_orderBy",
          "renameTo": "DailyStakingReward_orderBy"
        },
        {
          "typeName": "treasuryFantom_ERC20TokenSnapshot",
          "renameTo": "ERC20TokenSnapshot"
        },
        {
          "typeName": "treasuryFantom_ERC20TokenSnapshot_filter",
          "renameTo": "ERC20TokenSnapshot_filter"
        },
        {
          "typeName": "treasuryFantom_ERC20TokenSnapshot_orderBy",
          "renameTo": "ERC20TokenSnapshot_orderBy"
        },
        {
          "typeName": "treasuryFantom_GnosisAuction",
          "renameTo": "GnosisAuction"
        },
        {
          "typeName": "treasuryFantom_GnosisAuctionRoot",
          "renameTo": "GnosisAuctionRoot"
        },
        {
          "typeName": "treasuryFantom_GnosisAuctionRoot_filter",
          "renameTo": "GnosisAuctionRoot_filter"
        },
        {
          "typeName": "treasuryFantom_GnosisAuctionRoot_orderBy",
          "renameTo": "GnosisAuctionRoot_orderBy"
        },
        {
          "typeName": "treasuryFantom_GnosisAuction_filter",
          "renameTo": "GnosisAuction_filter"
        },
        {
          "typeName": "treasuryFantom_GnosisAuction_orderBy",
          "renameTo": "GnosisAuction_orderBy"
        },
        {
          "typeName": "treasuryFantom_OrderDirection",
          "renameTo": "OrderDirection"
        },
        {
          "typeName": "treasuryFantom_PoolSnapshot",
          "renameTo": "PoolSnapshot"
        },
        {
          "typeName": "treasuryFantom_PoolSnapshot_filter",
          "renameTo": "PoolSnapshot_filter"
        },
        {
          "typeName": "treasuryFantom_PoolSnapshot_orderBy",
          "renameTo": "PoolSnapshot_orderBy"
        },
        {
          "typeName": "treasuryFantom_PriceSnapshot",
          "renameTo": "PriceSnapshot"
        },
        {
          "typeName": "treasuryFantom_PriceSnapshot_filter",
          "renameTo": "PriceSnapshot_filter"
        },
        {
          "typeName": "treasuryFantom_PriceSnapshot_orderBy",
          "renameTo": "PriceSnapshot_orderBy"
        },
        {
          "typeName": "treasuryFantom_ProtocolMetric",
          "renameTo": "ProtocolMetric"
        },
        {
          "typeName": "treasuryFantom_ProtocolMetric_filter",
          "renameTo": "ProtocolMetric_filter"
        },
        {
          "typeName": "treasuryFantom_ProtocolMetric_orderBy",
          "renameTo": "ProtocolMetric_orderBy"
        },
        {
          "typeName": "treasuryFantom_Rebase",
          "renameTo": "Rebase"
        },
        {
          "typeName": "treasuryFantom_Rebase_filter",
          "renameTo": "Rebase_filter"
        },
        {
          "typeName": "treasuryFantom_Rebase_orderBy",
          "renameTo": "Rebase_orderBy"
        },
        {
          "typeName": "treasuryFantom_StakingPoolSnapshot",
          "renameTo": "StakingPoolSnapshot"
        },
        {
          "typeName": "treasuryFantom_StakingPoolSnapshot_filter",
          "renameTo": "StakingPoolSnapshot_filter"
        },
        {
          "typeName": "treasuryFantom_StakingPoolSnapshot_orderBy",
          "renameTo": "StakingPoolSnapshot_orderBy"
        },
        {
          "typeName": "treasuryFantom_Token",
          "renameTo": "Token"
        },
        {
          "typeName": "treasuryFantom_TokenPriceSnapshot",
          "renameTo": "TokenPriceSnapshot"
        },
        {
          "typeName": "treasuryFantom_TokenPriceSnapshot_filter",
          "renameTo": "TokenPriceSnapshot_filter"
        },
        {
          "typeName": "treasuryFantom_TokenPriceSnapshot_orderBy",
          "renameTo": "TokenPriceSnapshot_orderBy"
        },
        {
          "typeName": "treasuryFantom_TokenRecord",
          "renameTo": "TokenRecord"
        },
        {
          "typeName": "treasuryFantom_TokenRecord_filter",
          "renameTo": "TokenRecord_filter"
        },
        {
          "typeName": "treasuryFantom_TokenRecord_orderBy",
          "renameTo": "TokenRecord_orderBy"
        },
        {
          "typeName": "treasuryFantom_TokenSupply",
          "renameTo": "TokenSupply"
        },
        {
          "typeName": "treasuryFantom_TokenSupply_filter",
          "renameTo": "TokenSupply_filter"
        },
        {
          "typeName": "treasuryFantom_TokenSupply_orderBy",
          "renameTo": "TokenSupply_orderBy"
        },
        {
          "typeName": "treasuryFantom_Token_filter",
          "renameTo": "Token_filter"
        },
        {
          "typeName": "treasuryFantom_Token_orderBy",
          "renameTo": "Token_orderBy"
        },
        {
          "typeName": "treasuryFantom__Block_",
          "renameTo": "_Block_"
        },
        {
          "typeName": "treasuryFantom__Meta_",
          "renameTo": "_Meta_"
        },
        {
          "typeName": "treasuryFantom__SubgraphErrorPolicy_",
          "renameTo": "_SubgraphErrorPolicy_"
        },
        {
          "typeName": "treasuryPolygon_BalancerPoolSnapshot",
          "renameTo": "BalancerPoolSnapshot"
        },
        {
          "typeName": "treasuryPolygon_BalancerPoolSnapshot_filter",
          "renameTo": "BalancerPoolSnapshot_filter"
        },
        {
          "typeName": "treasuryPolygon_BalancerPoolSnapshot_orderBy",
          "renameTo": "BalancerPoolSnapshot_orderBy"
        },
        {
          "typeName": "treasuryPolygon_BigDecimal",
          "renameTo": "BigDecimal"
        },
        {
          "typeName": "treasuryPolygon_BlockChangedFilter",
          "renameTo": "BlockChangedFilter"
        },
        {
          "typeName": "treasuryPolygon_Block_height",
          "renameTo": "Block_height"
        },
        {
          "typeName": "treasuryPolygon_BondDiscount",
          "renameTo": "BondDiscount"
        },
        {
          "typeName": "treasuryPolygon_BondDiscount_filter",
          "renameTo": "BondDiscount_filter"
        },
        {
          "typeName": "treasuryPolygon_BondDiscount_orderBy",
          "renameTo": "BondDiscount_orderBy"
        },
        {
          "typeName": "treasuryPolygon_Bytes",
          "renameTo": "Bytes"
        },
        {
          "typeName": "treasuryPolygon_ConvexRewardPoolSnapshot",
          "renameTo": "ConvexRewardPoolSnapshot"
        },
        {
          "typeName": "treasuryPolygon_ConvexRewardPoolSnapshot_filter",
          "renameTo": "ConvexRewardPoolSnapshot_filter"
        },
        {
          "typeName": "treasuryPolygon_ConvexRewardPoolSnapshot_orderBy",
          "renameTo": "ConvexRewardPoolSnapshot_orderBy"
        },
        {
          "typeName": "treasuryPolygon_DailyBond",
          "renameTo": "DailyBond"
        },
        {
          "typeName": "treasuryPolygon_DailyBond_filter",
          "renameTo": "DailyBond_filter"
        },
        {
          "typeName": "treasuryPolygon_DailyBond_orderBy",
          "renameTo": "DailyBond_orderBy"
        },
        {
          "typeName": "treasuryPolygon_DailyStakingReward",
          "renameTo": "DailyStakingReward"
        },
        {
          "typeName": "treasuryPolygon_DailyStakingReward_filter",
          "renameTo": "DailyStakingReward_filter"
        },
        {
          "typeName": "treasuryPolygon_DailyStakingReward_orderBy",
          "renameTo": "DailyStakingReward_orderBy"
        },
        {
          "typeName": "treasuryPolygon_ERC20TokenSnapshot",
          "renameTo": "ERC20TokenSnapshot"
        },
        {
          "typeName": "treasuryPolygon_ERC20TokenSnapshot_filter",
          "renameTo": "ERC20TokenSnapshot_filter"
        },
        {
          "typeName": "treasuryPolygon_ERC20TokenSnapshot_orderBy",
          "renameTo": "ERC20TokenSnapshot_orderBy"
        },
        {
          "typeName": "treasuryPolygon_GnosisAuction",
          "renameTo": "GnosisAuction"
        },
        {
          "typeName": "treasuryPolygon_GnosisAuctionRoot",
          "renameTo": "GnosisAuctionRoot"
        },
        {
          "typeName": "treasuryPolygon_GnosisAuctionRoot_filter",
          "renameTo": "GnosisAuctionRoot_filter"
        },
        {
          "typeName": "treasuryPolygon_GnosisAuctionRoot_orderBy",
          "renameTo": "GnosisAuctionRoot_orderBy"
        },
        {
          "typeName": "treasuryPolygon_GnosisAuction_filter",
          "renameTo": "GnosisAuction_filter"
        },
        {
          "typeName": "treasuryPolygon_GnosisAuction_orderBy",
          "renameTo": "GnosisAuction_orderBy"
        },
        {
          "typeName": "treasuryPolygon_OrderDirection",
          "renameTo": "OrderDirection"
        },
        {
          "typeName": "treasuryPolygon_PoolSnapshot",
          "renameTo": "PoolSnapshot"
        },
        {
          "typeName": "treasuryPolygon_PoolSnapshot_filter",
          "renameTo": "PoolSnapshot_filter"
        },
        {
          "typeName": "treasuryPolygon_PoolSnapshot_orderBy",
          "renameTo": "PoolSnapshot_orderBy"
        },
        {
          "typeName": "treasuryPolygon_PriceSnapshot",
          "renameTo": "PriceSnapshot"
        },
        {
          "typeName": "treasuryPolygon_PriceSnapshot_filter",
          "renameTo": "PriceSnapshot_filter"
        },
        {
          "typeName": "treasuryPolygon_PriceSnapshot_orderBy",
          "renameTo": "PriceSnapshot_orderBy"
        },
        {
          "typeName": "treasuryPolygon_ProtocolMetric",
          "renameTo": "ProtocolMetric"
        },
        {
          "typeName": "treasuryPolygon_ProtocolMetric_filter",
          "renameTo": "ProtocolMetric_filter"
        },
        {
          "typeName": "treasuryPolygon_ProtocolMetric_orderBy",
          "renameTo": "ProtocolMetric_orderBy"
        },
        {
          "typeName": "treasuryPolygon_Rebase",
          "renameTo": "Rebase"
        },
        {
          "typeName": "treasuryPolygon_Rebase_filter",
          "renameTo": "Rebase_filter"
        },
        {
          "typeName": "treasuryPolygon_Rebase_orderBy",
          "renameTo": "Rebase_orderBy"
        },
        {
          "typeName": "treasuryPolygon_StakingPoolSnapshot",
          "renameTo": "StakingPoolSnapshot"
        },
        {
          "typeName": "treasuryPolygon_StakingPoolSnapshot_filter",
          "renameTo": "StakingPoolSnapshot_filter"
        },
        {
          "typeName": "treasuryPolygon_StakingPoolSnapshot_orderBy",
          "renameTo": "StakingPoolSnapshot_orderBy"
        },
        {
          "typeName": "treasuryPolygon_Token",
          "renameTo": "Token"
        },
        {
          "typeName": "treasuryPolygon_TokenPriceSnapshot",
          "renameTo": "TokenPriceSnapshot"
        },
        {
          "typeName": "treasuryPolygon_TokenPriceSnapshot_filter",
          "renameTo": "TokenPriceSnapshot_filter"
        },
        {
          "typeName": "treasuryPolygon_TokenPriceSnapshot_orderBy",
          "renameTo": "TokenPriceSnapshot_orderBy"
        },
        {
          "typeName": "treasuryPolygon_TokenRecord",
          "renameTo": "TokenRecord"
        },
        {
          "typeName": "treasuryPolygon_TokenRecord_filter",
          "renameTo": "TokenRecord_filter"
        },
        {
          "typeName": "treasuryPolygon_TokenRecord_orderBy",
          "renameTo": "TokenRecord_orderBy"
        },
        {
          "typeName": "treasuryPolygon_TokenSupply",
          "renameTo": "TokenSupply"
        },
        {
          "typeName": "treasuryPolygon_TokenSupply_filter",
          "renameTo": "TokenSupply_filter"
        },
        {
          "typeName": "treasuryPolygon_TokenSupply_orderBy",
          "renameTo": "TokenSupply_orderBy"
        },
        {
          "typeName": "treasuryPolygon_Token_filter",
          "renameTo": "Token_filter"
        },
        {
          "typeName": "treasuryPolygon_Token_orderBy",
          "renameTo": "Token_orderBy"
        },
        {
          "typeName": "treasuryPolygon__Block_",
          "renameTo": "_Block_"
        },
        {
          "typeName": "treasuryPolygon__Meta_",
          "renameTo": "_Meta_"
        },
        {
          "typeName": "treasuryPolygon__SubgraphErrorPolicy_",
          "renameTo": "_SubgraphErrorPolicy_"
        }
      ]
    },
    "s3UploadConfiguration": [],
    "corsConfiguration": {
      "maxAge": 120,
      "allowedHeaders": [
        "*"
      ],
      "allowedMethods": [
        "GET",
        "POST"
      ],
      "exposedHeaders": [
        "*"
      ],
      "allowCredentials": true,
      "allowedOrigins": [
        {
          "kind": 0,
          "environmentVariableDefaultValue": "",
          "environmentVariableName": "",
          "placeholderVariableName": "",
          "staticVariableContent": "http://localhost:3000"
        }
      ]
    },
    "authenticationConfig": {
      "cookieBased": {
        "providers": [],
        "authorizedRedirectUris": [],
        "authorizedRedirectUriRegexes": [],
        "blockKey": {
          "kind": 0,
          "environmentVariableDefaultValue": "",
          "environmentVariableName": "",
          "placeholderVariableName": "",
          "staticVariableContent": ""
        },
        "hashKey": {
          "kind": 0,
          "environmentVariableDefaultValue": "",
          "environmentVariableName": "",
          "placeholderVariableName": "",
          "staticVariableContent": ""
        },
        "csrfSecret": {
          "kind": 0,
          "environmentVariableDefaultValue": "",
          "environmentVariableName": "",
          "placeholderVariableName": "",
          "staticVariableContent": ""
        }
      },
      "hooks": {
        "postAuthentication": false,
        "mutatingPostAuthentication": false,
        "revalidateAuthentication": false,
        "postLogout": false
      },
      "jwksBased": {
        "providers": []
      },
      "publicClaims": []
    },
    "allowedHostNames": [],
    "webhooks": [],
    "nodeOptions": {
      "nodeUrl": {
        "kind": 1,
        "staticVariableContent": "",
        "placeholderVariableName": "",
        "environmentVariableDefaultValue": "http://localhost:9991",
        "environmentVariableName": "WG_NODE_URL"
      },
      "nodeInternalUrl": {
        "kind": 1,
        "staticVariableContent": "",
        "placeholderVariableName": "",
        "environmentVariableDefaultValue": "http://localhost:9993",
        "environmentVariableName": "WG_NODE_INTERNAL_URL"
      },
      "publicNodeUrl": {
        "kind": 1,
        "staticVariableContent": "",
        "placeholderVariableName": "",
        "environmentVariableDefaultValue": "http://localhost:9991",
        "environmentVariableName": "WG_PUBLIC_NODE_URL"
      },
      "listen": {
        "host": {
          "kind": 1,
          "staticVariableContent": "",
          "placeholderVariableName": "",
          "environmentVariableDefaultValue": "localhost",
          "environmentVariableName": "WG_NODE_HOST"
        },
        "port": {
          "kind": 1,
          "staticVariableContent": "",
          "placeholderVariableName": "",
          "environmentVariableDefaultValue": "9991",
          "environmentVariableName": "WG_NODE_PORT"
        }
      },
      "listenInternal": {
        "port": {
          "kind": 1,
          "staticVariableContent": "",
          "placeholderVariableName": "",
          "environmentVariableDefaultValue": "9993",
          "environmentVariableName": "WG_NODE_INTERNAL_PORT"
        }
      },
      "logger": {
        "level": {
          "kind": 1,
          "staticVariableContent": "",
          "placeholderVariableName": "",
          "environmentVariableDefaultValue": "info",
          "environmentVariableName": "WG_LOG_LEVEL"
        }
      },
      "defaultRequestTimeoutSeconds": 0,
      "defaultHttpProxyUrl": {
        "kind": 1,
        "staticVariableContent": "",
        "placeholderVariableName": "",
        "environmentVariableDefaultValue": "",
        "environmentVariableName": "WG_HTTP_PROXY"
      }
    },
    "serverOptions": {
      "serverUrl": {
        "kind": 1,
        "staticVariableContent": "",
        "placeholderVariableName": "",
        "environmentVariableDefaultValue": "http://localhost:9992",
        "environmentVariableName": "WG_SERVER_URL"
      },
      "listen": {
        "host": {
          "kind": 1,
          "staticVariableContent": "",
          "placeholderVariableName": "",
          "environmentVariableDefaultValue": "localhost",
          "environmentVariableName": "WG_SERVER_HOST"
        },
        "port": {
          "kind": 1,
          "staticVariableContent": "",
          "placeholderVariableName": "",
          "environmentVariableDefaultValue": "9992",
          "environmentVariableName": "WG_SERVER_PORT"
        }
      },
      "logger": {
        "level": {
          "kind": 1,
          "staticVariableContent": "",
          "placeholderVariableName": "",
          "environmentVariableDefaultValue": "info",
          "environmentVariableName": "WG_LOG_LEVEL"
        }
      }
    }
  },
  "dangerouslyEnableGraphQLEndpoint": false
}