# Code generated by "wunderctl"; DO NOT EDIT.

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @treasuryArbitrum_derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @treasuryArbitrum_entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @treasuryArbitrum_subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @treasuryEthereum_derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @treasuryEthereum_entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @treasuryEthereum_subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @treasuryFantom_derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @treasuryFantom_entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @treasuryFantom_subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @treasuryPolygon_derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @treasuryPolygon_entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @treasuryPolygon_subgraphId(id: String!) on OBJECT

"""
The @removeNullVariables directive allows you to remove variables with null value from your GraphQL Query or Mutation Operations.

A potential use-case could be that you have a graphql upstream which is not accepting null values for variables.
By enabling this directive all variables with null values will be removed from upstream query.

query ($say: String, $name: String) @removeNullVariables {
	hello(say: $say, name: $name)
}

Directive will transform variables json and remove top level null values.
{ "say": null, "name": "world" }

So upstream will receive the following variables:

{ "name": "world" }
"""
directive @removeNullVariables on QUERY | MUTATION

directive @hooksVariable on VARIABLE_DEFINITION

directive @jsonSchema(
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  title: String
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  description: String
  """
  The value of "multipleOf" MUST be a number, strictly greater than 0.
  
  A numeric instance is valid only if division by this keyword's value
  results in an integer.
  """
  multipleOf: Int
  """
  The value of "maximum" MUST be a number, representing an inclusive
  upper limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is less than or exactly equal to "maximum".
  """
  maximum: Int
  """
  The value of "exclusiveMaximum" MUST be number, representing an
  exclusive upper limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly less than (not equal to) "exclusiveMaximum".
  """
  exclusiveMaximum: Int
  """
  The value of "minimum" MUST be a number, representing an inclusive
  lower limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is greater than or exactly equal to "minimum".
  """
  minimum: Int
  """
  The value of "exclusiveMinimum" MUST be number, representing an
  exclusive lower limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly greater than (not equal to) "exclusiveMinimum".
  """
  exclusiveMinimum: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is less
  than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  """
  maxLength: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is
  greater than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minLength: Int
  """
  The value of this keyword MUST be a string.  This string SHOULD be a
  valid regular expression, according to the ECMA 262 regular
  expression dialect.
  
  A string instance is considered valid if the regular expression
  matches the instance successfully.  Recall: regular expressions are
  not implicitly anchored.
  """
  pattern: String
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "maxItems" if its size is less
  than, or equal to, the value of this keyword.
  """
  maxItems: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "minItems" if its size is greater
  than, or equal to, the value of this keyword.
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minItems: Int
  """
  The value of this keyword MUST be a boolean.
  
  If this keyword has boolean value false, the instance validates
  successfully.  If it has boolean value true, the instance validates
  successfully if all of its elements are unique.
  
  Omitting this keyword has the same behavior as a value of false.
  """
  uniqueItems: Boolean
  commonPattern: COMMON_REGEX_PATTERN
  """Optional field to apply the JSON schema to"""
  on: String
) repeatable on VARIABLE_DEFINITION

directive @rbac(
  """the user must match all roles"""
  requireMatchAll: [WG_ROLE]
  """the user must match at least one of the roles"""
  requireMatchAny: [WG_ROLE]
  """the user must not match all of the roles"""
  denyMatchAll: [WG_ROLE]
  """the user must not match any of the roles"""
  denyMatchAny: [WG_ROLE]
) on QUERY | MUTATION | SUBSCRIPTION

"""
The @fromClaim directive sets the variable to the value retrieved from the given a claim.
Adding this directive makes the operation require authentication.
"""
directive @fromClaim(name: WG_CLAIM, on: String = "") repeatable on VARIABLE_DEFINITION

"""
The directive @injectCurrentDateTime injects a DateTime string of the current date and time into the variable.
This variable MUST be a string compatible scalar. 

The default format, is: ISO 8601
If no format is chosen, the default format is used.
Custom formats are allowed by specifying a format conforming to the Golang specification for specifying a date time format.
"""
directive @injectCurrentDateTime(
  format: WunderGraphDateTimeFormat = ISO8601
  """
  customFormat must conform to the Golang specification for specifying a date time format
  """
  customFormat: String
  on: String = ""
) repeatable on VARIABLE_DEFINITION

"""
The directive @injectGeneratedUUID injects a generated UUID into the variable.
This variable MUST be a string.
At the same time, it removes the variable from the input definition,
disallowing the user to supply it.

This means, the UUID is 100% generated server-side and can be considered untempered.
"""
directive @injectGeneratedUUID(on: String = "") repeatable on VARIABLE_DEFINITION

"""
The @internalOperation Directive marks an Operation as internal.
By doing so, the Operation is no longer accessible from the public API.
It can only be accessed by internal services, like hooks.
"""
directive @internalOperation on QUERY | MUTATION | SUBSCRIPTION

"""
The directive @injectEnvironmentVariable allows you to inject an environment variable into the variable definition.
"""
directive @injectEnvironmentVariable(name: String!, on: String = "") repeatable on VARIABLE_DEFINITION

"""
The @export directive instructs the Execution Planner to export the field during the execution into the variable of the 'as' argument.
As the execution is depth first, a field can only be used after it has been exported.
Additionally, a field can only be used after using the '_join' field or on a different data source.
It's not possible to export a field and use it in for the same data source.

Note that the @export directive only works on fields that return a single value.
It's not possible to export a list or object field.
"""
directive @export(
  """The argument 'as' is the name of the variable to export the field to."""
  as: String!
) on FIELD

"""
The directive @internal marks a variable definition as internal so that clients can't access it.
The field is also not visible in the public API.
It's only being used as an internal variable to export fields into.
"""
directive @internal on VARIABLE_DEFINITION

"""
The @transform directive allows to apply transformations to the response.
By applying the directive, the shape of the response can be altered,
which will also modify the JSON-Schema of the response.
That is, you will keep full type safety and code-generation for transformed fields.
"""
directive @transform(
  """
  Using the 'get' transformation allows you to extract a nested field using a JSON path.
  This is useful to unnest data, e.g. when using the '_join' field, which adds an extra layer of nesting.
  
  Example:
  
  query GetName {
      name: me @transform(get: "info.name") {
          info {
              name
          }
      }
  }
  
  Before the transformation, the resolve looks like this:
  
  {
      "name": {
          "info": {
              "name": "John Doe"
          }
      }
  }
  
  With the transformation applied, the response will be reshaped like this:
  
  {
      "name": "John Doe"
  }
  """
  get: String
) on FIELD

type treasuryArbitrum_BalancerPoolSnapshot {
  balances: [treasuryArbitrum_BigDecimal!]!
  block: BigInt!
  decimals: Int!
  id: ID!
  pool: treasuryArbitrum_Bytes!
  poolToken: treasuryArbitrum_Bytes!
  tokens: [treasuryArbitrum_Bytes!]!
  totalSupply: treasuryArbitrum_BigDecimal!
  weights: [treasuryArbitrum_BigDecimal!]!
  _join: Query!
}

input treasuryArbitrum_BalancerPoolSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryArbitrum_BlockChangedFilter
  and: [treasuryArbitrum_BalancerPoolSnapshot_filter]
  balances: [treasuryArbitrum_BigDecimal!]
  balances_contains: [treasuryArbitrum_BigDecimal!]
  balances_contains_nocase: [treasuryArbitrum_BigDecimal!]
  balances_not: [treasuryArbitrum_BigDecimal!]
  balances_not_contains: [treasuryArbitrum_BigDecimal!]
  balances_not_contains_nocase: [treasuryArbitrum_BigDecimal!]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  decimals: Int
  decimals_gt: Int
  decimals_gte: Int
  decimals_in: [Int!]
  decimals_lt: Int
  decimals_lte: Int
  decimals_not: Int
  decimals_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryArbitrum_BalancerPoolSnapshot_filter]
  pool: treasuryArbitrum_Bytes
  poolToken: treasuryArbitrum_Bytes
  poolToken_contains: treasuryArbitrum_Bytes
  poolToken_gt: treasuryArbitrum_Bytes
  poolToken_gte: treasuryArbitrum_Bytes
  poolToken_in: [treasuryArbitrum_Bytes!]
  poolToken_lt: treasuryArbitrum_Bytes
  poolToken_lte: treasuryArbitrum_Bytes
  poolToken_not: treasuryArbitrum_Bytes
  poolToken_not_contains: treasuryArbitrum_Bytes
  poolToken_not_in: [treasuryArbitrum_Bytes!]
  pool_contains: treasuryArbitrum_Bytes
  pool_gt: treasuryArbitrum_Bytes
  pool_gte: treasuryArbitrum_Bytes
  pool_in: [treasuryArbitrum_Bytes!]
  pool_lt: treasuryArbitrum_Bytes
  pool_lte: treasuryArbitrum_Bytes
  pool_not: treasuryArbitrum_Bytes
  pool_not_contains: treasuryArbitrum_Bytes
  pool_not_in: [treasuryArbitrum_Bytes!]
  tokens: [treasuryArbitrum_Bytes!]
  tokens_contains: [treasuryArbitrum_Bytes!]
  tokens_contains_nocase: [treasuryArbitrum_Bytes!]
  tokens_not: [treasuryArbitrum_Bytes!]
  tokens_not_contains: [treasuryArbitrum_Bytes!]
  tokens_not_contains_nocase: [treasuryArbitrum_Bytes!]
  totalSupply: treasuryArbitrum_BigDecimal
  totalSupply_gt: treasuryArbitrum_BigDecimal
  totalSupply_gte: treasuryArbitrum_BigDecimal
  totalSupply_in: [treasuryArbitrum_BigDecimal!]
  totalSupply_lt: treasuryArbitrum_BigDecimal
  totalSupply_lte: treasuryArbitrum_BigDecimal
  totalSupply_not: treasuryArbitrum_BigDecimal
  totalSupply_not_in: [treasuryArbitrum_BigDecimal!]
  weights: [treasuryArbitrum_BigDecimal!]
  weights_contains: [treasuryArbitrum_BigDecimal!]
  weights_contains_nocase: [treasuryArbitrum_BigDecimal!]
  weights_not: [treasuryArbitrum_BigDecimal!]
  weights_not_contains: [treasuryArbitrum_BigDecimal!]
  weights_not_contains_nocase: [treasuryArbitrum_BigDecimal!]
}

enum treasuryArbitrum_BalancerPoolSnapshot_orderBy {
  balances
  block
  decimals
  id
  pool
  poolToken
  tokens
  totalSupply
  weights
}

scalar treasuryArbitrum_BigDecimal

scalar BigInt

input treasuryArbitrum_BlockChangedFilter {
  number_gte: Int!
}

input treasuryArbitrum_Block_height {
  hash: treasuryArbitrum_Bytes
  number: Int
  number_gte: Int
}

type treasuryArbitrum_BondDiscount {
  dai_discount: treasuryArbitrum_BigDecimal!
  eth_discount: treasuryArbitrum_BigDecimal!
  frax_discount: treasuryArbitrum_BigDecimal!
  id: ID!
  lusd_discount: treasuryArbitrum_BigDecimal!
  ohmdai_discount: treasuryArbitrum_BigDecimal!
  ohmfrax_discount: treasuryArbitrum_BigDecimal!
  ohmlusd_discount: treasuryArbitrum_BigDecimal!
  timestamp: BigInt!
  _join: Query!
}

input treasuryArbitrum_BondDiscount_filter {
  """Filter for the block changed event."""
  _change_block: treasuryArbitrum_BlockChangedFilter
  and: [treasuryArbitrum_BondDiscount_filter]
  dai_discount: treasuryArbitrum_BigDecimal
  dai_discount_gt: treasuryArbitrum_BigDecimal
  dai_discount_gte: treasuryArbitrum_BigDecimal
  dai_discount_in: [treasuryArbitrum_BigDecimal!]
  dai_discount_lt: treasuryArbitrum_BigDecimal
  dai_discount_lte: treasuryArbitrum_BigDecimal
  dai_discount_not: treasuryArbitrum_BigDecimal
  dai_discount_not_in: [treasuryArbitrum_BigDecimal!]
  eth_discount: treasuryArbitrum_BigDecimal
  eth_discount_gt: treasuryArbitrum_BigDecimal
  eth_discount_gte: treasuryArbitrum_BigDecimal
  eth_discount_in: [treasuryArbitrum_BigDecimal!]
  eth_discount_lt: treasuryArbitrum_BigDecimal
  eth_discount_lte: treasuryArbitrum_BigDecimal
  eth_discount_not: treasuryArbitrum_BigDecimal
  eth_discount_not_in: [treasuryArbitrum_BigDecimal!]
  frax_discount: treasuryArbitrum_BigDecimal
  frax_discount_gt: treasuryArbitrum_BigDecimal
  frax_discount_gte: treasuryArbitrum_BigDecimal
  frax_discount_in: [treasuryArbitrum_BigDecimal!]
  frax_discount_lt: treasuryArbitrum_BigDecimal
  frax_discount_lte: treasuryArbitrum_BigDecimal
  frax_discount_not: treasuryArbitrum_BigDecimal
  frax_discount_not_in: [treasuryArbitrum_BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lusd_discount: treasuryArbitrum_BigDecimal
  lusd_discount_gt: treasuryArbitrum_BigDecimal
  lusd_discount_gte: treasuryArbitrum_BigDecimal
  lusd_discount_in: [treasuryArbitrum_BigDecimal!]
  lusd_discount_lt: treasuryArbitrum_BigDecimal
  lusd_discount_lte: treasuryArbitrum_BigDecimal
  lusd_discount_not: treasuryArbitrum_BigDecimal
  lusd_discount_not_in: [treasuryArbitrum_BigDecimal!]
  ohmdai_discount: treasuryArbitrum_BigDecimal
  ohmdai_discount_gt: treasuryArbitrum_BigDecimal
  ohmdai_discount_gte: treasuryArbitrum_BigDecimal
  ohmdai_discount_in: [treasuryArbitrum_BigDecimal!]
  ohmdai_discount_lt: treasuryArbitrum_BigDecimal
  ohmdai_discount_lte: treasuryArbitrum_BigDecimal
  ohmdai_discount_not: treasuryArbitrum_BigDecimal
  ohmdai_discount_not_in: [treasuryArbitrum_BigDecimal!]
  ohmfrax_discount: treasuryArbitrum_BigDecimal
  ohmfrax_discount_gt: treasuryArbitrum_BigDecimal
  ohmfrax_discount_gte: treasuryArbitrum_BigDecimal
  ohmfrax_discount_in: [treasuryArbitrum_BigDecimal!]
  ohmfrax_discount_lt: treasuryArbitrum_BigDecimal
  ohmfrax_discount_lte: treasuryArbitrum_BigDecimal
  ohmfrax_discount_not: treasuryArbitrum_BigDecimal
  ohmfrax_discount_not_in: [treasuryArbitrum_BigDecimal!]
  ohmlusd_discount: treasuryArbitrum_BigDecimal
  ohmlusd_discount_gt: treasuryArbitrum_BigDecimal
  ohmlusd_discount_gte: treasuryArbitrum_BigDecimal
  ohmlusd_discount_in: [treasuryArbitrum_BigDecimal!]
  ohmlusd_discount_lt: treasuryArbitrum_BigDecimal
  ohmlusd_discount_lte: treasuryArbitrum_BigDecimal
  ohmlusd_discount_not: treasuryArbitrum_BigDecimal
  ohmlusd_discount_not_in: [treasuryArbitrum_BigDecimal!]
  or: [treasuryArbitrum_BondDiscount_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
}

enum treasuryArbitrum_BondDiscount_orderBy {
  dai_discount
  eth_discount
  frax_discount
  id
  lusd_discount
  ohmdai_discount
  ohmfrax_discount
  ohmlusd_discount
  timestamp
}

scalar treasuryArbitrum_Bytes

type treasuryArbitrum_ConvexRewardPoolSnapshot {
  address: treasuryArbitrum_Bytes!
  block: BigInt!
  id: ID!
  stakingToken: treasuryArbitrum_Bytes!
  _join: Query!
}

input treasuryArbitrum_ConvexRewardPoolSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryArbitrum_BlockChangedFilter
  address: treasuryArbitrum_Bytes
  address_contains: treasuryArbitrum_Bytes
  address_gt: treasuryArbitrum_Bytes
  address_gte: treasuryArbitrum_Bytes
  address_in: [treasuryArbitrum_Bytes!]
  address_lt: treasuryArbitrum_Bytes
  address_lte: treasuryArbitrum_Bytes
  address_not: treasuryArbitrum_Bytes
  address_not_contains: treasuryArbitrum_Bytes
  address_not_in: [treasuryArbitrum_Bytes!]
  and: [treasuryArbitrum_ConvexRewardPoolSnapshot_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryArbitrum_ConvexRewardPoolSnapshot_filter]
  stakingToken: treasuryArbitrum_Bytes
  stakingToken_contains: treasuryArbitrum_Bytes
  stakingToken_gt: treasuryArbitrum_Bytes
  stakingToken_gte: treasuryArbitrum_Bytes
  stakingToken_in: [treasuryArbitrum_Bytes!]
  stakingToken_lt: treasuryArbitrum_Bytes
  stakingToken_lte: treasuryArbitrum_Bytes
  stakingToken_not: treasuryArbitrum_Bytes
  stakingToken_not_contains: treasuryArbitrum_Bytes
  stakingToken_not_in: [treasuryArbitrum_Bytes!]
}

enum treasuryArbitrum_ConvexRewardPoolSnapshot_orderBy {
  address
  block
  id
  stakingToken
}

type treasuryArbitrum_DailyBond {
  amount: treasuryArbitrum_BigDecimal!
  id: ID!
  timestamp: BigInt!
  token: treasuryArbitrum_Token!
  value: treasuryArbitrum_BigDecimal!
  _join: Query!
}

input treasuryArbitrum_DailyBond_filter {
  """Filter for the block changed event."""
  _change_block: treasuryArbitrum_BlockChangedFilter
  amount: treasuryArbitrum_BigDecimal
  amount_gt: treasuryArbitrum_BigDecimal
  amount_gte: treasuryArbitrum_BigDecimal
  amount_in: [treasuryArbitrum_BigDecimal!]
  amount_lt: treasuryArbitrum_BigDecimal
  amount_lte: treasuryArbitrum_BigDecimal
  amount_not: treasuryArbitrum_BigDecimal
  amount_not_in: [treasuryArbitrum_BigDecimal!]
  and: [treasuryArbitrum_DailyBond_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryArbitrum_DailyBond_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  token: String
  token_: treasuryArbitrum_Token_filter
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  value: treasuryArbitrum_BigDecimal
  value_gt: treasuryArbitrum_BigDecimal
  value_gte: treasuryArbitrum_BigDecimal
  value_in: [treasuryArbitrum_BigDecimal!]
  value_lt: treasuryArbitrum_BigDecimal
  value_lte: treasuryArbitrum_BigDecimal
  value_not: treasuryArbitrum_BigDecimal
  value_not_in: [treasuryArbitrum_BigDecimal!]
}

enum treasuryArbitrum_DailyBond_orderBy {
  amount
  id
  timestamp
  token
  token__id
  value
}

type treasuryArbitrum_DailyStakingReward {
  amount: treasuryArbitrum_BigDecimal!
  id: ID!
  timestamp: BigInt!
  value: treasuryArbitrum_BigDecimal!
  _join: Query!
}

input treasuryArbitrum_DailyStakingReward_filter {
  """Filter for the block changed event."""
  _change_block: treasuryArbitrum_BlockChangedFilter
  amount: treasuryArbitrum_BigDecimal
  amount_gt: treasuryArbitrum_BigDecimal
  amount_gte: treasuryArbitrum_BigDecimal
  amount_in: [treasuryArbitrum_BigDecimal!]
  amount_lt: treasuryArbitrum_BigDecimal
  amount_lte: treasuryArbitrum_BigDecimal
  amount_not: treasuryArbitrum_BigDecimal
  amount_not_in: [treasuryArbitrum_BigDecimal!]
  and: [treasuryArbitrum_DailyStakingReward_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryArbitrum_DailyStakingReward_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  value: treasuryArbitrum_BigDecimal
  value_gt: treasuryArbitrum_BigDecimal
  value_gte: treasuryArbitrum_BigDecimal
  value_in: [treasuryArbitrum_BigDecimal!]
  value_lt: treasuryArbitrum_BigDecimal
  value_lte: treasuryArbitrum_BigDecimal
  value_not: treasuryArbitrum_BigDecimal
  value_not_in: [treasuryArbitrum_BigDecimal!]
}

enum treasuryArbitrum_DailyStakingReward_orderBy {
  amount
  id
  timestamp
  value
}

type treasuryArbitrum_ERC20TokenSnapshot {
  address: treasuryArbitrum_Bytes!
  decimals: Int!
  id: ID!
  totalSupply: treasuryArbitrum_BigDecimal
  _join: Query!
}

input treasuryArbitrum_ERC20TokenSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryArbitrum_BlockChangedFilter
  address: treasuryArbitrum_Bytes
  address_contains: treasuryArbitrum_Bytes
  address_gt: treasuryArbitrum_Bytes
  address_gte: treasuryArbitrum_Bytes
  address_in: [treasuryArbitrum_Bytes!]
  address_lt: treasuryArbitrum_Bytes
  address_lte: treasuryArbitrum_Bytes
  address_not: treasuryArbitrum_Bytes
  address_not_contains: treasuryArbitrum_Bytes
  address_not_in: [treasuryArbitrum_Bytes!]
  and: [treasuryArbitrum_ERC20TokenSnapshot_filter]
  decimals: Int
  decimals_gt: Int
  decimals_gte: Int
  decimals_in: [Int!]
  decimals_lt: Int
  decimals_lte: Int
  decimals_not: Int
  decimals_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryArbitrum_ERC20TokenSnapshot_filter]
  totalSupply: treasuryArbitrum_BigDecimal
  totalSupply_gt: treasuryArbitrum_BigDecimal
  totalSupply_gte: treasuryArbitrum_BigDecimal
  totalSupply_in: [treasuryArbitrum_BigDecimal!]
  totalSupply_lt: treasuryArbitrum_BigDecimal
  totalSupply_lte: treasuryArbitrum_BigDecimal
  totalSupply_not: treasuryArbitrum_BigDecimal
  totalSupply_not_in: [treasuryArbitrum_BigDecimal!]
}

enum treasuryArbitrum_ERC20TokenSnapshot_orderBy {
  address
  decimals
  id
  totalSupply
}

type treasuryArbitrum_GnosisAuction {
  auctionCloseTimestamp: BigInt
  auctionOpenTimestamp: BigInt!
  bidQuantity: treasuryArbitrum_BigDecimal
  id: ID!
  payoutCapacity: treasuryArbitrum_BigDecimal!
  termSeconds: BigInt!
  _join: Query!
}

type treasuryArbitrum_GnosisAuctionRoot {
  id: ID!
  markets: [BigInt!]!
  _join: Query!
}

input treasuryArbitrum_GnosisAuctionRoot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryArbitrum_BlockChangedFilter
  and: [treasuryArbitrum_GnosisAuctionRoot_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  markets: [BigInt!]
  markets_contains: [BigInt!]
  markets_contains_nocase: [BigInt!]
  markets_not: [BigInt!]
  markets_not_contains: [BigInt!]
  markets_not_contains_nocase: [BigInt!]
  or: [treasuryArbitrum_GnosisAuctionRoot_filter]
}

enum treasuryArbitrum_GnosisAuctionRoot_orderBy {
  id
  markets
}

input treasuryArbitrum_GnosisAuction_filter {
  """Filter for the block changed event."""
  _change_block: treasuryArbitrum_BlockChangedFilter
  and: [treasuryArbitrum_GnosisAuction_filter]
  auctionCloseTimestamp: BigInt
  auctionCloseTimestamp_gt: BigInt
  auctionCloseTimestamp_gte: BigInt
  auctionCloseTimestamp_in: [BigInt!]
  auctionCloseTimestamp_lt: BigInt
  auctionCloseTimestamp_lte: BigInt
  auctionCloseTimestamp_not: BigInt
  auctionCloseTimestamp_not_in: [BigInt!]
  auctionOpenTimestamp: BigInt
  auctionOpenTimestamp_gt: BigInt
  auctionOpenTimestamp_gte: BigInt
  auctionOpenTimestamp_in: [BigInt!]
  auctionOpenTimestamp_lt: BigInt
  auctionOpenTimestamp_lte: BigInt
  auctionOpenTimestamp_not: BigInt
  auctionOpenTimestamp_not_in: [BigInt!]
  bidQuantity: treasuryArbitrum_BigDecimal
  bidQuantity_gt: treasuryArbitrum_BigDecimal
  bidQuantity_gte: treasuryArbitrum_BigDecimal
  bidQuantity_in: [treasuryArbitrum_BigDecimal!]
  bidQuantity_lt: treasuryArbitrum_BigDecimal
  bidQuantity_lte: treasuryArbitrum_BigDecimal
  bidQuantity_not: treasuryArbitrum_BigDecimal
  bidQuantity_not_in: [treasuryArbitrum_BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryArbitrum_GnosisAuction_filter]
  payoutCapacity: treasuryArbitrum_BigDecimal
  payoutCapacity_gt: treasuryArbitrum_BigDecimal
  payoutCapacity_gte: treasuryArbitrum_BigDecimal
  payoutCapacity_in: [treasuryArbitrum_BigDecimal!]
  payoutCapacity_lt: treasuryArbitrum_BigDecimal
  payoutCapacity_lte: treasuryArbitrum_BigDecimal
  payoutCapacity_not: treasuryArbitrum_BigDecimal
  payoutCapacity_not_in: [treasuryArbitrum_BigDecimal!]
  termSeconds: BigInt
  termSeconds_gt: BigInt
  termSeconds_gte: BigInt
  termSeconds_in: [BigInt!]
  termSeconds_lt: BigInt
  termSeconds_lte: BigInt
  termSeconds_not: BigInt
  termSeconds_not_in: [BigInt!]
}

enum treasuryArbitrum_GnosisAuction_orderBy {
  auctionCloseTimestamp
  auctionOpenTimestamp
  bidQuantity
  id
  payoutCapacity
  termSeconds
}

"""Defines the order direction, either ascending or descending"""
enum treasuryArbitrum_OrderDirection {
  asc
  desc
}

type treasuryArbitrum_PoolSnapshot {
  balances: [treasuryArbitrum_BigDecimal!]!
  block: BigInt!
  decimals: Int!
  id: ID!
  pool: treasuryArbitrum_Bytes!
  poolToken: treasuryArbitrum_Bytes
  tokens: [treasuryArbitrum_Bytes!]!
  totalSupply: treasuryArbitrum_BigDecimal!
  weights: [treasuryArbitrum_BigDecimal!]
  _join: Query!
}

input treasuryArbitrum_PoolSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryArbitrum_BlockChangedFilter
  and: [treasuryArbitrum_PoolSnapshot_filter]
  balances: [treasuryArbitrum_BigDecimal!]
  balances_contains: [treasuryArbitrum_BigDecimal!]
  balances_contains_nocase: [treasuryArbitrum_BigDecimal!]
  balances_not: [treasuryArbitrum_BigDecimal!]
  balances_not_contains: [treasuryArbitrum_BigDecimal!]
  balances_not_contains_nocase: [treasuryArbitrum_BigDecimal!]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  decimals: Int
  decimals_gt: Int
  decimals_gte: Int
  decimals_in: [Int!]
  decimals_lt: Int
  decimals_lte: Int
  decimals_not: Int
  decimals_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryArbitrum_PoolSnapshot_filter]
  pool: treasuryArbitrum_Bytes
  poolToken: treasuryArbitrum_Bytes
  poolToken_contains: treasuryArbitrum_Bytes
  poolToken_gt: treasuryArbitrum_Bytes
  poolToken_gte: treasuryArbitrum_Bytes
  poolToken_in: [treasuryArbitrum_Bytes!]
  poolToken_lt: treasuryArbitrum_Bytes
  poolToken_lte: treasuryArbitrum_Bytes
  poolToken_not: treasuryArbitrum_Bytes
  poolToken_not_contains: treasuryArbitrum_Bytes
  poolToken_not_in: [treasuryArbitrum_Bytes!]
  pool_contains: treasuryArbitrum_Bytes
  pool_gt: treasuryArbitrum_Bytes
  pool_gte: treasuryArbitrum_Bytes
  pool_in: [treasuryArbitrum_Bytes!]
  pool_lt: treasuryArbitrum_Bytes
  pool_lte: treasuryArbitrum_Bytes
  pool_not: treasuryArbitrum_Bytes
  pool_not_contains: treasuryArbitrum_Bytes
  pool_not_in: [treasuryArbitrum_Bytes!]
  tokens: [treasuryArbitrum_Bytes!]
  tokens_contains: [treasuryArbitrum_Bytes!]
  tokens_contains_nocase: [treasuryArbitrum_Bytes!]
  tokens_not: [treasuryArbitrum_Bytes!]
  tokens_not_contains: [treasuryArbitrum_Bytes!]
  tokens_not_contains_nocase: [treasuryArbitrum_Bytes!]
  totalSupply: treasuryArbitrum_BigDecimal
  totalSupply_gt: treasuryArbitrum_BigDecimal
  totalSupply_gte: treasuryArbitrum_BigDecimal
  totalSupply_in: [treasuryArbitrum_BigDecimal!]
  totalSupply_lt: treasuryArbitrum_BigDecimal
  totalSupply_lte: treasuryArbitrum_BigDecimal
  totalSupply_not: treasuryArbitrum_BigDecimal
  totalSupply_not_in: [treasuryArbitrum_BigDecimal!]
  weights: [treasuryArbitrum_BigDecimal!]
  weights_contains: [treasuryArbitrum_BigDecimal!]
  weights_contains_nocase: [treasuryArbitrum_BigDecimal!]
  weights_not: [treasuryArbitrum_BigDecimal!]
  weights_not_contains: [treasuryArbitrum_BigDecimal!]
  weights_not_contains_nocase: [treasuryArbitrum_BigDecimal!]
}

enum treasuryArbitrum_PoolSnapshot_orderBy {
  balances
  block
  decimals
  id
  pool
  poolToken
  tokens
  totalSupply
  weights
}

type treasuryArbitrum_PriceSnapshot {
  block: BigInt!
  date: String!
  id: ID!
  priceGOhm: treasuryArbitrum_BigDecimal!
  priceOhm: treasuryArbitrum_BigDecimal!
  timestamp: BigInt!
  _join: Query!
}

input treasuryArbitrum_PriceSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryArbitrum_BlockChangedFilter
  and: [treasuryArbitrum_PriceSnapshot_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  date: String
  date_contains: String
  date_contains_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_gt: String
  date_gte: String
  date_in: [String!]
  date_lt: String
  date_lte: String
  date_not: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  date_not_in: [String!]
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryArbitrum_PriceSnapshot_filter]
  priceGOhm: treasuryArbitrum_BigDecimal
  priceGOhm_gt: treasuryArbitrum_BigDecimal
  priceGOhm_gte: treasuryArbitrum_BigDecimal
  priceGOhm_in: [treasuryArbitrum_BigDecimal!]
  priceGOhm_lt: treasuryArbitrum_BigDecimal
  priceGOhm_lte: treasuryArbitrum_BigDecimal
  priceGOhm_not: treasuryArbitrum_BigDecimal
  priceGOhm_not_in: [treasuryArbitrum_BigDecimal!]
  priceOhm: treasuryArbitrum_BigDecimal
  priceOhm_gt: treasuryArbitrum_BigDecimal
  priceOhm_gte: treasuryArbitrum_BigDecimal
  priceOhm_in: [treasuryArbitrum_BigDecimal!]
  priceOhm_lt: treasuryArbitrum_BigDecimal
  priceOhm_lte: treasuryArbitrum_BigDecimal
  priceOhm_not: treasuryArbitrum_BigDecimal
  priceOhm_not_in: [treasuryArbitrum_BigDecimal!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
}

enum treasuryArbitrum_PriceSnapshot_orderBy {
  block
  date
  id
  priceGOhm
  priceOhm
  timestamp
}

type treasuryArbitrum_ProtocolMetric {
  block: BigInt!
  currentAPY: treasuryArbitrum_BigDecimal!
  currentIndex: treasuryArbitrum_BigDecimal!
  date: String!
  gOhmPrice: treasuryArbitrum_BigDecimal!
  gOhmSyntheticSupply: treasuryArbitrum_BigDecimal
  gOhmTotalSupply: treasuryArbitrum_BigDecimal!
  id: ID!
  marketCap: treasuryArbitrum_BigDecimal
  nextDistributedOhm: treasuryArbitrum_BigDecimal!
  nextEpochRebase: treasuryArbitrum_BigDecimal!
  ohmCirculatingSupply: treasuryArbitrum_BigDecimal
  ohmFloatingSupply: treasuryArbitrum_BigDecimal
  ohmPrice: treasuryArbitrum_BigDecimal!
  ohmTotalSupply: treasuryArbitrum_BigDecimal!
  sOhmCirculatingSupply: treasuryArbitrum_BigDecimal!
  timestamp: BigInt!
  totalValueLocked: treasuryArbitrum_BigDecimal!
  treasuryLiquidBacking: treasuryArbitrum_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic: treasuryArbitrum_BigDecimal
  treasuryLiquidBackingPerOhmFloating: treasuryArbitrum_BigDecimal
  treasuryMarketValue: treasuryArbitrum_BigDecimal
  _join: Query!
}

input treasuryArbitrum_ProtocolMetric_filter {
  """Filter for the block changed event."""
  _change_block: treasuryArbitrum_BlockChangedFilter
  and: [treasuryArbitrum_ProtocolMetric_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  currentAPY: treasuryArbitrum_BigDecimal
  currentAPY_gt: treasuryArbitrum_BigDecimal
  currentAPY_gte: treasuryArbitrum_BigDecimal
  currentAPY_in: [treasuryArbitrum_BigDecimal!]
  currentAPY_lt: treasuryArbitrum_BigDecimal
  currentAPY_lte: treasuryArbitrum_BigDecimal
  currentAPY_not: treasuryArbitrum_BigDecimal
  currentAPY_not_in: [treasuryArbitrum_BigDecimal!]
  currentIndex: treasuryArbitrum_BigDecimal
  currentIndex_gt: treasuryArbitrum_BigDecimal
  currentIndex_gte: treasuryArbitrum_BigDecimal
  currentIndex_in: [treasuryArbitrum_BigDecimal!]
  currentIndex_lt: treasuryArbitrum_BigDecimal
  currentIndex_lte: treasuryArbitrum_BigDecimal
  currentIndex_not: treasuryArbitrum_BigDecimal
  currentIndex_not_in: [treasuryArbitrum_BigDecimal!]
  date: String
  date_contains: String
  date_contains_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_gt: String
  date_gte: String
  date_in: [String!]
  date_lt: String
  date_lte: String
  date_not: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  date_not_in: [String!]
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  gOhmPrice: treasuryArbitrum_BigDecimal
  gOhmPrice_gt: treasuryArbitrum_BigDecimal
  gOhmPrice_gte: treasuryArbitrum_BigDecimal
  gOhmPrice_in: [treasuryArbitrum_BigDecimal!]
  gOhmPrice_lt: treasuryArbitrum_BigDecimal
  gOhmPrice_lte: treasuryArbitrum_BigDecimal
  gOhmPrice_not: treasuryArbitrum_BigDecimal
  gOhmPrice_not_in: [treasuryArbitrum_BigDecimal!]
  gOhmSyntheticSupply: treasuryArbitrum_BigDecimal
  gOhmSyntheticSupply_gt: treasuryArbitrum_BigDecimal
  gOhmSyntheticSupply_gte: treasuryArbitrum_BigDecimal
  gOhmSyntheticSupply_in: [treasuryArbitrum_BigDecimal!]
  gOhmSyntheticSupply_lt: treasuryArbitrum_BigDecimal
  gOhmSyntheticSupply_lte: treasuryArbitrum_BigDecimal
  gOhmSyntheticSupply_not: treasuryArbitrum_BigDecimal
  gOhmSyntheticSupply_not_in: [treasuryArbitrum_BigDecimal!]
  gOhmTotalSupply: treasuryArbitrum_BigDecimal
  gOhmTotalSupply_gt: treasuryArbitrum_BigDecimal
  gOhmTotalSupply_gte: treasuryArbitrum_BigDecimal
  gOhmTotalSupply_in: [treasuryArbitrum_BigDecimal!]
  gOhmTotalSupply_lt: treasuryArbitrum_BigDecimal
  gOhmTotalSupply_lte: treasuryArbitrum_BigDecimal
  gOhmTotalSupply_not: treasuryArbitrum_BigDecimal
  gOhmTotalSupply_not_in: [treasuryArbitrum_BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  marketCap: treasuryArbitrum_BigDecimal
  marketCap_gt: treasuryArbitrum_BigDecimal
  marketCap_gte: treasuryArbitrum_BigDecimal
  marketCap_in: [treasuryArbitrum_BigDecimal!]
  marketCap_lt: treasuryArbitrum_BigDecimal
  marketCap_lte: treasuryArbitrum_BigDecimal
  marketCap_not: treasuryArbitrum_BigDecimal
  marketCap_not_in: [treasuryArbitrum_BigDecimal!]
  nextDistributedOhm: treasuryArbitrum_BigDecimal
  nextDistributedOhm_gt: treasuryArbitrum_BigDecimal
  nextDistributedOhm_gte: treasuryArbitrum_BigDecimal
  nextDistributedOhm_in: [treasuryArbitrum_BigDecimal!]
  nextDistributedOhm_lt: treasuryArbitrum_BigDecimal
  nextDistributedOhm_lte: treasuryArbitrum_BigDecimal
  nextDistributedOhm_not: treasuryArbitrum_BigDecimal
  nextDistributedOhm_not_in: [treasuryArbitrum_BigDecimal!]
  nextEpochRebase: treasuryArbitrum_BigDecimal
  nextEpochRebase_gt: treasuryArbitrum_BigDecimal
  nextEpochRebase_gte: treasuryArbitrum_BigDecimal
  nextEpochRebase_in: [treasuryArbitrum_BigDecimal!]
  nextEpochRebase_lt: treasuryArbitrum_BigDecimal
  nextEpochRebase_lte: treasuryArbitrum_BigDecimal
  nextEpochRebase_not: treasuryArbitrum_BigDecimal
  nextEpochRebase_not_in: [treasuryArbitrum_BigDecimal!]
  ohmCirculatingSupply: treasuryArbitrum_BigDecimal
  ohmCirculatingSupply_gt: treasuryArbitrum_BigDecimal
  ohmCirculatingSupply_gte: treasuryArbitrum_BigDecimal
  ohmCirculatingSupply_in: [treasuryArbitrum_BigDecimal!]
  ohmCirculatingSupply_lt: treasuryArbitrum_BigDecimal
  ohmCirculatingSupply_lte: treasuryArbitrum_BigDecimal
  ohmCirculatingSupply_not: treasuryArbitrum_BigDecimal
  ohmCirculatingSupply_not_in: [treasuryArbitrum_BigDecimal!]
  ohmFloatingSupply: treasuryArbitrum_BigDecimal
  ohmFloatingSupply_gt: treasuryArbitrum_BigDecimal
  ohmFloatingSupply_gte: treasuryArbitrum_BigDecimal
  ohmFloatingSupply_in: [treasuryArbitrum_BigDecimal!]
  ohmFloatingSupply_lt: treasuryArbitrum_BigDecimal
  ohmFloatingSupply_lte: treasuryArbitrum_BigDecimal
  ohmFloatingSupply_not: treasuryArbitrum_BigDecimal
  ohmFloatingSupply_not_in: [treasuryArbitrum_BigDecimal!]
  ohmPrice: treasuryArbitrum_BigDecimal
  ohmPrice_gt: treasuryArbitrum_BigDecimal
  ohmPrice_gte: treasuryArbitrum_BigDecimal
  ohmPrice_in: [treasuryArbitrum_BigDecimal!]
  ohmPrice_lt: treasuryArbitrum_BigDecimal
  ohmPrice_lte: treasuryArbitrum_BigDecimal
  ohmPrice_not: treasuryArbitrum_BigDecimal
  ohmPrice_not_in: [treasuryArbitrum_BigDecimal!]
  ohmTotalSupply: treasuryArbitrum_BigDecimal
  ohmTotalSupply_gt: treasuryArbitrum_BigDecimal
  ohmTotalSupply_gte: treasuryArbitrum_BigDecimal
  ohmTotalSupply_in: [treasuryArbitrum_BigDecimal!]
  ohmTotalSupply_lt: treasuryArbitrum_BigDecimal
  ohmTotalSupply_lte: treasuryArbitrum_BigDecimal
  ohmTotalSupply_not: treasuryArbitrum_BigDecimal
  ohmTotalSupply_not_in: [treasuryArbitrum_BigDecimal!]
  or: [treasuryArbitrum_ProtocolMetric_filter]
  sOhmCirculatingSupply: treasuryArbitrum_BigDecimal
  sOhmCirculatingSupply_gt: treasuryArbitrum_BigDecimal
  sOhmCirculatingSupply_gte: treasuryArbitrum_BigDecimal
  sOhmCirculatingSupply_in: [treasuryArbitrum_BigDecimal!]
  sOhmCirculatingSupply_lt: treasuryArbitrum_BigDecimal
  sOhmCirculatingSupply_lte: treasuryArbitrum_BigDecimal
  sOhmCirculatingSupply_not: treasuryArbitrum_BigDecimal
  sOhmCirculatingSupply_not_in: [treasuryArbitrum_BigDecimal!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  totalValueLocked: treasuryArbitrum_BigDecimal
  totalValueLocked_gt: treasuryArbitrum_BigDecimal
  totalValueLocked_gte: treasuryArbitrum_BigDecimal
  totalValueLocked_in: [treasuryArbitrum_BigDecimal!]
  totalValueLocked_lt: treasuryArbitrum_BigDecimal
  totalValueLocked_lte: treasuryArbitrum_BigDecimal
  totalValueLocked_not: treasuryArbitrum_BigDecimal
  totalValueLocked_not_in: [treasuryArbitrum_BigDecimal!]
  treasuryLiquidBacking: treasuryArbitrum_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic: treasuryArbitrum_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_gt: treasuryArbitrum_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_gte: treasuryArbitrum_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_in: [treasuryArbitrum_BigDecimal!]
  treasuryLiquidBackingPerGOhmSynthetic_lt: treasuryArbitrum_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_lte: treasuryArbitrum_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_not: treasuryArbitrum_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_not_in: [treasuryArbitrum_BigDecimal!]
  treasuryLiquidBackingPerOhmFloating: treasuryArbitrum_BigDecimal
  treasuryLiquidBackingPerOhmFloating_gt: treasuryArbitrum_BigDecimal
  treasuryLiquidBackingPerOhmFloating_gte: treasuryArbitrum_BigDecimal
  treasuryLiquidBackingPerOhmFloating_in: [treasuryArbitrum_BigDecimal!]
  treasuryLiquidBackingPerOhmFloating_lt: treasuryArbitrum_BigDecimal
  treasuryLiquidBackingPerOhmFloating_lte: treasuryArbitrum_BigDecimal
  treasuryLiquidBackingPerOhmFloating_not: treasuryArbitrum_BigDecimal
  treasuryLiquidBackingPerOhmFloating_not_in: [treasuryArbitrum_BigDecimal!]
  treasuryLiquidBacking_gt: treasuryArbitrum_BigDecimal
  treasuryLiquidBacking_gte: treasuryArbitrum_BigDecimal
  treasuryLiquidBacking_in: [treasuryArbitrum_BigDecimal!]
  treasuryLiquidBacking_lt: treasuryArbitrum_BigDecimal
  treasuryLiquidBacking_lte: treasuryArbitrum_BigDecimal
  treasuryLiquidBacking_not: treasuryArbitrum_BigDecimal
  treasuryLiquidBacking_not_in: [treasuryArbitrum_BigDecimal!]
  treasuryMarketValue: treasuryArbitrum_BigDecimal
  treasuryMarketValue_gt: treasuryArbitrum_BigDecimal
  treasuryMarketValue_gte: treasuryArbitrum_BigDecimal
  treasuryMarketValue_in: [treasuryArbitrum_BigDecimal!]
  treasuryMarketValue_lt: treasuryArbitrum_BigDecimal
  treasuryMarketValue_lte: treasuryArbitrum_BigDecimal
  treasuryMarketValue_not: treasuryArbitrum_BigDecimal
  treasuryMarketValue_not_in: [treasuryArbitrum_BigDecimal!]
}

enum treasuryArbitrum_ProtocolMetric_orderBy {
  block
  currentAPY
  currentIndex
  date
  gOhmPrice
  gOhmSyntheticSupply
  gOhmTotalSupply
  id
  marketCap
  nextDistributedOhm
  nextEpochRebase
  ohmCirculatingSupply
  ohmFloatingSupply
  ohmPrice
  ohmTotalSupply
  sOhmCirculatingSupply
  timestamp
  totalValueLocked
  treasuryLiquidBacking
  treasuryLiquidBackingPerGOhmSynthetic
  treasuryLiquidBackingPerOhmFloating
  treasuryMarketValue
}

type Query {
  """Access to subgraph metadata"""
  treasuryArbitrum__meta(block: treasuryArbitrum_Block_height): treasuryArbitrum__Meta_
  treasuryArbitrum_balancerPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_BalancerPoolSnapshot
  treasuryArbitrum_balancerPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_BalancerPoolSnapshot_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_BalancerPoolSnapshot_filter
  ): [treasuryArbitrum_BalancerPoolSnapshot!]!
  treasuryArbitrum_bondDiscount(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_BondDiscount
  treasuryArbitrum_bondDiscounts(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_BondDiscount_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_BondDiscount_filter
  ): [treasuryArbitrum_BondDiscount!]!
  treasuryArbitrum_convexRewardPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_ConvexRewardPoolSnapshot
  treasuryArbitrum_convexRewardPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_ConvexRewardPoolSnapshot_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_ConvexRewardPoolSnapshot_filter
  ): [treasuryArbitrum_ConvexRewardPoolSnapshot!]!
  treasuryArbitrum_dailyBond(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_DailyBond
  treasuryArbitrum_dailyBonds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_DailyBond_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_DailyBond_filter
  ): [treasuryArbitrum_DailyBond!]!
  treasuryArbitrum_dailyStakingReward(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_DailyStakingReward
  treasuryArbitrum_dailyStakingRewards(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_DailyStakingReward_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_DailyStakingReward_filter
  ): [treasuryArbitrum_DailyStakingReward!]!
  treasuryArbitrum_erc20TokenSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_ERC20TokenSnapshot
  treasuryArbitrum_erc20TokenSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_ERC20TokenSnapshot_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_ERC20TokenSnapshot_filter
  ): [treasuryArbitrum_ERC20TokenSnapshot!]!
  treasuryArbitrum_gnosisAuction(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_GnosisAuction
  treasuryArbitrum_gnosisAuctionRoot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_GnosisAuctionRoot
  treasuryArbitrum_gnosisAuctionRoots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_GnosisAuctionRoot_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_GnosisAuctionRoot_filter
  ): [treasuryArbitrum_GnosisAuctionRoot!]!
  treasuryArbitrum_gnosisAuctions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_GnosisAuction_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_GnosisAuction_filter
  ): [treasuryArbitrum_GnosisAuction!]!
  treasuryArbitrum_poolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_PoolSnapshot
  treasuryArbitrum_poolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_PoolSnapshot_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_PoolSnapshot_filter
  ): [treasuryArbitrum_PoolSnapshot!]!
  treasuryArbitrum_priceSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_PriceSnapshot
  treasuryArbitrum_priceSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_PriceSnapshot_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_PriceSnapshot_filter
  ): [treasuryArbitrum_PriceSnapshot!]!
  treasuryArbitrum_protocolMetric(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_ProtocolMetric
  treasuryArbitrum_protocolMetrics(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_ProtocolMetric_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_ProtocolMetric_filter
  ): [treasuryArbitrum_ProtocolMetric!]!
  treasuryArbitrum_rebase(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_Rebase
  treasuryArbitrum_rebases(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_Rebase_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_Rebase_filter
  ): [treasuryArbitrum_Rebase!]!
  treasuryArbitrum_stakingPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_StakingPoolSnapshot
  treasuryArbitrum_stakingPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_StakingPoolSnapshot_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_StakingPoolSnapshot_filter
  ): [treasuryArbitrum_StakingPoolSnapshot!]!
  treasuryArbitrum_token(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_Token
  treasuryArbitrum_tokenPriceSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_TokenPriceSnapshot
  treasuryArbitrum_tokenPriceSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_TokenPriceSnapshot_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_TokenPriceSnapshot_filter
  ): [treasuryArbitrum_TokenPriceSnapshot!]!
  treasuryArbitrum_tokenRecord(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_TokenRecord
  treasuryArbitrum_tokenRecords(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_TokenRecord_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_TokenRecord_filter
  ): [treasuryArbitrum_TokenRecord!]!
  treasuryArbitrum_tokenSupplies(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_TokenSupply_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_TokenSupply_filter
  ): [treasuryArbitrum_TokenSupply!]!
  treasuryArbitrum_tokenSupply(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_TokenSupply
  treasuryArbitrum_tokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_Token_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_Token_filter
  ): [treasuryArbitrum_Token!]!
  """Access to subgraph metadata"""
  treasuryEthereum__meta(block: treasuryEthereum_Block_height): treasuryEthereum__Meta_
  treasuryEthereum_balancerPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_BalancerPoolSnapshot
  treasuryEthereum_balancerPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_BalancerPoolSnapshot_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_BalancerPoolSnapshot_filter
  ): [treasuryEthereum_BalancerPoolSnapshot!]!
  treasuryEthereum_bondDiscount(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_BondDiscount
  treasuryEthereum_bondDiscounts(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_BondDiscount_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_BondDiscount_filter
  ): [treasuryEthereum_BondDiscount!]!
  treasuryEthereum_convexRewardPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_ConvexRewardPoolSnapshot
  treasuryEthereum_convexRewardPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_ConvexRewardPoolSnapshot_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_ConvexRewardPoolSnapshot_filter
  ): [treasuryEthereum_ConvexRewardPoolSnapshot!]!
  treasuryEthereum_dailyBond(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_DailyBond
  treasuryEthereum_dailyBonds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_DailyBond_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_DailyBond_filter
  ): [treasuryEthereum_DailyBond!]!
  treasuryEthereum_dailyStakingReward(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_DailyStakingReward
  treasuryEthereum_dailyStakingRewards(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_DailyStakingReward_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_DailyStakingReward_filter
  ): [treasuryEthereum_DailyStakingReward!]!
  treasuryEthereum_erc20TokenSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_ERC20TokenSnapshot
  treasuryEthereum_erc20TokenSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_ERC20TokenSnapshot_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_ERC20TokenSnapshot_filter
  ): [treasuryEthereum_ERC20TokenSnapshot!]!
  treasuryEthereum_gnosisAuction(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_GnosisAuction
  treasuryEthereum_gnosisAuctionRoot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_GnosisAuctionRoot
  treasuryEthereum_gnosisAuctionRoots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_GnosisAuctionRoot_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_GnosisAuctionRoot_filter
  ): [treasuryEthereum_GnosisAuctionRoot!]!
  treasuryEthereum_gnosisAuctions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_GnosisAuction_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_GnosisAuction_filter
  ): [treasuryEthereum_GnosisAuction!]!
  treasuryEthereum_poolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_PoolSnapshot
  treasuryEthereum_poolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_PoolSnapshot_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_PoolSnapshot_filter
  ): [treasuryEthereum_PoolSnapshot!]!
  treasuryEthereum_priceSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_PriceSnapshot
  treasuryEthereum_priceSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_PriceSnapshot_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_PriceSnapshot_filter
  ): [treasuryEthereum_PriceSnapshot!]!
  treasuryEthereum_protocolMetric(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_ProtocolMetric
  treasuryEthereum_protocolMetrics(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_ProtocolMetric_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_ProtocolMetric_filter
  ): [treasuryEthereum_ProtocolMetric!]!
  treasuryEthereum_rebase(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_Rebase
  treasuryEthereum_rebases(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_Rebase_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_Rebase_filter
  ): [treasuryEthereum_Rebase!]!
  treasuryEthereum_stakingPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_StakingPoolSnapshot
  treasuryEthereum_stakingPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_StakingPoolSnapshot_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_StakingPoolSnapshot_filter
  ): [treasuryEthereum_StakingPoolSnapshot!]!
  treasuryEthereum_token(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_Token
  treasuryEthereum_tokenPriceSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_TokenPriceSnapshot
  treasuryEthereum_tokenPriceSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_TokenPriceSnapshot_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_TokenPriceSnapshot_filter
  ): [treasuryEthereum_TokenPriceSnapshot!]!
  treasuryEthereum_tokenRecord(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_TokenRecord
  treasuryEthereum_tokenRecords(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_TokenRecord_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_TokenRecord_filter
  ): [treasuryEthereum_TokenRecord!]!
  treasuryEthereum_tokenSupplies(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_TokenSupply_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_TokenSupply_filter
  ): [treasuryEthereum_TokenSupply!]!
  treasuryEthereum_tokenSupply(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_TokenSupply
  treasuryEthereum_tokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_Token_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_Token_filter
  ): [treasuryEthereum_Token!]!
  """Access to subgraph metadata"""
  treasuryFantom__meta(block: treasuryFantom_Block_height): treasuryFantom__Meta_
  treasuryFantom_balancerPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_BalancerPoolSnapshot
  treasuryFantom_balancerPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_BalancerPoolSnapshot_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_BalancerPoolSnapshot_filter
  ): [treasuryFantom_BalancerPoolSnapshot!]!
  treasuryFantom_bondDiscount(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_BondDiscount
  treasuryFantom_bondDiscounts(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_BondDiscount_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_BondDiscount_filter
  ): [treasuryFantom_BondDiscount!]!
  treasuryFantom_convexRewardPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_ConvexRewardPoolSnapshot
  treasuryFantom_convexRewardPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_ConvexRewardPoolSnapshot_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_ConvexRewardPoolSnapshot_filter
  ): [treasuryFantom_ConvexRewardPoolSnapshot!]!
  treasuryFantom_dailyBond(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_DailyBond
  treasuryFantom_dailyBonds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_DailyBond_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_DailyBond_filter
  ): [treasuryFantom_DailyBond!]!
  treasuryFantom_dailyStakingReward(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_DailyStakingReward
  treasuryFantom_dailyStakingRewards(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_DailyStakingReward_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_DailyStakingReward_filter
  ): [treasuryFantom_DailyStakingReward!]!
  treasuryFantom_erc20TokenSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_ERC20TokenSnapshot
  treasuryFantom_erc20TokenSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_ERC20TokenSnapshot_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_ERC20TokenSnapshot_filter
  ): [treasuryFantom_ERC20TokenSnapshot!]!
  treasuryFantom_gnosisAuction(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_GnosisAuction
  treasuryFantom_gnosisAuctionRoot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_GnosisAuctionRoot
  treasuryFantom_gnosisAuctionRoots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_GnosisAuctionRoot_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_GnosisAuctionRoot_filter
  ): [treasuryFantom_GnosisAuctionRoot!]!
  treasuryFantom_gnosisAuctions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_GnosisAuction_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_GnosisAuction_filter
  ): [treasuryFantom_GnosisAuction!]!
  treasuryFantom_poolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_PoolSnapshot
  treasuryFantom_poolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_PoolSnapshot_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_PoolSnapshot_filter
  ): [treasuryFantom_PoolSnapshot!]!
  treasuryFantom_priceSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_PriceSnapshot
  treasuryFantom_priceSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_PriceSnapshot_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_PriceSnapshot_filter
  ): [treasuryFantom_PriceSnapshot!]!
  treasuryFantom_protocolMetric(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_ProtocolMetric
  treasuryFantom_protocolMetrics(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_ProtocolMetric_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_ProtocolMetric_filter
  ): [treasuryFantom_ProtocolMetric!]!
  treasuryFantom_rebase(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_Rebase
  treasuryFantom_rebases(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_Rebase_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_Rebase_filter
  ): [treasuryFantom_Rebase!]!
  treasuryFantom_stakingPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_StakingPoolSnapshot
  treasuryFantom_stakingPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_StakingPoolSnapshot_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_StakingPoolSnapshot_filter
  ): [treasuryFantom_StakingPoolSnapshot!]!
  treasuryFantom_token(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_Token
  treasuryFantom_tokenPriceSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_TokenPriceSnapshot
  treasuryFantom_tokenPriceSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_TokenPriceSnapshot_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_TokenPriceSnapshot_filter
  ): [treasuryFantom_TokenPriceSnapshot!]!
  treasuryFantom_tokenRecord(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_TokenRecord
  treasuryFantom_tokenRecords(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_TokenRecord_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_TokenRecord_filter
  ): [treasuryFantom_TokenRecord!]!
  treasuryFantom_tokenSupplies(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_TokenSupply_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_TokenSupply_filter
  ): [treasuryFantom_TokenSupply!]!
  treasuryFantom_tokenSupply(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_TokenSupply
  treasuryFantom_tokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_Token_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_Token_filter
  ): [treasuryFantom_Token!]!
  """Access to subgraph metadata"""
  treasuryPolygon__meta(block: treasuryPolygon_Block_height): treasuryPolygon__Meta_
  treasuryPolygon_balancerPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_BalancerPoolSnapshot
  treasuryPolygon_balancerPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_BalancerPoolSnapshot_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_BalancerPoolSnapshot_filter
  ): [treasuryPolygon_BalancerPoolSnapshot!]!
  treasuryPolygon_bondDiscount(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_BondDiscount
  treasuryPolygon_bondDiscounts(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_BondDiscount_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_BondDiscount_filter
  ): [treasuryPolygon_BondDiscount!]!
  treasuryPolygon_convexRewardPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_ConvexRewardPoolSnapshot
  treasuryPolygon_convexRewardPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_ConvexRewardPoolSnapshot_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_ConvexRewardPoolSnapshot_filter
  ): [treasuryPolygon_ConvexRewardPoolSnapshot!]!
  treasuryPolygon_dailyBond(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_DailyBond
  treasuryPolygon_dailyBonds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_DailyBond_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_DailyBond_filter
  ): [treasuryPolygon_DailyBond!]!
  treasuryPolygon_dailyStakingReward(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_DailyStakingReward
  treasuryPolygon_dailyStakingRewards(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_DailyStakingReward_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_DailyStakingReward_filter
  ): [treasuryPolygon_DailyStakingReward!]!
  treasuryPolygon_erc20TokenSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_ERC20TokenSnapshot
  treasuryPolygon_erc20TokenSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_ERC20TokenSnapshot_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_ERC20TokenSnapshot_filter
  ): [treasuryPolygon_ERC20TokenSnapshot!]!
  treasuryPolygon_gnosisAuction(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_GnosisAuction
  treasuryPolygon_gnosisAuctionRoot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_GnosisAuctionRoot
  treasuryPolygon_gnosisAuctionRoots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_GnosisAuctionRoot_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_GnosisAuctionRoot_filter
  ): [treasuryPolygon_GnosisAuctionRoot!]!
  treasuryPolygon_gnosisAuctions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_GnosisAuction_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_GnosisAuction_filter
  ): [treasuryPolygon_GnosisAuction!]!
  treasuryPolygon_poolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_PoolSnapshot
  treasuryPolygon_poolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_PoolSnapshot_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_PoolSnapshot_filter
  ): [treasuryPolygon_PoolSnapshot!]!
  treasuryPolygon_priceSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_PriceSnapshot
  treasuryPolygon_priceSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_PriceSnapshot_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_PriceSnapshot_filter
  ): [treasuryPolygon_PriceSnapshot!]!
  treasuryPolygon_protocolMetric(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_ProtocolMetric
  treasuryPolygon_protocolMetrics(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_ProtocolMetric_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_ProtocolMetric_filter
  ): [treasuryPolygon_ProtocolMetric!]!
  treasuryPolygon_rebase(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_Rebase
  treasuryPolygon_rebases(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_Rebase_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_Rebase_filter
  ): [treasuryPolygon_Rebase!]!
  treasuryPolygon_stakingPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_StakingPoolSnapshot
  treasuryPolygon_stakingPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_StakingPoolSnapshot_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_StakingPoolSnapshot_filter
  ): [treasuryPolygon_StakingPoolSnapshot!]!
  treasuryPolygon_token(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_Token
  treasuryPolygon_tokenPriceSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_TokenPriceSnapshot
  treasuryPolygon_tokenPriceSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_TokenPriceSnapshot_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_TokenPriceSnapshot_filter
  ): [treasuryPolygon_TokenPriceSnapshot!]!
  treasuryPolygon_tokenRecord(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_TokenRecord
  treasuryPolygon_tokenRecords(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_TokenRecord_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_TokenRecord_filter
  ): [treasuryPolygon_TokenRecord!]!
  treasuryPolygon_tokenSupplies(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_TokenSupply_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_TokenSupply_filter
  ): [treasuryPolygon_TokenSupply!]!
  treasuryPolygon_tokenSupply(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_TokenSupply
  treasuryPolygon_tokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_Token_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_Token_filter
  ): [treasuryPolygon_Token!]!
}

type treasuryArbitrum_Rebase {
  amount: treasuryArbitrum_BigDecimal!
  contract: String!
  id: ID!
  percentage: treasuryArbitrum_BigDecimal!
  stakedOhms: treasuryArbitrum_BigDecimal!
  timestamp: BigInt!
  value: treasuryArbitrum_BigDecimal!
  _join: Query!
}

input treasuryArbitrum_Rebase_filter {
  """Filter for the block changed event."""
  _change_block: treasuryArbitrum_BlockChangedFilter
  amount: treasuryArbitrum_BigDecimal
  amount_gt: treasuryArbitrum_BigDecimal
  amount_gte: treasuryArbitrum_BigDecimal
  amount_in: [treasuryArbitrum_BigDecimal!]
  amount_lt: treasuryArbitrum_BigDecimal
  amount_lte: treasuryArbitrum_BigDecimal
  amount_not: treasuryArbitrum_BigDecimal
  amount_not_in: [treasuryArbitrum_BigDecimal!]
  and: [treasuryArbitrum_Rebase_filter]
  contract: String
  contract_contains: String
  contract_contains_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_gt: String
  contract_gte: String
  contract_in: [String!]
  contract_lt: String
  contract_lte: String
  contract_not: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_not_in: [String!]
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryArbitrum_Rebase_filter]
  percentage: treasuryArbitrum_BigDecimal
  percentage_gt: treasuryArbitrum_BigDecimal
  percentage_gte: treasuryArbitrum_BigDecimal
  percentage_in: [treasuryArbitrum_BigDecimal!]
  percentage_lt: treasuryArbitrum_BigDecimal
  percentage_lte: treasuryArbitrum_BigDecimal
  percentage_not: treasuryArbitrum_BigDecimal
  percentage_not_in: [treasuryArbitrum_BigDecimal!]
  stakedOhms: treasuryArbitrum_BigDecimal
  stakedOhms_gt: treasuryArbitrum_BigDecimal
  stakedOhms_gte: treasuryArbitrum_BigDecimal
  stakedOhms_in: [treasuryArbitrum_BigDecimal!]
  stakedOhms_lt: treasuryArbitrum_BigDecimal
  stakedOhms_lte: treasuryArbitrum_BigDecimal
  stakedOhms_not: treasuryArbitrum_BigDecimal
  stakedOhms_not_in: [treasuryArbitrum_BigDecimal!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  value: treasuryArbitrum_BigDecimal
  value_gt: treasuryArbitrum_BigDecimal
  value_gte: treasuryArbitrum_BigDecimal
  value_in: [treasuryArbitrum_BigDecimal!]
  value_lt: treasuryArbitrum_BigDecimal
  value_lte: treasuryArbitrum_BigDecimal
  value_not: treasuryArbitrum_BigDecimal
  value_not_in: [treasuryArbitrum_BigDecimal!]
}

enum treasuryArbitrum_Rebase_orderBy {
  amount
  contract
  id
  percentage
  stakedOhms
  timestamp
  value
}

type treasuryArbitrum_StakingPoolSnapshot {
  block: BigInt!
  contractAddress: treasuryArbitrum_Bytes!
  id: ID!
  stakingToken: treasuryArbitrum_Bytes
  _join: Query!
}

input treasuryArbitrum_StakingPoolSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryArbitrum_BlockChangedFilter
  and: [treasuryArbitrum_StakingPoolSnapshot_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  contractAddress: treasuryArbitrum_Bytes
  contractAddress_contains: treasuryArbitrum_Bytes
  contractAddress_gt: treasuryArbitrum_Bytes
  contractAddress_gte: treasuryArbitrum_Bytes
  contractAddress_in: [treasuryArbitrum_Bytes!]
  contractAddress_lt: treasuryArbitrum_Bytes
  contractAddress_lte: treasuryArbitrum_Bytes
  contractAddress_not: treasuryArbitrum_Bytes
  contractAddress_not_contains: treasuryArbitrum_Bytes
  contractAddress_not_in: [treasuryArbitrum_Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryArbitrum_StakingPoolSnapshot_filter]
  stakingToken: treasuryArbitrum_Bytes
  stakingToken_contains: treasuryArbitrum_Bytes
  stakingToken_gt: treasuryArbitrum_Bytes
  stakingToken_gte: treasuryArbitrum_Bytes
  stakingToken_in: [treasuryArbitrum_Bytes!]
  stakingToken_lt: treasuryArbitrum_Bytes
  stakingToken_lte: treasuryArbitrum_Bytes
  stakingToken_not: treasuryArbitrum_Bytes
  stakingToken_not_contains: treasuryArbitrum_Bytes
  stakingToken_not_in: [treasuryArbitrum_Bytes!]
}

enum treasuryArbitrum_StakingPoolSnapshot_orderBy {
  block
  contractAddress
  id
  stakingToken
}

type Subscription {
  """Access to subgraph metadata"""
  treasuryArbitrum__meta(block: treasuryArbitrum_Block_height): treasuryArbitrum__Meta_
  treasuryArbitrum_balancerPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_BalancerPoolSnapshot
  treasuryArbitrum_balancerPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_BalancerPoolSnapshot_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_BalancerPoolSnapshot_filter
  ): [treasuryArbitrum_BalancerPoolSnapshot!]!
  treasuryArbitrum_bondDiscount(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_BondDiscount
  treasuryArbitrum_bondDiscounts(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_BondDiscount_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_BondDiscount_filter
  ): [treasuryArbitrum_BondDiscount!]!
  treasuryArbitrum_convexRewardPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_ConvexRewardPoolSnapshot
  treasuryArbitrum_convexRewardPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_ConvexRewardPoolSnapshot_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_ConvexRewardPoolSnapshot_filter
  ): [treasuryArbitrum_ConvexRewardPoolSnapshot!]!
  treasuryArbitrum_dailyBond(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_DailyBond
  treasuryArbitrum_dailyBonds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_DailyBond_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_DailyBond_filter
  ): [treasuryArbitrum_DailyBond!]!
  treasuryArbitrum_dailyStakingReward(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_DailyStakingReward
  treasuryArbitrum_dailyStakingRewards(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_DailyStakingReward_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_DailyStakingReward_filter
  ): [treasuryArbitrum_DailyStakingReward!]!
  treasuryArbitrum_erc20TokenSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_ERC20TokenSnapshot
  treasuryArbitrum_erc20TokenSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_ERC20TokenSnapshot_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_ERC20TokenSnapshot_filter
  ): [treasuryArbitrum_ERC20TokenSnapshot!]!
  treasuryArbitrum_gnosisAuction(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_GnosisAuction
  treasuryArbitrum_gnosisAuctionRoot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_GnosisAuctionRoot
  treasuryArbitrum_gnosisAuctionRoots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_GnosisAuctionRoot_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_GnosisAuctionRoot_filter
  ): [treasuryArbitrum_GnosisAuctionRoot!]!
  treasuryArbitrum_gnosisAuctions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_GnosisAuction_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_GnosisAuction_filter
  ): [treasuryArbitrum_GnosisAuction!]!
  treasuryArbitrum_poolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_PoolSnapshot
  treasuryArbitrum_poolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_PoolSnapshot_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_PoolSnapshot_filter
  ): [treasuryArbitrum_PoolSnapshot!]!
  treasuryArbitrum_priceSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_PriceSnapshot
  treasuryArbitrum_priceSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_PriceSnapshot_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_PriceSnapshot_filter
  ): [treasuryArbitrum_PriceSnapshot!]!
  treasuryArbitrum_protocolMetric(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_ProtocolMetric
  treasuryArbitrum_protocolMetrics(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_ProtocolMetric_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_ProtocolMetric_filter
  ): [treasuryArbitrum_ProtocolMetric!]!
  treasuryArbitrum_rebase(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_Rebase
  treasuryArbitrum_rebases(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_Rebase_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_Rebase_filter
  ): [treasuryArbitrum_Rebase!]!
  treasuryArbitrum_stakingPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_StakingPoolSnapshot
  treasuryArbitrum_stakingPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_StakingPoolSnapshot_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_StakingPoolSnapshot_filter
  ): [treasuryArbitrum_StakingPoolSnapshot!]!
  treasuryArbitrum_token(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_Token
  treasuryArbitrum_tokenPriceSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_TokenPriceSnapshot
  treasuryArbitrum_tokenPriceSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_TokenPriceSnapshot_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_TokenPriceSnapshot_filter
  ): [treasuryArbitrum_TokenPriceSnapshot!]!
  treasuryArbitrum_tokenRecord(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_TokenRecord
  treasuryArbitrum_tokenRecords(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_TokenRecord_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_TokenRecord_filter
  ): [treasuryArbitrum_TokenRecord!]!
  treasuryArbitrum_tokenSupplies(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_TokenSupply_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_TokenSupply_filter
  ): [treasuryArbitrum_TokenSupply!]!
  treasuryArbitrum_tokenSupply(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
  ): treasuryArbitrum_TokenSupply
  treasuryArbitrum_tokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryArbitrum_Block_height
    first: Int = 100
    orderBy: treasuryArbitrum_Token_orderBy
    orderDirection: treasuryArbitrum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryArbitrum__SubgraphErrorPolicy_! = deny
    where: treasuryArbitrum_Token_filter
  ): [treasuryArbitrum_Token!]!
  """Access to subgraph metadata"""
  treasuryEthereum__meta(block: treasuryEthereum_Block_height): treasuryEthereum__Meta_
  treasuryEthereum_balancerPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_BalancerPoolSnapshot
  treasuryEthereum_balancerPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_BalancerPoolSnapshot_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_BalancerPoolSnapshot_filter
  ): [treasuryEthereum_BalancerPoolSnapshot!]!
  treasuryEthereum_bondDiscount(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_BondDiscount
  treasuryEthereum_bondDiscounts(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_BondDiscount_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_BondDiscount_filter
  ): [treasuryEthereum_BondDiscount!]!
  treasuryEthereum_convexRewardPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_ConvexRewardPoolSnapshot
  treasuryEthereum_convexRewardPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_ConvexRewardPoolSnapshot_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_ConvexRewardPoolSnapshot_filter
  ): [treasuryEthereum_ConvexRewardPoolSnapshot!]!
  treasuryEthereum_dailyBond(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_DailyBond
  treasuryEthereum_dailyBonds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_DailyBond_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_DailyBond_filter
  ): [treasuryEthereum_DailyBond!]!
  treasuryEthereum_dailyStakingReward(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_DailyStakingReward
  treasuryEthereum_dailyStakingRewards(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_DailyStakingReward_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_DailyStakingReward_filter
  ): [treasuryEthereum_DailyStakingReward!]!
  treasuryEthereum_erc20TokenSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_ERC20TokenSnapshot
  treasuryEthereum_erc20TokenSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_ERC20TokenSnapshot_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_ERC20TokenSnapshot_filter
  ): [treasuryEthereum_ERC20TokenSnapshot!]!
  treasuryEthereum_gnosisAuction(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_GnosisAuction
  treasuryEthereum_gnosisAuctionRoot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_GnosisAuctionRoot
  treasuryEthereum_gnosisAuctionRoots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_GnosisAuctionRoot_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_GnosisAuctionRoot_filter
  ): [treasuryEthereum_GnosisAuctionRoot!]!
  treasuryEthereum_gnosisAuctions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_GnosisAuction_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_GnosisAuction_filter
  ): [treasuryEthereum_GnosisAuction!]!
  treasuryEthereum_poolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_PoolSnapshot
  treasuryEthereum_poolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_PoolSnapshot_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_PoolSnapshot_filter
  ): [treasuryEthereum_PoolSnapshot!]!
  treasuryEthereum_priceSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_PriceSnapshot
  treasuryEthereum_priceSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_PriceSnapshot_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_PriceSnapshot_filter
  ): [treasuryEthereum_PriceSnapshot!]!
  treasuryEthereum_protocolMetric(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_ProtocolMetric
  treasuryEthereum_protocolMetrics(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_ProtocolMetric_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_ProtocolMetric_filter
  ): [treasuryEthereum_ProtocolMetric!]!
  treasuryEthereum_rebase(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_Rebase
  treasuryEthereum_rebases(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_Rebase_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_Rebase_filter
  ): [treasuryEthereum_Rebase!]!
  treasuryEthereum_stakingPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_StakingPoolSnapshot
  treasuryEthereum_stakingPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_StakingPoolSnapshot_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_StakingPoolSnapshot_filter
  ): [treasuryEthereum_StakingPoolSnapshot!]!
  treasuryEthereum_token(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_Token
  treasuryEthereum_tokenPriceSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_TokenPriceSnapshot
  treasuryEthereum_tokenPriceSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_TokenPriceSnapshot_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_TokenPriceSnapshot_filter
  ): [treasuryEthereum_TokenPriceSnapshot!]!
  treasuryEthereum_tokenRecord(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_TokenRecord
  treasuryEthereum_tokenRecords(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_TokenRecord_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_TokenRecord_filter
  ): [treasuryEthereum_TokenRecord!]!
  treasuryEthereum_tokenSupplies(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_TokenSupply_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_TokenSupply_filter
  ): [treasuryEthereum_TokenSupply!]!
  treasuryEthereum_tokenSupply(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
  ): treasuryEthereum_TokenSupply
  treasuryEthereum_tokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryEthereum_Block_height
    first: Int = 100
    orderBy: treasuryEthereum_Token_orderBy
    orderDirection: treasuryEthereum_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryEthereum__SubgraphErrorPolicy_! = deny
    where: treasuryEthereum_Token_filter
  ): [treasuryEthereum_Token!]!
  """Access to subgraph metadata"""
  treasuryFantom__meta(block: treasuryFantom_Block_height): treasuryFantom__Meta_
  treasuryFantom_balancerPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_BalancerPoolSnapshot
  treasuryFantom_balancerPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_BalancerPoolSnapshot_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_BalancerPoolSnapshot_filter
  ): [treasuryFantom_BalancerPoolSnapshot!]!
  treasuryFantom_bondDiscount(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_BondDiscount
  treasuryFantom_bondDiscounts(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_BondDiscount_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_BondDiscount_filter
  ): [treasuryFantom_BondDiscount!]!
  treasuryFantom_convexRewardPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_ConvexRewardPoolSnapshot
  treasuryFantom_convexRewardPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_ConvexRewardPoolSnapshot_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_ConvexRewardPoolSnapshot_filter
  ): [treasuryFantom_ConvexRewardPoolSnapshot!]!
  treasuryFantom_dailyBond(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_DailyBond
  treasuryFantom_dailyBonds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_DailyBond_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_DailyBond_filter
  ): [treasuryFantom_DailyBond!]!
  treasuryFantom_dailyStakingReward(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_DailyStakingReward
  treasuryFantom_dailyStakingRewards(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_DailyStakingReward_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_DailyStakingReward_filter
  ): [treasuryFantom_DailyStakingReward!]!
  treasuryFantom_erc20TokenSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_ERC20TokenSnapshot
  treasuryFantom_erc20TokenSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_ERC20TokenSnapshot_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_ERC20TokenSnapshot_filter
  ): [treasuryFantom_ERC20TokenSnapshot!]!
  treasuryFantom_gnosisAuction(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_GnosisAuction
  treasuryFantom_gnosisAuctionRoot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_GnosisAuctionRoot
  treasuryFantom_gnosisAuctionRoots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_GnosisAuctionRoot_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_GnosisAuctionRoot_filter
  ): [treasuryFantom_GnosisAuctionRoot!]!
  treasuryFantom_gnosisAuctions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_GnosisAuction_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_GnosisAuction_filter
  ): [treasuryFantom_GnosisAuction!]!
  treasuryFantom_poolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_PoolSnapshot
  treasuryFantom_poolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_PoolSnapshot_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_PoolSnapshot_filter
  ): [treasuryFantom_PoolSnapshot!]!
  treasuryFantom_priceSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_PriceSnapshot
  treasuryFantom_priceSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_PriceSnapshot_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_PriceSnapshot_filter
  ): [treasuryFantom_PriceSnapshot!]!
  treasuryFantom_protocolMetric(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_ProtocolMetric
  treasuryFantom_protocolMetrics(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_ProtocolMetric_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_ProtocolMetric_filter
  ): [treasuryFantom_ProtocolMetric!]!
  treasuryFantom_rebase(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_Rebase
  treasuryFantom_rebases(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_Rebase_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_Rebase_filter
  ): [treasuryFantom_Rebase!]!
  treasuryFantom_stakingPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_StakingPoolSnapshot
  treasuryFantom_stakingPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_StakingPoolSnapshot_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_StakingPoolSnapshot_filter
  ): [treasuryFantom_StakingPoolSnapshot!]!
  treasuryFantom_token(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_Token
  treasuryFantom_tokenPriceSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_TokenPriceSnapshot
  treasuryFantom_tokenPriceSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_TokenPriceSnapshot_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_TokenPriceSnapshot_filter
  ): [treasuryFantom_TokenPriceSnapshot!]!
  treasuryFantom_tokenRecord(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_TokenRecord
  treasuryFantom_tokenRecords(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_TokenRecord_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_TokenRecord_filter
  ): [treasuryFantom_TokenRecord!]!
  treasuryFantom_tokenSupplies(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_TokenSupply_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_TokenSupply_filter
  ): [treasuryFantom_TokenSupply!]!
  treasuryFantom_tokenSupply(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
  ): treasuryFantom_TokenSupply
  treasuryFantom_tokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryFantom_Block_height
    first: Int = 100
    orderBy: treasuryFantom_Token_orderBy
    orderDirection: treasuryFantom_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryFantom__SubgraphErrorPolicy_! = deny
    where: treasuryFantom_Token_filter
  ): [treasuryFantom_Token!]!
  """Access to subgraph metadata"""
  treasuryPolygon__meta(block: treasuryPolygon_Block_height): treasuryPolygon__Meta_
  treasuryPolygon_balancerPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_BalancerPoolSnapshot
  treasuryPolygon_balancerPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_BalancerPoolSnapshot_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_BalancerPoolSnapshot_filter
  ): [treasuryPolygon_BalancerPoolSnapshot!]!
  treasuryPolygon_bondDiscount(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_BondDiscount
  treasuryPolygon_bondDiscounts(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_BondDiscount_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_BondDiscount_filter
  ): [treasuryPolygon_BondDiscount!]!
  treasuryPolygon_convexRewardPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_ConvexRewardPoolSnapshot
  treasuryPolygon_convexRewardPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_ConvexRewardPoolSnapshot_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_ConvexRewardPoolSnapshot_filter
  ): [treasuryPolygon_ConvexRewardPoolSnapshot!]!
  treasuryPolygon_dailyBond(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_DailyBond
  treasuryPolygon_dailyBonds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_DailyBond_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_DailyBond_filter
  ): [treasuryPolygon_DailyBond!]!
  treasuryPolygon_dailyStakingReward(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_DailyStakingReward
  treasuryPolygon_dailyStakingRewards(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_DailyStakingReward_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_DailyStakingReward_filter
  ): [treasuryPolygon_DailyStakingReward!]!
  treasuryPolygon_erc20TokenSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_ERC20TokenSnapshot
  treasuryPolygon_erc20TokenSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_ERC20TokenSnapshot_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_ERC20TokenSnapshot_filter
  ): [treasuryPolygon_ERC20TokenSnapshot!]!
  treasuryPolygon_gnosisAuction(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_GnosisAuction
  treasuryPolygon_gnosisAuctionRoot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_GnosisAuctionRoot
  treasuryPolygon_gnosisAuctionRoots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_GnosisAuctionRoot_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_GnosisAuctionRoot_filter
  ): [treasuryPolygon_GnosisAuctionRoot!]!
  treasuryPolygon_gnosisAuctions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_GnosisAuction_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_GnosisAuction_filter
  ): [treasuryPolygon_GnosisAuction!]!
  treasuryPolygon_poolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_PoolSnapshot
  treasuryPolygon_poolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_PoolSnapshot_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_PoolSnapshot_filter
  ): [treasuryPolygon_PoolSnapshot!]!
  treasuryPolygon_priceSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_PriceSnapshot
  treasuryPolygon_priceSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_PriceSnapshot_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_PriceSnapshot_filter
  ): [treasuryPolygon_PriceSnapshot!]!
  treasuryPolygon_protocolMetric(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_ProtocolMetric
  treasuryPolygon_protocolMetrics(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_ProtocolMetric_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_ProtocolMetric_filter
  ): [treasuryPolygon_ProtocolMetric!]!
  treasuryPolygon_rebase(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_Rebase
  treasuryPolygon_rebases(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_Rebase_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_Rebase_filter
  ): [treasuryPolygon_Rebase!]!
  treasuryPolygon_stakingPoolSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_StakingPoolSnapshot
  treasuryPolygon_stakingPoolSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_StakingPoolSnapshot_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_StakingPoolSnapshot_filter
  ): [treasuryPolygon_StakingPoolSnapshot!]!
  treasuryPolygon_token(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_Token
  treasuryPolygon_tokenPriceSnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_TokenPriceSnapshot
  treasuryPolygon_tokenPriceSnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_TokenPriceSnapshot_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_TokenPriceSnapshot_filter
  ): [treasuryPolygon_TokenPriceSnapshot!]!
  treasuryPolygon_tokenRecord(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_TokenRecord
  treasuryPolygon_tokenRecords(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_TokenRecord_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_TokenRecord_filter
  ): [treasuryPolygon_TokenRecord!]!
  treasuryPolygon_tokenSupplies(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_TokenSupply_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_TokenSupply_filter
  ): [treasuryPolygon_TokenSupply!]!
  treasuryPolygon_tokenSupply(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
  ): treasuryPolygon_TokenSupply
  treasuryPolygon_tokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: treasuryPolygon_Block_height
    first: Int = 100
    orderBy: treasuryPolygon_Token_orderBy
    orderDirection: treasuryPolygon_OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: treasuryPolygon__SubgraphErrorPolicy_! = deny
    where: treasuryPolygon_Token_filter
  ): [treasuryPolygon_Token!]!
}

type treasuryArbitrum_Token {
  id: ID!
  _join: Query!
}

type treasuryArbitrum_TokenPriceSnapshot {
  block: BigInt!
  id: ID!
  price: treasuryArbitrum_BigDecimal!
  token: treasuryArbitrum_Bytes!
  _join: Query!
}

input treasuryArbitrum_TokenPriceSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryArbitrum_BlockChangedFilter
  and: [treasuryArbitrum_TokenPriceSnapshot_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryArbitrum_TokenPriceSnapshot_filter]
  price: treasuryArbitrum_BigDecimal
  price_gt: treasuryArbitrum_BigDecimal
  price_gte: treasuryArbitrum_BigDecimal
  price_in: [treasuryArbitrum_BigDecimal!]
  price_lt: treasuryArbitrum_BigDecimal
  price_lte: treasuryArbitrum_BigDecimal
  price_not: treasuryArbitrum_BigDecimal
  price_not_in: [treasuryArbitrum_BigDecimal!]
  token: treasuryArbitrum_Bytes
  token_contains: treasuryArbitrum_Bytes
  token_gt: treasuryArbitrum_Bytes
  token_gte: treasuryArbitrum_Bytes
  token_in: [treasuryArbitrum_Bytes!]
  token_lt: treasuryArbitrum_Bytes
  token_lte: treasuryArbitrum_Bytes
  token_not: treasuryArbitrum_Bytes
  token_not_contains: treasuryArbitrum_Bytes
  token_not_in: [treasuryArbitrum_Bytes!]
}

enum treasuryArbitrum_TokenPriceSnapshot_orderBy {
  block
  id
  price
  token
}

type treasuryArbitrum_TokenRecord {
  balance: treasuryArbitrum_BigDecimal!
  block: BigInt!
  blockchain: String!
  category: String!
  date: String!
  id: ID!
  isBluechip: Boolean!
  isLiquid: Boolean!
  multiplier: treasuryArbitrum_BigDecimal!
  rate: treasuryArbitrum_BigDecimal!
  source: String!
  sourceAddress: String!
  timestamp: BigInt!
  token: String!
  tokenAddress: String!
  value: treasuryArbitrum_BigDecimal!
  valueExcludingOhm: treasuryArbitrum_BigDecimal!
  _join: Query!
}

input treasuryArbitrum_TokenRecord_filter {
  """Filter for the block changed event."""
  _change_block: treasuryArbitrum_BlockChangedFilter
  and: [treasuryArbitrum_TokenRecord_filter]
  balance: treasuryArbitrum_BigDecimal
  balance_gt: treasuryArbitrum_BigDecimal
  balance_gte: treasuryArbitrum_BigDecimal
  balance_in: [treasuryArbitrum_BigDecimal!]
  balance_lt: treasuryArbitrum_BigDecimal
  balance_lte: treasuryArbitrum_BigDecimal
  balance_not: treasuryArbitrum_BigDecimal
  balance_not_in: [treasuryArbitrum_BigDecimal!]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  blockchain: String
  blockchain_contains: String
  blockchain_contains_nocase: String
  blockchain_ends_with: String
  blockchain_ends_with_nocase: String
  blockchain_gt: String
  blockchain_gte: String
  blockchain_in: [String!]
  blockchain_lt: String
  blockchain_lte: String
  blockchain_not: String
  blockchain_not_contains: String
  blockchain_not_contains_nocase: String
  blockchain_not_ends_with: String
  blockchain_not_ends_with_nocase: String
  blockchain_not_in: [String!]
  blockchain_not_starts_with: String
  blockchain_not_starts_with_nocase: String
  blockchain_starts_with: String
  blockchain_starts_with_nocase: String
  category: String
  category_contains: String
  category_contains_nocase: String
  category_ends_with: String
  category_ends_with_nocase: String
  category_gt: String
  category_gte: String
  category_in: [String!]
  category_lt: String
  category_lte: String
  category_not: String
  category_not_contains: String
  category_not_contains_nocase: String
  category_not_ends_with: String
  category_not_ends_with_nocase: String
  category_not_in: [String!]
  category_not_starts_with: String
  category_not_starts_with_nocase: String
  category_starts_with: String
  category_starts_with_nocase: String
  date: String
  date_contains: String
  date_contains_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_gt: String
  date_gte: String
  date_in: [String!]
  date_lt: String
  date_lte: String
  date_not: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  date_not_in: [String!]
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  isBluechip: Boolean
  isBluechip_in: [Boolean!]
  isBluechip_not: Boolean
  isBluechip_not_in: [Boolean!]
  isLiquid: Boolean
  isLiquid_in: [Boolean!]
  isLiquid_not: Boolean
  isLiquid_not_in: [Boolean!]
  multiplier: treasuryArbitrum_BigDecimal
  multiplier_gt: treasuryArbitrum_BigDecimal
  multiplier_gte: treasuryArbitrum_BigDecimal
  multiplier_in: [treasuryArbitrum_BigDecimal!]
  multiplier_lt: treasuryArbitrum_BigDecimal
  multiplier_lte: treasuryArbitrum_BigDecimal
  multiplier_not: treasuryArbitrum_BigDecimal
  multiplier_not_in: [treasuryArbitrum_BigDecimal!]
  or: [treasuryArbitrum_TokenRecord_filter]
  rate: treasuryArbitrum_BigDecimal
  rate_gt: treasuryArbitrum_BigDecimal
  rate_gte: treasuryArbitrum_BigDecimal
  rate_in: [treasuryArbitrum_BigDecimal!]
  rate_lt: treasuryArbitrum_BigDecimal
  rate_lte: treasuryArbitrum_BigDecimal
  rate_not: treasuryArbitrum_BigDecimal
  rate_not_in: [treasuryArbitrum_BigDecimal!]
  source: String
  sourceAddress: String
  sourceAddress_contains: String
  sourceAddress_contains_nocase: String
  sourceAddress_ends_with: String
  sourceAddress_ends_with_nocase: String
  sourceAddress_gt: String
  sourceAddress_gte: String
  sourceAddress_in: [String!]
  sourceAddress_lt: String
  sourceAddress_lte: String
  sourceAddress_not: String
  sourceAddress_not_contains: String
  sourceAddress_not_contains_nocase: String
  sourceAddress_not_ends_with: String
  sourceAddress_not_ends_with_nocase: String
  sourceAddress_not_in: [String!]
  sourceAddress_not_starts_with: String
  sourceAddress_not_starts_with_nocase: String
  sourceAddress_starts_with: String
  sourceAddress_starts_with_nocase: String
  source_contains: String
  source_contains_nocase: String
  source_ends_with: String
  source_ends_with_nocase: String
  source_gt: String
  source_gte: String
  source_in: [String!]
  source_lt: String
  source_lte: String
  source_not: String
  source_not_contains: String
  source_not_contains_nocase: String
  source_not_ends_with: String
  source_not_ends_with_nocase: String
  source_not_in: [String!]
  source_not_starts_with: String
  source_not_starts_with_nocase: String
  source_starts_with: String
  source_starts_with_nocase: String
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  token: String
  tokenAddress: String
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_gt: String
  tokenAddress_gte: String
  tokenAddress_in: [String!]
  tokenAddress_lt: String
  tokenAddress_lte: String
  tokenAddress_not: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  tokenAddress_not_in: [String!]
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  value: treasuryArbitrum_BigDecimal
  valueExcludingOhm: treasuryArbitrum_BigDecimal
  valueExcludingOhm_gt: treasuryArbitrum_BigDecimal
  valueExcludingOhm_gte: treasuryArbitrum_BigDecimal
  valueExcludingOhm_in: [treasuryArbitrum_BigDecimal!]
  valueExcludingOhm_lt: treasuryArbitrum_BigDecimal
  valueExcludingOhm_lte: treasuryArbitrum_BigDecimal
  valueExcludingOhm_not: treasuryArbitrum_BigDecimal
  valueExcludingOhm_not_in: [treasuryArbitrum_BigDecimal!]
  value_gt: treasuryArbitrum_BigDecimal
  value_gte: treasuryArbitrum_BigDecimal
  value_in: [treasuryArbitrum_BigDecimal!]
  value_lt: treasuryArbitrum_BigDecimal
  value_lte: treasuryArbitrum_BigDecimal
  value_not: treasuryArbitrum_BigDecimal
  value_not_in: [treasuryArbitrum_BigDecimal!]
}

enum treasuryArbitrum_TokenRecord_orderBy {
  balance
  block
  blockchain
  category
  date
  id
  isBluechip
  isLiquid
  multiplier
  rate
  source
  sourceAddress
  timestamp
  token
  tokenAddress
  value
  valueExcludingOhm
}

type treasuryArbitrum_TokenSupply {
  balance: treasuryArbitrum_BigDecimal!
  block: BigInt!
  date: String!
  id: ID!
  pool: String
  poolAddress: String
  source: String
  sourceAddress: String
  supplyBalance: treasuryArbitrum_BigDecimal!
  timestamp: BigInt!
  token: String!
  tokenAddress: String!
  type: String!
  _join: Query!
}

input treasuryArbitrum_TokenSupply_filter {
  """Filter for the block changed event."""
  _change_block: treasuryArbitrum_BlockChangedFilter
  and: [treasuryArbitrum_TokenSupply_filter]
  balance: treasuryArbitrum_BigDecimal
  balance_gt: treasuryArbitrum_BigDecimal
  balance_gte: treasuryArbitrum_BigDecimal
  balance_in: [treasuryArbitrum_BigDecimal!]
  balance_lt: treasuryArbitrum_BigDecimal
  balance_lte: treasuryArbitrum_BigDecimal
  balance_not: treasuryArbitrum_BigDecimal
  balance_not_in: [treasuryArbitrum_BigDecimal!]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  date: String
  date_contains: String
  date_contains_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_gt: String
  date_gte: String
  date_in: [String!]
  date_lt: String
  date_lte: String
  date_not: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  date_not_in: [String!]
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryArbitrum_TokenSupply_filter]
  pool: String
  poolAddress: String
  poolAddress_contains: String
  poolAddress_contains_nocase: String
  poolAddress_ends_with: String
  poolAddress_ends_with_nocase: String
  poolAddress_gt: String
  poolAddress_gte: String
  poolAddress_in: [String!]
  poolAddress_lt: String
  poolAddress_lte: String
  poolAddress_not: String
  poolAddress_not_contains: String
  poolAddress_not_contains_nocase: String
  poolAddress_not_ends_with: String
  poolAddress_not_ends_with_nocase: String
  poolAddress_not_in: [String!]
  poolAddress_not_starts_with: String
  poolAddress_not_starts_with_nocase: String
  poolAddress_starts_with: String
  poolAddress_starts_with_nocase: String
  pool_contains: String
  pool_contains_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  source: String
  sourceAddress: String
  sourceAddress_contains: String
  sourceAddress_contains_nocase: String
  sourceAddress_ends_with: String
  sourceAddress_ends_with_nocase: String
  sourceAddress_gt: String
  sourceAddress_gte: String
  sourceAddress_in: [String!]
  sourceAddress_lt: String
  sourceAddress_lte: String
  sourceAddress_not: String
  sourceAddress_not_contains: String
  sourceAddress_not_contains_nocase: String
  sourceAddress_not_ends_with: String
  sourceAddress_not_ends_with_nocase: String
  sourceAddress_not_in: [String!]
  sourceAddress_not_starts_with: String
  sourceAddress_not_starts_with_nocase: String
  sourceAddress_starts_with: String
  sourceAddress_starts_with_nocase: String
  source_contains: String
  source_contains_nocase: String
  source_ends_with: String
  source_ends_with_nocase: String
  source_gt: String
  source_gte: String
  source_in: [String!]
  source_lt: String
  source_lte: String
  source_not: String
  source_not_contains: String
  source_not_contains_nocase: String
  source_not_ends_with: String
  source_not_ends_with_nocase: String
  source_not_in: [String!]
  source_not_starts_with: String
  source_not_starts_with_nocase: String
  source_starts_with: String
  source_starts_with_nocase: String
  supplyBalance: treasuryArbitrum_BigDecimal
  supplyBalance_gt: treasuryArbitrum_BigDecimal
  supplyBalance_gte: treasuryArbitrum_BigDecimal
  supplyBalance_in: [treasuryArbitrum_BigDecimal!]
  supplyBalance_lt: treasuryArbitrum_BigDecimal
  supplyBalance_lte: treasuryArbitrum_BigDecimal
  supplyBalance_not: treasuryArbitrum_BigDecimal
  supplyBalance_not_in: [treasuryArbitrum_BigDecimal!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  token: String
  tokenAddress: String
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_gt: String
  tokenAddress_gte: String
  tokenAddress_in: [String!]
  tokenAddress_lt: String
  tokenAddress_lte: String
  tokenAddress_not: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  tokenAddress_not_in: [String!]
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  type: String
  type_contains: String
  type_contains_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_gt: String
  type_gte: String
  type_in: [String!]
  type_lt: String
  type_lte: String
  type_not: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  type_not_in: [String!]
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
}

enum treasuryArbitrum_TokenSupply_orderBy {
  balance
  block
  date
  id
  pool
  poolAddress
  source
  sourceAddress
  supplyBalance
  timestamp
  token
  tokenAddress
  type
}

input treasuryArbitrum_Token_filter {
  """Filter for the block changed event."""
  _change_block: treasuryArbitrum_BlockChangedFilter
  and: [treasuryArbitrum_Token_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryArbitrum_Token_filter]
}

enum treasuryArbitrum_Token_orderBy {
  id
}

type treasuryArbitrum__Block_ {
  """The hash of the block"""
  hash: treasuryArbitrum_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  _join: Query!
}

"""The type for the top-level _meta field"""
type treasuryArbitrum__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: treasuryArbitrum__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
  _join: Query!
}

enum treasuryArbitrum__SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type treasuryEthereum_BalancerPoolSnapshot {
  balances: [treasuryEthereum_BigDecimal!]!
  block: BigInt!
  decimals: Int!
  id: ID!
  pool: treasuryEthereum_Bytes!
  poolToken: treasuryEthereum_Bytes!
  tokens: [treasuryEthereum_Bytes!]!
  totalSupply: treasuryEthereum_BigDecimal!
  weights: [treasuryEthereum_BigDecimal!]!
  _join: Query!
}

input treasuryEthereum_BalancerPoolSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryEthereum_BlockChangedFilter
  and: [treasuryEthereum_BalancerPoolSnapshot_filter]
  balances: [treasuryEthereum_BigDecimal!]
  balances_contains: [treasuryEthereum_BigDecimal!]
  balances_contains_nocase: [treasuryEthereum_BigDecimal!]
  balances_not: [treasuryEthereum_BigDecimal!]
  balances_not_contains: [treasuryEthereum_BigDecimal!]
  balances_not_contains_nocase: [treasuryEthereum_BigDecimal!]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  decimals: Int
  decimals_gt: Int
  decimals_gte: Int
  decimals_in: [Int!]
  decimals_lt: Int
  decimals_lte: Int
  decimals_not: Int
  decimals_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryEthereum_BalancerPoolSnapshot_filter]
  pool: treasuryEthereum_Bytes
  poolToken: treasuryEthereum_Bytes
  poolToken_contains: treasuryEthereum_Bytes
  poolToken_gt: treasuryEthereum_Bytes
  poolToken_gte: treasuryEthereum_Bytes
  poolToken_in: [treasuryEthereum_Bytes!]
  poolToken_lt: treasuryEthereum_Bytes
  poolToken_lte: treasuryEthereum_Bytes
  poolToken_not: treasuryEthereum_Bytes
  poolToken_not_contains: treasuryEthereum_Bytes
  poolToken_not_in: [treasuryEthereum_Bytes!]
  pool_contains: treasuryEthereum_Bytes
  pool_gt: treasuryEthereum_Bytes
  pool_gte: treasuryEthereum_Bytes
  pool_in: [treasuryEthereum_Bytes!]
  pool_lt: treasuryEthereum_Bytes
  pool_lte: treasuryEthereum_Bytes
  pool_not: treasuryEthereum_Bytes
  pool_not_contains: treasuryEthereum_Bytes
  pool_not_in: [treasuryEthereum_Bytes!]
  tokens: [treasuryEthereum_Bytes!]
  tokens_contains: [treasuryEthereum_Bytes!]
  tokens_contains_nocase: [treasuryEthereum_Bytes!]
  tokens_not: [treasuryEthereum_Bytes!]
  tokens_not_contains: [treasuryEthereum_Bytes!]
  tokens_not_contains_nocase: [treasuryEthereum_Bytes!]
  totalSupply: treasuryEthereum_BigDecimal
  totalSupply_gt: treasuryEthereum_BigDecimal
  totalSupply_gte: treasuryEthereum_BigDecimal
  totalSupply_in: [treasuryEthereum_BigDecimal!]
  totalSupply_lt: treasuryEthereum_BigDecimal
  totalSupply_lte: treasuryEthereum_BigDecimal
  totalSupply_not: treasuryEthereum_BigDecimal
  totalSupply_not_in: [treasuryEthereum_BigDecimal!]
  weights: [treasuryEthereum_BigDecimal!]
  weights_contains: [treasuryEthereum_BigDecimal!]
  weights_contains_nocase: [treasuryEthereum_BigDecimal!]
  weights_not: [treasuryEthereum_BigDecimal!]
  weights_not_contains: [treasuryEthereum_BigDecimal!]
  weights_not_contains_nocase: [treasuryEthereum_BigDecimal!]
}

enum treasuryEthereum_BalancerPoolSnapshot_orderBy {
  balances
  block
  decimals
  id
  pool
  poolToken
  tokens
  totalSupply
  weights
}

scalar treasuryEthereum_BigDecimal

input treasuryEthereum_BlockChangedFilter {
  number_gte: Int!
}

input treasuryEthereum_Block_height {
  hash: treasuryEthereum_Bytes
  number: Int
  number_gte: Int
}

type treasuryEthereum_BondDiscount {
  dai_discount: treasuryEthereum_BigDecimal!
  eth_discount: treasuryEthereum_BigDecimal!
  frax_discount: treasuryEthereum_BigDecimal!
  id: ID!
  lusd_discount: treasuryEthereum_BigDecimal!
  ohmdai_discount: treasuryEthereum_BigDecimal!
  ohmfrax_discount: treasuryEthereum_BigDecimal!
  ohmlusd_discount: treasuryEthereum_BigDecimal!
  timestamp: BigInt!
  _join: Query!
}

input treasuryEthereum_BondDiscount_filter {
  """Filter for the block changed event."""
  _change_block: treasuryEthereum_BlockChangedFilter
  and: [treasuryEthereum_BondDiscount_filter]
  dai_discount: treasuryEthereum_BigDecimal
  dai_discount_gt: treasuryEthereum_BigDecimal
  dai_discount_gte: treasuryEthereum_BigDecimal
  dai_discount_in: [treasuryEthereum_BigDecimal!]
  dai_discount_lt: treasuryEthereum_BigDecimal
  dai_discount_lte: treasuryEthereum_BigDecimal
  dai_discount_not: treasuryEthereum_BigDecimal
  dai_discount_not_in: [treasuryEthereum_BigDecimal!]
  eth_discount: treasuryEthereum_BigDecimal
  eth_discount_gt: treasuryEthereum_BigDecimal
  eth_discount_gte: treasuryEthereum_BigDecimal
  eth_discount_in: [treasuryEthereum_BigDecimal!]
  eth_discount_lt: treasuryEthereum_BigDecimal
  eth_discount_lte: treasuryEthereum_BigDecimal
  eth_discount_not: treasuryEthereum_BigDecimal
  eth_discount_not_in: [treasuryEthereum_BigDecimal!]
  frax_discount: treasuryEthereum_BigDecimal
  frax_discount_gt: treasuryEthereum_BigDecimal
  frax_discount_gte: treasuryEthereum_BigDecimal
  frax_discount_in: [treasuryEthereum_BigDecimal!]
  frax_discount_lt: treasuryEthereum_BigDecimal
  frax_discount_lte: treasuryEthereum_BigDecimal
  frax_discount_not: treasuryEthereum_BigDecimal
  frax_discount_not_in: [treasuryEthereum_BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lusd_discount: treasuryEthereum_BigDecimal
  lusd_discount_gt: treasuryEthereum_BigDecimal
  lusd_discount_gte: treasuryEthereum_BigDecimal
  lusd_discount_in: [treasuryEthereum_BigDecimal!]
  lusd_discount_lt: treasuryEthereum_BigDecimal
  lusd_discount_lte: treasuryEthereum_BigDecimal
  lusd_discount_not: treasuryEthereum_BigDecimal
  lusd_discount_not_in: [treasuryEthereum_BigDecimal!]
  ohmdai_discount: treasuryEthereum_BigDecimal
  ohmdai_discount_gt: treasuryEthereum_BigDecimal
  ohmdai_discount_gte: treasuryEthereum_BigDecimal
  ohmdai_discount_in: [treasuryEthereum_BigDecimal!]
  ohmdai_discount_lt: treasuryEthereum_BigDecimal
  ohmdai_discount_lte: treasuryEthereum_BigDecimal
  ohmdai_discount_not: treasuryEthereum_BigDecimal
  ohmdai_discount_not_in: [treasuryEthereum_BigDecimal!]
  ohmfrax_discount: treasuryEthereum_BigDecimal
  ohmfrax_discount_gt: treasuryEthereum_BigDecimal
  ohmfrax_discount_gte: treasuryEthereum_BigDecimal
  ohmfrax_discount_in: [treasuryEthereum_BigDecimal!]
  ohmfrax_discount_lt: treasuryEthereum_BigDecimal
  ohmfrax_discount_lte: treasuryEthereum_BigDecimal
  ohmfrax_discount_not: treasuryEthereum_BigDecimal
  ohmfrax_discount_not_in: [treasuryEthereum_BigDecimal!]
  ohmlusd_discount: treasuryEthereum_BigDecimal
  ohmlusd_discount_gt: treasuryEthereum_BigDecimal
  ohmlusd_discount_gte: treasuryEthereum_BigDecimal
  ohmlusd_discount_in: [treasuryEthereum_BigDecimal!]
  ohmlusd_discount_lt: treasuryEthereum_BigDecimal
  ohmlusd_discount_lte: treasuryEthereum_BigDecimal
  ohmlusd_discount_not: treasuryEthereum_BigDecimal
  ohmlusd_discount_not_in: [treasuryEthereum_BigDecimal!]
  or: [treasuryEthereum_BondDiscount_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
}

enum treasuryEthereum_BondDiscount_orderBy {
  dai_discount
  eth_discount
  frax_discount
  id
  lusd_discount
  ohmdai_discount
  ohmfrax_discount
  ohmlusd_discount
  timestamp
}

scalar treasuryEthereum_Bytes

type treasuryEthereum_ConvexRewardPoolSnapshot {
  address: treasuryEthereum_Bytes!
  block: BigInt!
  id: ID!
  stakingToken: treasuryEthereum_Bytes!
  _join: Query!
}

input treasuryEthereum_ConvexRewardPoolSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryEthereum_BlockChangedFilter
  address: treasuryEthereum_Bytes
  address_contains: treasuryEthereum_Bytes
  address_gt: treasuryEthereum_Bytes
  address_gte: treasuryEthereum_Bytes
  address_in: [treasuryEthereum_Bytes!]
  address_lt: treasuryEthereum_Bytes
  address_lte: treasuryEthereum_Bytes
  address_not: treasuryEthereum_Bytes
  address_not_contains: treasuryEthereum_Bytes
  address_not_in: [treasuryEthereum_Bytes!]
  and: [treasuryEthereum_ConvexRewardPoolSnapshot_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryEthereum_ConvexRewardPoolSnapshot_filter]
  stakingToken: treasuryEthereum_Bytes
  stakingToken_contains: treasuryEthereum_Bytes
  stakingToken_gt: treasuryEthereum_Bytes
  stakingToken_gte: treasuryEthereum_Bytes
  stakingToken_in: [treasuryEthereum_Bytes!]
  stakingToken_lt: treasuryEthereum_Bytes
  stakingToken_lte: treasuryEthereum_Bytes
  stakingToken_not: treasuryEthereum_Bytes
  stakingToken_not_contains: treasuryEthereum_Bytes
  stakingToken_not_in: [treasuryEthereum_Bytes!]
}

enum treasuryEthereum_ConvexRewardPoolSnapshot_orderBy {
  address
  block
  id
  stakingToken
}

type treasuryEthereum_DailyBond {
  amount: treasuryEthereum_BigDecimal!
  id: ID!
  timestamp: BigInt!
  token: treasuryEthereum_Token!
  value: treasuryEthereum_BigDecimal!
  _join: Query!
}

input treasuryEthereum_DailyBond_filter {
  """Filter for the block changed event."""
  _change_block: treasuryEthereum_BlockChangedFilter
  amount: treasuryEthereum_BigDecimal
  amount_gt: treasuryEthereum_BigDecimal
  amount_gte: treasuryEthereum_BigDecimal
  amount_in: [treasuryEthereum_BigDecimal!]
  amount_lt: treasuryEthereum_BigDecimal
  amount_lte: treasuryEthereum_BigDecimal
  amount_not: treasuryEthereum_BigDecimal
  amount_not_in: [treasuryEthereum_BigDecimal!]
  and: [treasuryEthereum_DailyBond_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryEthereum_DailyBond_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  token: String
  token_: treasuryEthereum_Token_filter
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  value: treasuryEthereum_BigDecimal
  value_gt: treasuryEthereum_BigDecimal
  value_gte: treasuryEthereum_BigDecimal
  value_in: [treasuryEthereum_BigDecimal!]
  value_lt: treasuryEthereum_BigDecimal
  value_lte: treasuryEthereum_BigDecimal
  value_not: treasuryEthereum_BigDecimal
  value_not_in: [treasuryEthereum_BigDecimal!]
}

enum treasuryEthereum_DailyBond_orderBy {
  amount
  id
  timestamp
  token
  token__id
  value
}

type treasuryEthereum_DailyStakingReward {
  amount: treasuryEthereum_BigDecimal!
  id: ID!
  timestamp: BigInt!
  value: treasuryEthereum_BigDecimal!
  _join: Query!
}

input treasuryEthereum_DailyStakingReward_filter {
  """Filter for the block changed event."""
  _change_block: treasuryEthereum_BlockChangedFilter
  amount: treasuryEthereum_BigDecimal
  amount_gt: treasuryEthereum_BigDecimal
  amount_gte: treasuryEthereum_BigDecimal
  amount_in: [treasuryEthereum_BigDecimal!]
  amount_lt: treasuryEthereum_BigDecimal
  amount_lte: treasuryEthereum_BigDecimal
  amount_not: treasuryEthereum_BigDecimal
  amount_not_in: [treasuryEthereum_BigDecimal!]
  and: [treasuryEthereum_DailyStakingReward_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryEthereum_DailyStakingReward_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  value: treasuryEthereum_BigDecimal
  value_gt: treasuryEthereum_BigDecimal
  value_gte: treasuryEthereum_BigDecimal
  value_in: [treasuryEthereum_BigDecimal!]
  value_lt: treasuryEthereum_BigDecimal
  value_lte: treasuryEthereum_BigDecimal
  value_not: treasuryEthereum_BigDecimal
  value_not_in: [treasuryEthereum_BigDecimal!]
}

enum treasuryEthereum_DailyStakingReward_orderBy {
  amount
  id
  timestamp
  value
}

type treasuryEthereum_ERC20TokenSnapshot {
  address: treasuryEthereum_Bytes!
  decimals: Int!
  id: ID!
  totalSupply: treasuryEthereum_BigDecimal
  _join: Query!
}

input treasuryEthereum_ERC20TokenSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryEthereum_BlockChangedFilter
  address: treasuryEthereum_Bytes
  address_contains: treasuryEthereum_Bytes
  address_gt: treasuryEthereum_Bytes
  address_gte: treasuryEthereum_Bytes
  address_in: [treasuryEthereum_Bytes!]
  address_lt: treasuryEthereum_Bytes
  address_lte: treasuryEthereum_Bytes
  address_not: treasuryEthereum_Bytes
  address_not_contains: treasuryEthereum_Bytes
  address_not_in: [treasuryEthereum_Bytes!]
  and: [treasuryEthereum_ERC20TokenSnapshot_filter]
  decimals: Int
  decimals_gt: Int
  decimals_gte: Int
  decimals_in: [Int!]
  decimals_lt: Int
  decimals_lte: Int
  decimals_not: Int
  decimals_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryEthereum_ERC20TokenSnapshot_filter]
  totalSupply: treasuryEthereum_BigDecimal
  totalSupply_gt: treasuryEthereum_BigDecimal
  totalSupply_gte: treasuryEthereum_BigDecimal
  totalSupply_in: [treasuryEthereum_BigDecimal!]
  totalSupply_lt: treasuryEthereum_BigDecimal
  totalSupply_lte: treasuryEthereum_BigDecimal
  totalSupply_not: treasuryEthereum_BigDecimal
  totalSupply_not_in: [treasuryEthereum_BigDecimal!]
}

enum treasuryEthereum_ERC20TokenSnapshot_orderBy {
  address
  decimals
  id
  totalSupply
}

type treasuryEthereum_GnosisAuction {
  auctionCloseTimestamp: BigInt
  auctionOpenTimestamp: BigInt!
  bidQuantity: treasuryEthereum_BigDecimal
  id: ID!
  payoutCapacity: treasuryEthereum_BigDecimal!
  termSeconds: BigInt!
  _join: Query!
}

type treasuryEthereum_GnosisAuctionRoot {
  id: ID!
  markets: [BigInt!]!
  _join: Query!
}

input treasuryEthereum_GnosisAuctionRoot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryEthereum_BlockChangedFilter
  and: [treasuryEthereum_GnosisAuctionRoot_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  markets: [BigInt!]
  markets_contains: [BigInt!]
  markets_contains_nocase: [BigInt!]
  markets_not: [BigInt!]
  markets_not_contains: [BigInt!]
  markets_not_contains_nocase: [BigInt!]
  or: [treasuryEthereum_GnosisAuctionRoot_filter]
}

enum treasuryEthereum_GnosisAuctionRoot_orderBy {
  id
  markets
}

input treasuryEthereum_GnosisAuction_filter {
  """Filter for the block changed event."""
  _change_block: treasuryEthereum_BlockChangedFilter
  and: [treasuryEthereum_GnosisAuction_filter]
  auctionCloseTimestamp: BigInt
  auctionCloseTimestamp_gt: BigInt
  auctionCloseTimestamp_gte: BigInt
  auctionCloseTimestamp_in: [BigInt!]
  auctionCloseTimestamp_lt: BigInt
  auctionCloseTimestamp_lte: BigInt
  auctionCloseTimestamp_not: BigInt
  auctionCloseTimestamp_not_in: [BigInt!]
  auctionOpenTimestamp: BigInt
  auctionOpenTimestamp_gt: BigInt
  auctionOpenTimestamp_gte: BigInt
  auctionOpenTimestamp_in: [BigInt!]
  auctionOpenTimestamp_lt: BigInt
  auctionOpenTimestamp_lte: BigInt
  auctionOpenTimestamp_not: BigInt
  auctionOpenTimestamp_not_in: [BigInt!]
  bidQuantity: treasuryEthereum_BigDecimal
  bidQuantity_gt: treasuryEthereum_BigDecimal
  bidQuantity_gte: treasuryEthereum_BigDecimal
  bidQuantity_in: [treasuryEthereum_BigDecimal!]
  bidQuantity_lt: treasuryEthereum_BigDecimal
  bidQuantity_lte: treasuryEthereum_BigDecimal
  bidQuantity_not: treasuryEthereum_BigDecimal
  bidQuantity_not_in: [treasuryEthereum_BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryEthereum_GnosisAuction_filter]
  payoutCapacity: treasuryEthereum_BigDecimal
  payoutCapacity_gt: treasuryEthereum_BigDecimal
  payoutCapacity_gte: treasuryEthereum_BigDecimal
  payoutCapacity_in: [treasuryEthereum_BigDecimal!]
  payoutCapacity_lt: treasuryEthereum_BigDecimal
  payoutCapacity_lte: treasuryEthereum_BigDecimal
  payoutCapacity_not: treasuryEthereum_BigDecimal
  payoutCapacity_not_in: [treasuryEthereum_BigDecimal!]
  termSeconds: BigInt
  termSeconds_gt: BigInt
  termSeconds_gte: BigInt
  termSeconds_in: [BigInt!]
  termSeconds_lt: BigInt
  termSeconds_lte: BigInt
  termSeconds_not: BigInt
  termSeconds_not_in: [BigInt!]
}

enum treasuryEthereum_GnosisAuction_orderBy {
  auctionCloseTimestamp
  auctionOpenTimestamp
  bidQuantity
  id
  payoutCapacity
  termSeconds
}

"""Defines the order direction, either ascending or descending"""
enum treasuryEthereum_OrderDirection {
  asc
  desc
}

type treasuryEthereum_PoolSnapshot {
  balances: [treasuryEthereum_BigDecimal!]!
  block: BigInt!
  decimals: Int!
  id: ID!
  pool: treasuryEthereum_Bytes!
  poolToken: treasuryEthereum_Bytes
  tokens: [treasuryEthereum_Bytes!]!
  totalSupply: treasuryEthereum_BigDecimal!
  weights: [treasuryEthereum_BigDecimal!]
  _join: Query!
}

input treasuryEthereum_PoolSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryEthereum_BlockChangedFilter
  and: [treasuryEthereum_PoolSnapshot_filter]
  balances: [treasuryEthereum_BigDecimal!]
  balances_contains: [treasuryEthereum_BigDecimal!]
  balances_contains_nocase: [treasuryEthereum_BigDecimal!]
  balances_not: [treasuryEthereum_BigDecimal!]
  balances_not_contains: [treasuryEthereum_BigDecimal!]
  balances_not_contains_nocase: [treasuryEthereum_BigDecimal!]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  decimals: Int
  decimals_gt: Int
  decimals_gte: Int
  decimals_in: [Int!]
  decimals_lt: Int
  decimals_lte: Int
  decimals_not: Int
  decimals_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryEthereum_PoolSnapshot_filter]
  pool: treasuryEthereum_Bytes
  poolToken: treasuryEthereum_Bytes
  poolToken_contains: treasuryEthereum_Bytes
  poolToken_gt: treasuryEthereum_Bytes
  poolToken_gte: treasuryEthereum_Bytes
  poolToken_in: [treasuryEthereum_Bytes!]
  poolToken_lt: treasuryEthereum_Bytes
  poolToken_lte: treasuryEthereum_Bytes
  poolToken_not: treasuryEthereum_Bytes
  poolToken_not_contains: treasuryEthereum_Bytes
  poolToken_not_in: [treasuryEthereum_Bytes!]
  pool_contains: treasuryEthereum_Bytes
  pool_gt: treasuryEthereum_Bytes
  pool_gte: treasuryEthereum_Bytes
  pool_in: [treasuryEthereum_Bytes!]
  pool_lt: treasuryEthereum_Bytes
  pool_lte: treasuryEthereum_Bytes
  pool_not: treasuryEthereum_Bytes
  pool_not_contains: treasuryEthereum_Bytes
  pool_not_in: [treasuryEthereum_Bytes!]
  tokens: [treasuryEthereum_Bytes!]
  tokens_contains: [treasuryEthereum_Bytes!]
  tokens_contains_nocase: [treasuryEthereum_Bytes!]
  tokens_not: [treasuryEthereum_Bytes!]
  tokens_not_contains: [treasuryEthereum_Bytes!]
  tokens_not_contains_nocase: [treasuryEthereum_Bytes!]
  totalSupply: treasuryEthereum_BigDecimal
  totalSupply_gt: treasuryEthereum_BigDecimal
  totalSupply_gte: treasuryEthereum_BigDecimal
  totalSupply_in: [treasuryEthereum_BigDecimal!]
  totalSupply_lt: treasuryEthereum_BigDecimal
  totalSupply_lte: treasuryEthereum_BigDecimal
  totalSupply_not: treasuryEthereum_BigDecimal
  totalSupply_not_in: [treasuryEthereum_BigDecimal!]
  weights: [treasuryEthereum_BigDecimal!]
  weights_contains: [treasuryEthereum_BigDecimal!]
  weights_contains_nocase: [treasuryEthereum_BigDecimal!]
  weights_not: [treasuryEthereum_BigDecimal!]
  weights_not_contains: [treasuryEthereum_BigDecimal!]
  weights_not_contains_nocase: [treasuryEthereum_BigDecimal!]
}

enum treasuryEthereum_PoolSnapshot_orderBy {
  balances
  block
  decimals
  id
  pool
  poolToken
  tokens
  totalSupply
  weights
}

type treasuryEthereum_PriceSnapshot {
  block: BigInt!
  date: String!
  id: ID!
  priceGOhm: treasuryEthereum_BigDecimal!
  priceOhm: treasuryEthereum_BigDecimal!
  timestamp: BigInt!
  _join: Query!
}

input treasuryEthereum_PriceSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryEthereum_BlockChangedFilter
  and: [treasuryEthereum_PriceSnapshot_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  date: String
  date_contains: String
  date_contains_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_gt: String
  date_gte: String
  date_in: [String!]
  date_lt: String
  date_lte: String
  date_not: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  date_not_in: [String!]
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryEthereum_PriceSnapshot_filter]
  priceGOhm: treasuryEthereum_BigDecimal
  priceGOhm_gt: treasuryEthereum_BigDecimal
  priceGOhm_gte: treasuryEthereum_BigDecimal
  priceGOhm_in: [treasuryEthereum_BigDecimal!]
  priceGOhm_lt: treasuryEthereum_BigDecimal
  priceGOhm_lte: treasuryEthereum_BigDecimal
  priceGOhm_not: treasuryEthereum_BigDecimal
  priceGOhm_not_in: [treasuryEthereum_BigDecimal!]
  priceOhm: treasuryEthereum_BigDecimal
  priceOhm_gt: treasuryEthereum_BigDecimal
  priceOhm_gte: treasuryEthereum_BigDecimal
  priceOhm_in: [treasuryEthereum_BigDecimal!]
  priceOhm_lt: treasuryEthereum_BigDecimal
  priceOhm_lte: treasuryEthereum_BigDecimal
  priceOhm_not: treasuryEthereum_BigDecimal
  priceOhm_not_in: [treasuryEthereum_BigDecimal!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
}

enum treasuryEthereum_PriceSnapshot_orderBy {
  block
  date
  id
  priceGOhm
  priceOhm
  timestamp
}

type treasuryEthereum_ProtocolMetric {
  block: BigInt!
  currentAPY: treasuryEthereum_BigDecimal!
  currentIndex: treasuryEthereum_BigDecimal!
  date: String!
  gOhmPrice: treasuryEthereum_BigDecimal!
  gOhmSyntheticSupply: treasuryEthereum_BigDecimal
  gOhmTotalSupply: treasuryEthereum_BigDecimal!
  id: ID!
  marketCap: treasuryEthereum_BigDecimal
  nextDistributedOhm: treasuryEthereum_BigDecimal!
  nextEpochRebase: treasuryEthereum_BigDecimal!
  ohmCirculatingSupply: treasuryEthereum_BigDecimal
  ohmFloatingSupply: treasuryEthereum_BigDecimal
  ohmPrice: treasuryEthereum_BigDecimal!
  ohmTotalSupply: treasuryEthereum_BigDecimal!
  sOhmCirculatingSupply: treasuryEthereum_BigDecimal!
  timestamp: BigInt!
  totalValueLocked: treasuryEthereum_BigDecimal!
  treasuryLiquidBacking: treasuryEthereum_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic: treasuryEthereum_BigDecimal
  treasuryLiquidBackingPerOhmFloating: treasuryEthereum_BigDecimal
  treasuryMarketValue: treasuryEthereum_BigDecimal
  _join: Query!
}

input treasuryEthereum_ProtocolMetric_filter {
  """Filter for the block changed event."""
  _change_block: treasuryEthereum_BlockChangedFilter
  and: [treasuryEthereum_ProtocolMetric_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  currentAPY: treasuryEthereum_BigDecimal
  currentAPY_gt: treasuryEthereum_BigDecimal
  currentAPY_gte: treasuryEthereum_BigDecimal
  currentAPY_in: [treasuryEthereum_BigDecimal!]
  currentAPY_lt: treasuryEthereum_BigDecimal
  currentAPY_lte: treasuryEthereum_BigDecimal
  currentAPY_not: treasuryEthereum_BigDecimal
  currentAPY_not_in: [treasuryEthereum_BigDecimal!]
  currentIndex: treasuryEthereum_BigDecimal
  currentIndex_gt: treasuryEthereum_BigDecimal
  currentIndex_gte: treasuryEthereum_BigDecimal
  currentIndex_in: [treasuryEthereum_BigDecimal!]
  currentIndex_lt: treasuryEthereum_BigDecimal
  currentIndex_lte: treasuryEthereum_BigDecimal
  currentIndex_not: treasuryEthereum_BigDecimal
  currentIndex_not_in: [treasuryEthereum_BigDecimal!]
  date: String
  date_contains: String
  date_contains_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_gt: String
  date_gte: String
  date_in: [String!]
  date_lt: String
  date_lte: String
  date_not: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  date_not_in: [String!]
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  gOhmPrice: treasuryEthereum_BigDecimal
  gOhmPrice_gt: treasuryEthereum_BigDecimal
  gOhmPrice_gte: treasuryEthereum_BigDecimal
  gOhmPrice_in: [treasuryEthereum_BigDecimal!]
  gOhmPrice_lt: treasuryEthereum_BigDecimal
  gOhmPrice_lte: treasuryEthereum_BigDecimal
  gOhmPrice_not: treasuryEthereum_BigDecimal
  gOhmPrice_not_in: [treasuryEthereum_BigDecimal!]
  gOhmSyntheticSupply: treasuryEthereum_BigDecimal
  gOhmSyntheticSupply_gt: treasuryEthereum_BigDecimal
  gOhmSyntheticSupply_gte: treasuryEthereum_BigDecimal
  gOhmSyntheticSupply_in: [treasuryEthereum_BigDecimal!]
  gOhmSyntheticSupply_lt: treasuryEthereum_BigDecimal
  gOhmSyntheticSupply_lte: treasuryEthereum_BigDecimal
  gOhmSyntheticSupply_not: treasuryEthereum_BigDecimal
  gOhmSyntheticSupply_not_in: [treasuryEthereum_BigDecimal!]
  gOhmTotalSupply: treasuryEthereum_BigDecimal
  gOhmTotalSupply_gt: treasuryEthereum_BigDecimal
  gOhmTotalSupply_gte: treasuryEthereum_BigDecimal
  gOhmTotalSupply_in: [treasuryEthereum_BigDecimal!]
  gOhmTotalSupply_lt: treasuryEthereum_BigDecimal
  gOhmTotalSupply_lte: treasuryEthereum_BigDecimal
  gOhmTotalSupply_not: treasuryEthereum_BigDecimal
  gOhmTotalSupply_not_in: [treasuryEthereum_BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  marketCap: treasuryEthereum_BigDecimal
  marketCap_gt: treasuryEthereum_BigDecimal
  marketCap_gte: treasuryEthereum_BigDecimal
  marketCap_in: [treasuryEthereum_BigDecimal!]
  marketCap_lt: treasuryEthereum_BigDecimal
  marketCap_lte: treasuryEthereum_BigDecimal
  marketCap_not: treasuryEthereum_BigDecimal
  marketCap_not_in: [treasuryEthereum_BigDecimal!]
  nextDistributedOhm: treasuryEthereum_BigDecimal
  nextDistributedOhm_gt: treasuryEthereum_BigDecimal
  nextDistributedOhm_gte: treasuryEthereum_BigDecimal
  nextDistributedOhm_in: [treasuryEthereum_BigDecimal!]
  nextDistributedOhm_lt: treasuryEthereum_BigDecimal
  nextDistributedOhm_lte: treasuryEthereum_BigDecimal
  nextDistributedOhm_not: treasuryEthereum_BigDecimal
  nextDistributedOhm_not_in: [treasuryEthereum_BigDecimal!]
  nextEpochRebase: treasuryEthereum_BigDecimal
  nextEpochRebase_gt: treasuryEthereum_BigDecimal
  nextEpochRebase_gte: treasuryEthereum_BigDecimal
  nextEpochRebase_in: [treasuryEthereum_BigDecimal!]
  nextEpochRebase_lt: treasuryEthereum_BigDecimal
  nextEpochRebase_lte: treasuryEthereum_BigDecimal
  nextEpochRebase_not: treasuryEthereum_BigDecimal
  nextEpochRebase_not_in: [treasuryEthereum_BigDecimal!]
  ohmCirculatingSupply: treasuryEthereum_BigDecimal
  ohmCirculatingSupply_gt: treasuryEthereum_BigDecimal
  ohmCirculatingSupply_gte: treasuryEthereum_BigDecimal
  ohmCirculatingSupply_in: [treasuryEthereum_BigDecimal!]
  ohmCirculatingSupply_lt: treasuryEthereum_BigDecimal
  ohmCirculatingSupply_lte: treasuryEthereum_BigDecimal
  ohmCirculatingSupply_not: treasuryEthereum_BigDecimal
  ohmCirculatingSupply_not_in: [treasuryEthereum_BigDecimal!]
  ohmFloatingSupply: treasuryEthereum_BigDecimal
  ohmFloatingSupply_gt: treasuryEthereum_BigDecimal
  ohmFloatingSupply_gte: treasuryEthereum_BigDecimal
  ohmFloatingSupply_in: [treasuryEthereum_BigDecimal!]
  ohmFloatingSupply_lt: treasuryEthereum_BigDecimal
  ohmFloatingSupply_lte: treasuryEthereum_BigDecimal
  ohmFloatingSupply_not: treasuryEthereum_BigDecimal
  ohmFloatingSupply_not_in: [treasuryEthereum_BigDecimal!]
  ohmPrice: treasuryEthereum_BigDecimal
  ohmPrice_gt: treasuryEthereum_BigDecimal
  ohmPrice_gte: treasuryEthereum_BigDecimal
  ohmPrice_in: [treasuryEthereum_BigDecimal!]
  ohmPrice_lt: treasuryEthereum_BigDecimal
  ohmPrice_lte: treasuryEthereum_BigDecimal
  ohmPrice_not: treasuryEthereum_BigDecimal
  ohmPrice_not_in: [treasuryEthereum_BigDecimal!]
  ohmTotalSupply: treasuryEthereum_BigDecimal
  ohmTotalSupply_gt: treasuryEthereum_BigDecimal
  ohmTotalSupply_gte: treasuryEthereum_BigDecimal
  ohmTotalSupply_in: [treasuryEthereum_BigDecimal!]
  ohmTotalSupply_lt: treasuryEthereum_BigDecimal
  ohmTotalSupply_lte: treasuryEthereum_BigDecimal
  ohmTotalSupply_not: treasuryEthereum_BigDecimal
  ohmTotalSupply_not_in: [treasuryEthereum_BigDecimal!]
  or: [treasuryEthereum_ProtocolMetric_filter]
  sOhmCirculatingSupply: treasuryEthereum_BigDecimal
  sOhmCirculatingSupply_gt: treasuryEthereum_BigDecimal
  sOhmCirculatingSupply_gte: treasuryEthereum_BigDecimal
  sOhmCirculatingSupply_in: [treasuryEthereum_BigDecimal!]
  sOhmCirculatingSupply_lt: treasuryEthereum_BigDecimal
  sOhmCirculatingSupply_lte: treasuryEthereum_BigDecimal
  sOhmCirculatingSupply_not: treasuryEthereum_BigDecimal
  sOhmCirculatingSupply_not_in: [treasuryEthereum_BigDecimal!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  totalValueLocked: treasuryEthereum_BigDecimal
  totalValueLocked_gt: treasuryEthereum_BigDecimal
  totalValueLocked_gte: treasuryEthereum_BigDecimal
  totalValueLocked_in: [treasuryEthereum_BigDecimal!]
  totalValueLocked_lt: treasuryEthereum_BigDecimal
  totalValueLocked_lte: treasuryEthereum_BigDecimal
  totalValueLocked_not: treasuryEthereum_BigDecimal
  totalValueLocked_not_in: [treasuryEthereum_BigDecimal!]
  treasuryLiquidBacking: treasuryEthereum_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic: treasuryEthereum_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_gt: treasuryEthereum_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_gte: treasuryEthereum_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_in: [treasuryEthereum_BigDecimal!]
  treasuryLiquidBackingPerGOhmSynthetic_lt: treasuryEthereum_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_lte: treasuryEthereum_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_not: treasuryEthereum_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_not_in: [treasuryEthereum_BigDecimal!]
  treasuryLiquidBackingPerOhmFloating: treasuryEthereum_BigDecimal
  treasuryLiquidBackingPerOhmFloating_gt: treasuryEthereum_BigDecimal
  treasuryLiquidBackingPerOhmFloating_gte: treasuryEthereum_BigDecimal
  treasuryLiquidBackingPerOhmFloating_in: [treasuryEthereum_BigDecimal!]
  treasuryLiquidBackingPerOhmFloating_lt: treasuryEthereum_BigDecimal
  treasuryLiquidBackingPerOhmFloating_lte: treasuryEthereum_BigDecimal
  treasuryLiquidBackingPerOhmFloating_not: treasuryEthereum_BigDecimal
  treasuryLiquidBackingPerOhmFloating_not_in: [treasuryEthereum_BigDecimal!]
  treasuryLiquidBacking_gt: treasuryEthereum_BigDecimal
  treasuryLiquidBacking_gte: treasuryEthereum_BigDecimal
  treasuryLiquidBacking_in: [treasuryEthereum_BigDecimal!]
  treasuryLiquidBacking_lt: treasuryEthereum_BigDecimal
  treasuryLiquidBacking_lte: treasuryEthereum_BigDecimal
  treasuryLiquidBacking_not: treasuryEthereum_BigDecimal
  treasuryLiquidBacking_not_in: [treasuryEthereum_BigDecimal!]
  treasuryMarketValue: treasuryEthereum_BigDecimal
  treasuryMarketValue_gt: treasuryEthereum_BigDecimal
  treasuryMarketValue_gte: treasuryEthereum_BigDecimal
  treasuryMarketValue_in: [treasuryEthereum_BigDecimal!]
  treasuryMarketValue_lt: treasuryEthereum_BigDecimal
  treasuryMarketValue_lte: treasuryEthereum_BigDecimal
  treasuryMarketValue_not: treasuryEthereum_BigDecimal
  treasuryMarketValue_not_in: [treasuryEthereum_BigDecimal!]
}

enum treasuryEthereum_ProtocolMetric_orderBy {
  block
  currentAPY
  currentIndex
  date
  gOhmPrice
  gOhmSyntheticSupply
  gOhmTotalSupply
  id
  marketCap
  nextDistributedOhm
  nextEpochRebase
  ohmCirculatingSupply
  ohmFloatingSupply
  ohmPrice
  ohmTotalSupply
  sOhmCirculatingSupply
  timestamp
  totalValueLocked
  treasuryLiquidBacking
  treasuryLiquidBackingPerGOhmSynthetic
  treasuryLiquidBackingPerOhmFloating
  treasuryMarketValue
}

type treasuryEthereum_Rebase {
  amount: treasuryEthereum_BigDecimal!
  contract: String!
  id: ID!
  percentage: treasuryEthereum_BigDecimal!
  stakedOhms: treasuryEthereum_BigDecimal!
  timestamp: BigInt!
  value: treasuryEthereum_BigDecimal!
  _join: Query!
}

input treasuryEthereum_Rebase_filter {
  """Filter for the block changed event."""
  _change_block: treasuryEthereum_BlockChangedFilter
  amount: treasuryEthereum_BigDecimal
  amount_gt: treasuryEthereum_BigDecimal
  amount_gte: treasuryEthereum_BigDecimal
  amount_in: [treasuryEthereum_BigDecimal!]
  amount_lt: treasuryEthereum_BigDecimal
  amount_lte: treasuryEthereum_BigDecimal
  amount_not: treasuryEthereum_BigDecimal
  amount_not_in: [treasuryEthereum_BigDecimal!]
  and: [treasuryEthereum_Rebase_filter]
  contract: String
  contract_contains: String
  contract_contains_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_gt: String
  contract_gte: String
  contract_in: [String!]
  contract_lt: String
  contract_lte: String
  contract_not: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_not_in: [String!]
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryEthereum_Rebase_filter]
  percentage: treasuryEthereum_BigDecimal
  percentage_gt: treasuryEthereum_BigDecimal
  percentage_gte: treasuryEthereum_BigDecimal
  percentage_in: [treasuryEthereum_BigDecimal!]
  percentage_lt: treasuryEthereum_BigDecimal
  percentage_lte: treasuryEthereum_BigDecimal
  percentage_not: treasuryEthereum_BigDecimal
  percentage_not_in: [treasuryEthereum_BigDecimal!]
  stakedOhms: treasuryEthereum_BigDecimal
  stakedOhms_gt: treasuryEthereum_BigDecimal
  stakedOhms_gte: treasuryEthereum_BigDecimal
  stakedOhms_in: [treasuryEthereum_BigDecimal!]
  stakedOhms_lt: treasuryEthereum_BigDecimal
  stakedOhms_lte: treasuryEthereum_BigDecimal
  stakedOhms_not: treasuryEthereum_BigDecimal
  stakedOhms_not_in: [treasuryEthereum_BigDecimal!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  value: treasuryEthereum_BigDecimal
  value_gt: treasuryEthereum_BigDecimal
  value_gte: treasuryEthereum_BigDecimal
  value_in: [treasuryEthereum_BigDecimal!]
  value_lt: treasuryEthereum_BigDecimal
  value_lte: treasuryEthereum_BigDecimal
  value_not: treasuryEthereum_BigDecimal
  value_not_in: [treasuryEthereum_BigDecimal!]
}

enum treasuryEthereum_Rebase_orderBy {
  amount
  contract
  id
  percentage
  stakedOhms
  timestamp
  value
}

type treasuryEthereum_StakingPoolSnapshot {
  block: BigInt!
  contractAddress: treasuryEthereum_Bytes!
  id: ID!
  stakingToken: treasuryEthereum_Bytes
  _join: Query!
}

input treasuryEthereum_StakingPoolSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryEthereum_BlockChangedFilter
  and: [treasuryEthereum_StakingPoolSnapshot_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  contractAddress: treasuryEthereum_Bytes
  contractAddress_contains: treasuryEthereum_Bytes
  contractAddress_gt: treasuryEthereum_Bytes
  contractAddress_gte: treasuryEthereum_Bytes
  contractAddress_in: [treasuryEthereum_Bytes!]
  contractAddress_lt: treasuryEthereum_Bytes
  contractAddress_lte: treasuryEthereum_Bytes
  contractAddress_not: treasuryEthereum_Bytes
  contractAddress_not_contains: treasuryEthereum_Bytes
  contractAddress_not_in: [treasuryEthereum_Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryEthereum_StakingPoolSnapshot_filter]
  stakingToken: treasuryEthereum_Bytes
  stakingToken_contains: treasuryEthereum_Bytes
  stakingToken_gt: treasuryEthereum_Bytes
  stakingToken_gte: treasuryEthereum_Bytes
  stakingToken_in: [treasuryEthereum_Bytes!]
  stakingToken_lt: treasuryEthereum_Bytes
  stakingToken_lte: treasuryEthereum_Bytes
  stakingToken_not: treasuryEthereum_Bytes
  stakingToken_not_contains: treasuryEthereum_Bytes
  stakingToken_not_in: [treasuryEthereum_Bytes!]
}

enum treasuryEthereum_StakingPoolSnapshot_orderBy {
  block
  contractAddress
  id
  stakingToken
}

type treasuryEthereum_Token {
  id: ID!
  _join: Query!
}

type treasuryEthereum_TokenPriceSnapshot {
  block: BigInt!
  id: ID!
  price: treasuryEthereum_BigDecimal!
  token: treasuryEthereum_Bytes!
  _join: Query!
}

input treasuryEthereum_TokenPriceSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryEthereum_BlockChangedFilter
  and: [treasuryEthereum_TokenPriceSnapshot_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryEthereum_TokenPriceSnapshot_filter]
  price: treasuryEthereum_BigDecimal
  price_gt: treasuryEthereum_BigDecimal
  price_gte: treasuryEthereum_BigDecimal
  price_in: [treasuryEthereum_BigDecimal!]
  price_lt: treasuryEthereum_BigDecimal
  price_lte: treasuryEthereum_BigDecimal
  price_not: treasuryEthereum_BigDecimal
  price_not_in: [treasuryEthereum_BigDecimal!]
  token: treasuryEthereum_Bytes
  token_contains: treasuryEthereum_Bytes
  token_gt: treasuryEthereum_Bytes
  token_gte: treasuryEthereum_Bytes
  token_in: [treasuryEthereum_Bytes!]
  token_lt: treasuryEthereum_Bytes
  token_lte: treasuryEthereum_Bytes
  token_not: treasuryEthereum_Bytes
  token_not_contains: treasuryEthereum_Bytes
  token_not_in: [treasuryEthereum_Bytes!]
}

enum treasuryEthereum_TokenPriceSnapshot_orderBy {
  block
  id
  price
  token
}

type treasuryEthereum_TokenRecord {
  balance: treasuryEthereum_BigDecimal!
  block: BigInt!
  blockchain: String!
  category: String!
  date: String!
  id: ID!
  isBluechip: Boolean!
  isLiquid: Boolean!
  multiplier: treasuryEthereum_BigDecimal!
  rate: treasuryEthereum_BigDecimal!
  source: String!
  sourceAddress: String!
  timestamp: BigInt!
  token: String!
  tokenAddress: String!
  value: treasuryEthereum_BigDecimal!
  valueExcludingOhm: treasuryEthereum_BigDecimal!
  _join: Query!
}

input treasuryEthereum_TokenRecord_filter {
  """Filter for the block changed event."""
  _change_block: treasuryEthereum_BlockChangedFilter
  and: [treasuryEthereum_TokenRecord_filter]
  balance: treasuryEthereum_BigDecimal
  balance_gt: treasuryEthereum_BigDecimal
  balance_gte: treasuryEthereum_BigDecimal
  balance_in: [treasuryEthereum_BigDecimal!]
  balance_lt: treasuryEthereum_BigDecimal
  balance_lte: treasuryEthereum_BigDecimal
  balance_not: treasuryEthereum_BigDecimal
  balance_not_in: [treasuryEthereum_BigDecimal!]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  blockchain: String
  blockchain_contains: String
  blockchain_contains_nocase: String
  blockchain_ends_with: String
  blockchain_ends_with_nocase: String
  blockchain_gt: String
  blockchain_gte: String
  blockchain_in: [String!]
  blockchain_lt: String
  blockchain_lte: String
  blockchain_not: String
  blockchain_not_contains: String
  blockchain_not_contains_nocase: String
  blockchain_not_ends_with: String
  blockchain_not_ends_with_nocase: String
  blockchain_not_in: [String!]
  blockchain_not_starts_with: String
  blockchain_not_starts_with_nocase: String
  blockchain_starts_with: String
  blockchain_starts_with_nocase: String
  category: String
  category_contains: String
  category_contains_nocase: String
  category_ends_with: String
  category_ends_with_nocase: String
  category_gt: String
  category_gte: String
  category_in: [String!]
  category_lt: String
  category_lte: String
  category_not: String
  category_not_contains: String
  category_not_contains_nocase: String
  category_not_ends_with: String
  category_not_ends_with_nocase: String
  category_not_in: [String!]
  category_not_starts_with: String
  category_not_starts_with_nocase: String
  category_starts_with: String
  category_starts_with_nocase: String
  date: String
  date_contains: String
  date_contains_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_gt: String
  date_gte: String
  date_in: [String!]
  date_lt: String
  date_lte: String
  date_not: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  date_not_in: [String!]
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  isBluechip: Boolean
  isBluechip_in: [Boolean!]
  isBluechip_not: Boolean
  isBluechip_not_in: [Boolean!]
  isLiquid: Boolean
  isLiquid_in: [Boolean!]
  isLiquid_not: Boolean
  isLiquid_not_in: [Boolean!]
  multiplier: treasuryEthereum_BigDecimal
  multiplier_gt: treasuryEthereum_BigDecimal
  multiplier_gte: treasuryEthereum_BigDecimal
  multiplier_in: [treasuryEthereum_BigDecimal!]
  multiplier_lt: treasuryEthereum_BigDecimal
  multiplier_lte: treasuryEthereum_BigDecimal
  multiplier_not: treasuryEthereum_BigDecimal
  multiplier_not_in: [treasuryEthereum_BigDecimal!]
  or: [treasuryEthereum_TokenRecord_filter]
  rate: treasuryEthereum_BigDecimal
  rate_gt: treasuryEthereum_BigDecimal
  rate_gte: treasuryEthereum_BigDecimal
  rate_in: [treasuryEthereum_BigDecimal!]
  rate_lt: treasuryEthereum_BigDecimal
  rate_lte: treasuryEthereum_BigDecimal
  rate_not: treasuryEthereum_BigDecimal
  rate_not_in: [treasuryEthereum_BigDecimal!]
  source: String
  sourceAddress: String
  sourceAddress_contains: String
  sourceAddress_contains_nocase: String
  sourceAddress_ends_with: String
  sourceAddress_ends_with_nocase: String
  sourceAddress_gt: String
  sourceAddress_gte: String
  sourceAddress_in: [String!]
  sourceAddress_lt: String
  sourceAddress_lte: String
  sourceAddress_not: String
  sourceAddress_not_contains: String
  sourceAddress_not_contains_nocase: String
  sourceAddress_not_ends_with: String
  sourceAddress_not_ends_with_nocase: String
  sourceAddress_not_in: [String!]
  sourceAddress_not_starts_with: String
  sourceAddress_not_starts_with_nocase: String
  sourceAddress_starts_with: String
  sourceAddress_starts_with_nocase: String
  source_contains: String
  source_contains_nocase: String
  source_ends_with: String
  source_ends_with_nocase: String
  source_gt: String
  source_gte: String
  source_in: [String!]
  source_lt: String
  source_lte: String
  source_not: String
  source_not_contains: String
  source_not_contains_nocase: String
  source_not_ends_with: String
  source_not_ends_with_nocase: String
  source_not_in: [String!]
  source_not_starts_with: String
  source_not_starts_with_nocase: String
  source_starts_with: String
  source_starts_with_nocase: String
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  token: String
  tokenAddress: String
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_gt: String
  tokenAddress_gte: String
  tokenAddress_in: [String!]
  tokenAddress_lt: String
  tokenAddress_lte: String
  tokenAddress_not: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  tokenAddress_not_in: [String!]
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  value: treasuryEthereum_BigDecimal
  valueExcludingOhm: treasuryEthereum_BigDecimal
  valueExcludingOhm_gt: treasuryEthereum_BigDecimal
  valueExcludingOhm_gte: treasuryEthereum_BigDecimal
  valueExcludingOhm_in: [treasuryEthereum_BigDecimal!]
  valueExcludingOhm_lt: treasuryEthereum_BigDecimal
  valueExcludingOhm_lte: treasuryEthereum_BigDecimal
  valueExcludingOhm_not: treasuryEthereum_BigDecimal
  valueExcludingOhm_not_in: [treasuryEthereum_BigDecimal!]
  value_gt: treasuryEthereum_BigDecimal
  value_gte: treasuryEthereum_BigDecimal
  value_in: [treasuryEthereum_BigDecimal!]
  value_lt: treasuryEthereum_BigDecimal
  value_lte: treasuryEthereum_BigDecimal
  value_not: treasuryEthereum_BigDecimal
  value_not_in: [treasuryEthereum_BigDecimal!]
}

enum treasuryEthereum_TokenRecord_orderBy {
  balance
  block
  blockchain
  category
  date
  id
  isBluechip
  isLiquid
  multiplier
  rate
  source
  sourceAddress
  timestamp
  token
  tokenAddress
  value
  valueExcludingOhm
}

type treasuryEthereum_TokenSupply {
  balance: treasuryEthereum_BigDecimal!
  block: BigInt!
  date: String!
  id: ID!
  pool: String
  poolAddress: String
  source: String
  sourceAddress: String
  supplyBalance: treasuryEthereum_BigDecimal!
  timestamp: BigInt!
  token: String!
  tokenAddress: String!
  type: String!
  _join: Query!
}

input treasuryEthereum_TokenSupply_filter {
  """Filter for the block changed event."""
  _change_block: treasuryEthereum_BlockChangedFilter
  and: [treasuryEthereum_TokenSupply_filter]
  balance: treasuryEthereum_BigDecimal
  balance_gt: treasuryEthereum_BigDecimal
  balance_gte: treasuryEthereum_BigDecimal
  balance_in: [treasuryEthereum_BigDecimal!]
  balance_lt: treasuryEthereum_BigDecimal
  balance_lte: treasuryEthereum_BigDecimal
  balance_not: treasuryEthereum_BigDecimal
  balance_not_in: [treasuryEthereum_BigDecimal!]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  date: String
  date_contains: String
  date_contains_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_gt: String
  date_gte: String
  date_in: [String!]
  date_lt: String
  date_lte: String
  date_not: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  date_not_in: [String!]
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryEthereum_TokenSupply_filter]
  pool: String
  poolAddress: String
  poolAddress_contains: String
  poolAddress_contains_nocase: String
  poolAddress_ends_with: String
  poolAddress_ends_with_nocase: String
  poolAddress_gt: String
  poolAddress_gte: String
  poolAddress_in: [String!]
  poolAddress_lt: String
  poolAddress_lte: String
  poolAddress_not: String
  poolAddress_not_contains: String
  poolAddress_not_contains_nocase: String
  poolAddress_not_ends_with: String
  poolAddress_not_ends_with_nocase: String
  poolAddress_not_in: [String!]
  poolAddress_not_starts_with: String
  poolAddress_not_starts_with_nocase: String
  poolAddress_starts_with: String
  poolAddress_starts_with_nocase: String
  pool_contains: String
  pool_contains_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  source: String
  sourceAddress: String
  sourceAddress_contains: String
  sourceAddress_contains_nocase: String
  sourceAddress_ends_with: String
  sourceAddress_ends_with_nocase: String
  sourceAddress_gt: String
  sourceAddress_gte: String
  sourceAddress_in: [String!]
  sourceAddress_lt: String
  sourceAddress_lte: String
  sourceAddress_not: String
  sourceAddress_not_contains: String
  sourceAddress_not_contains_nocase: String
  sourceAddress_not_ends_with: String
  sourceAddress_not_ends_with_nocase: String
  sourceAddress_not_in: [String!]
  sourceAddress_not_starts_with: String
  sourceAddress_not_starts_with_nocase: String
  sourceAddress_starts_with: String
  sourceAddress_starts_with_nocase: String
  source_contains: String
  source_contains_nocase: String
  source_ends_with: String
  source_ends_with_nocase: String
  source_gt: String
  source_gte: String
  source_in: [String!]
  source_lt: String
  source_lte: String
  source_not: String
  source_not_contains: String
  source_not_contains_nocase: String
  source_not_ends_with: String
  source_not_ends_with_nocase: String
  source_not_in: [String!]
  source_not_starts_with: String
  source_not_starts_with_nocase: String
  source_starts_with: String
  source_starts_with_nocase: String
  supplyBalance: treasuryEthereum_BigDecimal
  supplyBalance_gt: treasuryEthereum_BigDecimal
  supplyBalance_gte: treasuryEthereum_BigDecimal
  supplyBalance_in: [treasuryEthereum_BigDecimal!]
  supplyBalance_lt: treasuryEthereum_BigDecimal
  supplyBalance_lte: treasuryEthereum_BigDecimal
  supplyBalance_not: treasuryEthereum_BigDecimal
  supplyBalance_not_in: [treasuryEthereum_BigDecimal!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  token: String
  tokenAddress: String
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_gt: String
  tokenAddress_gte: String
  tokenAddress_in: [String!]
  tokenAddress_lt: String
  tokenAddress_lte: String
  tokenAddress_not: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  tokenAddress_not_in: [String!]
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  type: String
  type_contains: String
  type_contains_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_gt: String
  type_gte: String
  type_in: [String!]
  type_lt: String
  type_lte: String
  type_not: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  type_not_in: [String!]
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
}

enum treasuryEthereum_TokenSupply_orderBy {
  balance
  block
  date
  id
  pool
  poolAddress
  source
  sourceAddress
  supplyBalance
  timestamp
  token
  tokenAddress
  type
}

input treasuryEthereum_Token_filter {
  """Filter for the block changed event."""
  _change_block: treasuryEthereum_BlockChangedFilter
  and: [treasuryEthereum_Token_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryEthereum_Token_filter]
}

enum treasuryEthereum_Token_orderBy {
  id
}

type treasuryEthereum__Block_ {
  """The hash of the block"""
  hash: treasuryEthereum_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  _join: Query!
}

"""The type for the top-level _meta field"""
type treasuryEthereum__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: treasuryEthereum__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
  _join: Query!
}

enum treasuryEthereum__SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type treasuryFantom_BalancerPoolSnapshot {
  balances: [treasuryFantom_BigDecimal!]!
  block: BigInt!
  decimals: Int!
  id: ID!
  pool: treasuryFantom_Bytes!
  poolToken: treasuryFantom_Bytes!
  tokens: [treasuryFantom_Bytes!]!
  totalSupply: treasuryFantom_BigDecimal!
  weights: [treasuryFantom_BigDecimal!]!
  _join: Query!
}

input treasuryFantom_BalancerPoolSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryFantom_BlockChangedFilter
  and: [treasuryFantom_BalancerPoolSnapshot_filter]
  balances: [treasuryFantom_BigDecimal!]
  balances_contains: [treasuryFantom_BigDecimal!]
  balances_contains_nocase: [treasuryFantom_BigDecimal!]
  balances_not: [treasuryFantom_BigDecimal!]
  balances_not_contains: [treasuryFantom_BigDecimal!]
  balances_not_contains_nocase: [treasuryFantom_BigDecimal!]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  decimals: Int
  decimals_gt: Int
  decimals_gte: Int
  decimals_in: [Int!]
  decimals_lt: Int
  decimals_lte: Int
  decimals_not: Int
  decimals_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryFantom_BalancerPoolSnapshot_filter]
  pool: treasuryFantom_Bytes
  poolToken: treasuryFantom_Bytes
  poolToken_contains: treasuryFantom_Bytes
  poolToken_gt: treasuryFantom_Bytes
  poolToken_gte: treasuryFantom_Bytes
  poolToken_in: [treasuryFantom_Bytes!]
  poolToken_lt: treasuryFantom_Bytes
  poolToken_lte: treasuryFantom_Bytes
  poolToken_not: treasuryFantom_Bytes
  poolToken_not_contains: treasuryFantom_Bytes
  poolToken_not_in: [treasuryFantom_Bytes!]
  pool_contains: treasuryFantom_Bytes
  pool_gt: treasuryFantom_Bytes
  pool_gte: treasuryFantom_Bytes
  pool_in: [treasuryFantom_Bytes!]
  pool_lt: treasuryFantom_Bytes
  pool_lte: treasuryFantom_Bytes
  pool_not: treasuryFantom_Bytes
  pool_not_contains: treasuryFantom_Bytes
  pool_not_in: [treasuryFantom_Bytes!]
  tokens: [treasuryFantom_Bytes!]
  tokens_contains: [treasuryFantom_Bytes!]
  tokens_contains_nocase: [treasuryFantom_Bytes!]
  tokens_not: [treasuryFantom_Bytes!]
  tokens_not_contains: [treasuryFantom_Bytes!]
  tokens_not_contains_nocase: [treasuryFantom_Bytes!]
  totalSupply: treasuryFantom_BigDecimal
  totalSupply_gt: treasuryFantom_BigDecimal
  totalSupply_gte: treasuryFantom_BigDecimal
  totalSupply_in: [treasuryFantom_BigDecimal!]
  totalSupply_lt: treasuryFantom_BigDecimal
  totalSupply_lte: treasuryFantom_BigDecimal
  totalSupply_not: treasuryFantom_BigDecimal
  totalSupply_not_in: [treasuryFantom_BigDecimal!]
  weights: [treasuryFantom_BigDecimal!]
  weights_contains: [treasuryFantom_BigDecimal!]
  weights_contains_nocase: [treasuryFantom_BigDecimal!]
  weights_not: [treasuryFantom_BigDecimal!]
  weights_not_contains: [treasuryFantom_BigDecimal!]
  weights_not_contains_nocase: [treasuryFantom_BigDecimal!]
}

enum treasuryFantom_BalancerPoolSnapshot_orderBy {
  balances
  block
  decimals
  id
  pool
  poolToken
  tokens
  totalSupply
  weights
}

scalar treasuryFantom_BigDecimal

input treasuryFantom_BlockChangedFilter {
  number_gte: Int!
}

input treasuryFantom_Block_height {
  hash: treasuryFantom_Bytes
  number: Int
  number_gte: Int
}

type treasuryFantom_BondDiscount {
  dai_discount: treasuryFantom_BigDecimal!
  eth_discount: treasuryFantom_BigDecimal!
  frax_discount: treasuryFantom_BigDecimal!
  id: ID!
  lusd_discount: treasuryFantom_BigDecimal!
  ohmdai_discount: treasuryFantom_BigDecimal!
  ohmfrax_discount: treasuryFantom_BigDecimal!
  ohmlusd_discount: treasuryFantom_BigDecimal!
  timestamp: BigInt!
  _join: Query!
}

input treasuryFantom_BondDiscount_filter {
  """Filter for the block changed event."""
  _change_block: treasuryFantom_BlockChangedFilter
  and: [treasuryFantom_BondDiscount_filter]
  dai_discount: treasuryFantom_BigDecimal
  dai_discount_gt: treasuryFantom_BigDecimal
  dai_discount_gte: treasuryFantom_BigDecimal
  dai_discount_in: [treasuryFantom_BigDecimal!]
  dai_discount_lt: treasuryFantom_BigDecimal
  dai_discount_lte: treasuryFantom_BigDecimal
  dai_discount_not: treasuryFantom_BigDecimal
  dai_discount_not_in: [treasuryFantom_BigDecimal!]
  eth_discount: treasuryFantom_BigDecimal
  eth_discount_gt: treasuryFantom_BigDecimal
  eth_discount_gte: treasuryFantom_BigDecimal
  eth_discount_in: [treasuryFantom_BigDecimal!]
  eth_discount_lt: treasuryFantom_BigDecimal
  eth_discount_lte: treasuryFantom_BigDecimal
  eth_discount_not: treasuryFantom_BigDecimal
  eth_discount_not_in: [treasuryFantom_BigDecimal!]
  frax_discount: treasuryFantom_BigDecimal
  frax_discount_gt: treasuryFantom_BigDecimal
  frax_discount_gte: treasuryFantom_BigDecimal
  frax_discount_in: [treasuryFantom_BigDecimal!]
  frax_discount_lt: treasuryFantom_BigDecimal
  frax_discount_lte: treasuryFantom_BigDecimal
  frax_discount_not: treasuryFantom_BigDecimal
  frax_discount_not_in: [treasuryFantom_BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lusd_discount: treasuryFantom_BigDecimal
  lusd_discount_gt: treasuryFantom_BigDecimal
  lusd_discount_gte: treasuryFantom_BigDecimal
  lusd_discount_in: [treasuryFantom_BigDecimal!]
  lusd_discount_lt: treasuryFantom_BigDecimal
  lusd_discount_lte: treasuryFantom_BigDecimal
  lusd_discount_not: treasuryFantom_BigDecimal
  lusd_discount_not_in: [treasuryFantom_BigDecimal!]
  ohmdai_discount: treasuryFantom_BigDecimal
  ohmdai_discount_gt: treasuryFantom_BigDecimal
  ohmdai_discount_gte: treasuryFantom_BigDecimal
  ohmdai_discount_in: [treasuryFantom_BigDecimal!]
  ohmdai_discount_lt: treasuryFantom_BigDecimal
  ohmdai_discount_lte: treasuryFantom_BigDecimal
  ohmdai_discount_not: treasuryFantom_BigDecimal
  ohmdai_discount_not_in: [treasuryFantom_BigDecimal!]
  ohmfrax_discount: treasuryFantom_BigDecimal
  ohmfrax_discount_gt: treasuryFantom_BigDecimal
  ohmfrax_discount_gte: treasuryFantom_BigDecimal
  ohmfrax_discount_in: [treasuryFantom_BigDecimal!]
  ohmfrax_discount_lt: treasuryFantom_BigDecimal
  ohmfrax_discount_lte: treasuryFantom_BigDecimal
  ohmfrax_discount_not: treasuryFantom_BigDecimal
  ohmfrax_discount_not_in: [treasuryFantom_BigDecimal!]
  ohmlusd_discount: treasuryFantom_BigDecimal
  ohmlusd_discount_gt: treasuryFantom_BigDecimal
  ohmlusd_discount_gte: treasuryFantom_BigDecimal
  ohmlusd_discount_in: [treasuryFantom_BigDecimal!]
  ohmlusd_discount_lt: treasuryFantom_BigDecimal
  ohmlusd_discount_lte: treasuryFantom_BigDecimal
  ohmlusd_discount_not: treasuryFantom_BigDecimal
  ohmlusd_discount_not_in: [treasuryFantom_BigDecimal!]
  or: [treasuryFantom_BondDiscount_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
}

enum treasuryFantom_BondDiscount_orderBy {
  dai_discount
  eth_discount
  frax_discount
  id
  lusd_discount
  ohmdai_discount
  ohmfrax_discount
  ohmlusd_discount
  timestamp
}

scalar treasuryFantom_Bytes

type treasuryFantom_ConvexRewardPoolSnapshot {
  address: treasuryFantom_Bytes!
  block: BigInt!
  id: ID!
  stakingToken: treasuryFantom_Bytes!
  _join: Query!
}

input treasuryFantom_ConvexRewardPoolSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryFantom_BlockChangedFilter
  address: treasuryFantom_Bytes
  address_contains: treasuryFantom_Bytes
  address_gt: treasuryFantom_Bytes
  address_gte: treasuryFantom_Bytes
  address_in: [treasuryFantom_Bytes!]
  address_lt: treasuryFantom_Bytes
  address_lte: treasuryFantom_Bytes
  address_not: treasuryFantom_Bytes
  address_not_contains: treasuryFantom_Bytes
  address_not_in: [treasuryFantom_Bytes!]
  and: [treasuryFantom_ConvexRewardPoolSnapshot_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryFantom_ConvexRewardPoolSnapshot_filter]
  stakingToken: treasuryFantom_Bytes
  stakingToken_contains: treasuryFantom_Bytes
  stakingToken_gt: treasuryFantom_Bytes
  stakingToken_gte: treasuryFantom_Bytes
  stakingToken_in: [treasuryFantom_Bytes!]
  stakingToken_lt: treasuryFantom_Bytes
  stakingToken_lte: treasuryFantom_Bytes
  stakingToken_not: treasuryFantom_Bytes
  stakingToken_not_contains: treasuryFantom_Bytes
  stakingToken_not_in: [treasuryFantom_Bytes!]
}

enum treasuryFantom_ConvexRewardPoolSnapshot_orderBy {
  address
  block
  id
  stakingToken
}

type treasuryFantom_DailyBond {
  amount: treasuryFantom_BigDecimal!
  id: ID!
  timestamp: BigInt!
  token: treasuryFantom_Token!
  value: treasuryFantom_BigDecimal!
  _join: Query!
}

input treasuryFantom_DailyBond_filter {
  """Filter for the block changed event."""
  _change_block: treasuryFantom_BlockChangedFilter
  amount: treasuryFantom_BigDecimal
  amount_gt: treasuryFantom_BigDecimal
  amount_gte: treasuryFantom_BigDecimal
  amount_in: [treasuryFantom_BigDecimal!]
  amount_lt: treasuryFantom_BigDecimal
  amount_lte: treasuryFantom_BigDecimal
  amount_not: treasuryFantom_BigDecimal
  amount_not_in: [treasuryFantom_BigDecimal!]
  and: [treasuryFantom_DailyBond_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryFantom_DailyBond_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  token: String
  token_: treasuryFantom_Token_filter
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  value: treasuryFantom_BigDecimal
  value_gt: treasuryFantom_BigDecimal
  value_gte: treasuryFantom_BigDecimal
  value_in: [treasuryFantom_BigDecimal!]
  value_lt: treasuryFantom_BigDecimal
  value_lte: treasuryFantom_BigDecimal
  value_not: treasuryFantom_BigDecimal
  value_not_in: [treasuryFantom_BigDecimal!]
}

enum treasuryFantom_DailyBond_orderBy {
  amount
  id
  timestamp
  token
  token__id
  value
}

type treasuryFantom_DailyStakingReward {
  amount: treasuryFantom_BigDecimal!
  id: ID!
  timestamp: BigInt!
  value: treasuryFantom_BigDecimal!
  _join: Query!
}

input treasuryFantom_DailyStakingReward_filter {
  """Filter for the block changed event."""
  _change_block: treasuryFantom_BlockChangedFilter
  amount: treasuryFantom_BigDecimal
  amount_gt: treasuryFantom_BigDecimal
  amount_gte: treasuryFantom_BigDecimal
  amount_in: [treasuryFantom_BigDecimal!]
  amount_lt: treasuryFantom_BigDecimal
  amount_lte: treasuryFantom_BigDecimal
  amount_not: treasuryFantom_BigDecimal
  amount_not_in: [treasuryFantom_BigDecimal!]
  and: [treasuryFantom_DailyStakingReward_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryFantom_DailyStakingReward_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  value: treasuryFantom_BigDecimal
  value_gt: treasuryFantom_BigDecimal
  value_gte: treasuryFantom_BigDecimal
  value_in: [treasuryFantom_BigDecimal!]
  value_lt: treasuryFantom_BigDecimal
  value_lte: treasuryFantom_BigDecimal
  value_not: treasuryFantom_BigDecimal
  value_not_in: [treasuryFantom_BigDecimal!]
}

enum treasuryFantom_DailyStakingReward_orderBy {
  amount
  id
  timestamp
  value
}

type treasuryFantom_ERC20TokenSnapshot {
  address: treasuryFantom_Bytes!
  decimals: Int!
  id: ID!
  totalSupply: treasuryFantom_BigDecimal
  _join: Query!
}

input treasuryFantom_ERC20TokenSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryFantom_BlockChangedFilter
  address: treasuryFantom_Bytes
  address_contains: treasuryFantom_Bytes
  address_gt: treasuryFantom_Bytes
  address_gte: treasuryFantom_Bytes
  address_in: [treasuryFantom_Bytes!]
  address_lt: treasuryFantom_Bytes
  address_lte: treasuryFantom_Bytes
  address_not: treasuryFantom_Bytes
  address_not_contains: treasuryFantom_Bytes
  address_not_in: [treasuryFantom_Bytes!]
  and: [treasuryFantom_ERC20TokenSnapshot_filter]
  decimals: Int
  decimals_gt: Int
  decimals_gte: Int
  decimals_in: [Int!]
  decimals_lt: Int
  decimals_lte: Int
  decimals_not: Int
  decimals_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryFantom_ERC20TokenSnapshot_filter]
  totalSupply: treasuryFantom_BigDecimal
  totalSupply_gt: treasuryFantom_BigDecimal
  totalSupply_gte: treasuryFantom_BigDecimal
  totalSupply_in: [treasuryFantom_BigDecimal!]
  totalSupply_lt: treasuryFantom_BigDecimal
  totalSupply_lte: treasuryFantom_BigDecimal
  totalSupply_not: treasuryFantom_BigDecimal
  totalSupply_not_in: [treasuryFantom_BigDecimal!]
}

enum treasuryFantom_ERC20TokenSnapshot_orderBy {
  address
  decimals
  id
  totalSupply
}

type treasuryFantom_GnosisAuction {
  auctionCloseTimestamp: BigInt
  auctionOpenTimestamp: BigInt!
  bidQuantity: treasuryFantom_BigDecimal
  id: ID!
  payoutCapacity: treasuryFantom_BigDecimal!
  termSeconds: BigInt!
  _join: Query!
}

type treasuryFantom_GnosisAuctionRoot {
  id: ID!
  markets: [BigInt!]!
  _join: Query!
}

input treasuryFantom_GnosisAuctionRoot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryFantom_BlockChangedFilter
  and: [treasuryFantom_GnosisAuctionRoot_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  markets: [BigInt!]
  markets_contains: [BigInt!]
  markets_contains_nocase: [BigInt!]
  markets_not: [BigInt!]
  markets_not_contains: [BigInt!]
  markets_not_contains_nocase: [BigInt!]
  or: [treasuryFantom_GnosisAuctionRoot_filter]
}

enum treasuryFantom_GnosisAuctionRoot_orderBy {
  id
  markets
}

input treasuryFantom_GnosisAuction_filter {
  """Filter for the block changed event."""
  _change_block: treasuryFantom_BlockChangedFilter
  and: [treasuryFantom_GnosisAuction_filter]
  auctionCloseTimestamp: BigInt
  auctionCloseTimestamp_gt: BigInt
  auctionCloseTimestamp_gte: BigInt
  auctionCloseTimestamp_in: [BigInt!]
  auctionCloseTimestamp_lt: BigInt
  auctionCloseTimestamp_lte: BigInt
  auctionCloseTimestamp_not: BigInt
  auctionCloseTimestamp_not_in: [BigInt!]
  auctionOpenTimestamp: BigInt
  auctionOpenTimestamp_gt: BigInt
  auctionOpenTimestamp_gte: BigInt
  auctionOpenTimestamp_in: [BigInt!]
  auctionOpenTimestamp_lt: BigInt
  auctionOpenTimestamp_lte: BigInt
  auctionOpenTimestamp_not: BigInt
  auctionOpenTimestamp_not_in: [BigInt!]
  bidQuantity: treasuryFantom_BigDecimal
  bidQuantity_gt: treasuryFantom_BigDecimal
  bidQuantity_gte: treasuryFantom_BigDecimal
  bidQuantity_in: [treasuryFantom_BigDecimal!]
  bidQuantity_lt: treasuryFantom_BigDecimal
  bidQuantity_lte: treasuryFantom_BigDecimal
  bidQuantity_not: treasuryFantom_BigDecimal
  bidQuantity_not_in: [treasuryFantom_BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryFantom_GnosisAuction_filter]
  payoutCapacity: treasuryFantom_BigDecimal
  payoutCapacity_gt: treasuryFantom_BigDecimal
  payoutCapacity_gte: treasuryFantom_BigDecimal
  payoutCapacity_in: [treasuryFantom_BigDecimal!]
  payoutCapacity_lt: treasuryFantom_BigDecimal
  payoutCapacity_lte: treasuryFantom_BigDecimal
  payoutCapacity_not: treasuryFantom_BigDecimal
  payoutCapacity_not_in: [treasuryFantom_BigDecimal!]
  termSeconds: BigInt
  termSeconds_gt: BigInt
  termSeconds_gte: BigInt
  termSeconds_in: [BigInt!]
  termSeconds_lt: BigInt
  termSeconds_lte: BigInt
  termSeconds_not: BigInt
  termSeconds_not_in: [BigInt!]
}

enum treasuryFantom_GnosisAuction_orderBy {
  auctionCloseTimestamp
  auctionOpenTimestamp
  bidQuantity
  id
  payoutCapacity
  termSeconds
}

"""Defines the order direction, either ascending or descending"""
enum treasuryFantom_OrderDirection {
  asc
  desc
}

type treasuryFantom_PoolSnapshot {
  balances: [treasuryFantom_BigDecimal!]!
  block: BigInt!
  decimals: Int!
  id: ID!
  pool: treasuryFantom_Bytes!
  poolToken: treasuryFantom_Bytes
  tokens: [treasuryFantom_Bytes!]!
  totalSupply: treasuryFantom_BigDecimal!
  weights: [treasuryFantom_BigDecimal!]
  _join: Query!
}

input treasuryFantom_PoolSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryFantom_BlockChangedFilter
  and: [treasuryFantom_PoolSnapshot_filter]
  balances: [treasuryFantom_BigDecimal!]
  balances_contains: [treasuryFantom_BigDecimal!]
  balances_contains_nocase: [treasuryFantom_BigDecimal!]
  balances_not: [treasuryFantom_BigDecimal!]
  balances_not_contains: [treasuryFantom_BigDecimal!]
  balances_not_contains_nocase: [treasuryFantom_BigDecimal!]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  decimals: Int
  decimals_gt: Int
  decimals_gte: Int
  decimals_in: [Int!]
  decimals_lt: Int
  decimals_lte: Int
  decimals_not: Int
  decimals_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryFantom_PoolSnapshot_filter]
  pool: treasuryFantom_Bytes
  poolToken: treasuryFantom_Bytes
  poolToken_contains: treasuryFantom_Bytes
  poolToken_gt: treasuryFantom_Bytes
  poolToken_gte: treasuryFantom_Bytes
  poolToken_in: [treasuryFantom_Bytes!]
  poolToken_lt: treasuryFantom_Bytes
  poolToken_lte: treasuryFantom_Bytes
  poolToken_not: treasuryFantom_Bytes
  poolToken_not_contains: treasuryFantom_Bytes
  poolToken_not_in: [treasuryFantom_Bytes!]
  pool_contains: treasuryFantom_Bytes
  pool_gt: treasuryFantom_Bytes
  pool_gte: treasuryFantom_Bytes
  pool_in: [treasuryFantom_Bytes!]
  pool_lt: treasuryFantom_Bytes
  pool_lte: treasuryFantom_Bytes
  pool_not: treasuryFantom_Bytes
  pool_not_contains: treasuryFantom_Bytes
  pool_not_in: [treasuryFantom_Bytes!]
  tokens: [treasuryFantom_Bytes!]
  tokens_contains: [treasuryFantom_Bytes!]
  tokens_contains_nocase: [treasuryFantom_Bytes!]
  tokens_not: [treasuryFantom_Bytes!]
  tokens_not_contains: [treasuryFantom_Bytes!]
  tokens_not_contains_nocase: [treasuryFantom_Bytes!]
  totalSupply: treasuryFantom_BigDecimal
  totalSupply_gt: treasuryFantom_BigDecimal
  totalSupply_gte: treasuryFantom_BigDecimal
  totalSupply_in: [treasuryFantom_BigDecimal!]
  totalSupply_lt: treasuryFantom_BigDecimal
  totalSupply_lte: treasuryFantom_BigDecimal
  totalSupply_not: treasuryFantom_BigDecimal
  totalSupply_not_in: [treasuryFantom_BigDecimal!]
  weights: [treasuryFantom_BigDecimal!]
  weights_contains: [treasuryFantom_BigDecimal!]
  weights_contains_nocase: [treasuryFantom_BigDecimal!]
  weights_not: [treasuryFantom_BigDecimal!]
  weights_not_contains: [treasuryFantom_BigDecimal!]
  weights_not_contains_nocase: [treasuryFantom_BigDecimal!]
}

enum treasuryFantom_PoolSnapshot_orderBy {
  balances
  block
  decimals
  id
  pool
  poolToken
  tokens
  totalSupply
  weights
}

type treasuryFantom_PriceSnapshot {
  block: BigInt!
  date: String!
  id: ID!
  priceGOhm: treasuryFantom_BigDecimal!
  priceOhm: treasuryFantom_BigDecimal!
  timestamp: BigInt!
  _join: Query!
}

input treasuryFantom_PriceSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryFantom_BlockChangedFilter
  and: [treasuryFantom_PriceSnapshot_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  date: String
  date_contains: String
  date_contains_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_gt: String
  date_gte: String
  date_in: [String!]
  date_lt: String
  date_lte: String
  date_not: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  date_not_in: [String!]
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryFantom_PriceSnapshot_filter]
  priceGOhm: treasuryFantom_BigDecimal
  priceGOhm_gt: treasuryFantom_BigDecimal
  priceGOhm_gte: treasuryFantom_BigDecimal
  priceGOhm_in: [treasuryFantom_BigDecimal!]
  priceGOhm_lt: treasuryFantom_BigDecimal
  priceGOhm_lte: treasuryFantom_BigDecimal
  priceGOhm_not: treasuryFantom_BigDecimal
  priceGOhm_not_in: [treasuryFantom_BigDecimal!]
  priceOhm: treasuryFantom_BigDecimal
  priceOhm_gt: treasuryFantom_BigDecimal
  priceOhm_gte: treasuryFantom_BigDecimal
  priceOhm_in: [treasuryFantom_BigDecimal!]
  priceOhm_lt: treasuryFantom_BigDecimal
  priceOhm_lte: treasuryFantom_BigDecimal
  priceOhm_not: treasuryFantom_BigDecimal
  priceOhm_not_in: [treasuryFantom_BigDecimal!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
}

enum treasuryFantom_PriceSnapshot_orderBy {
  block
  date
  id
  priceGOhm
  priceOhm
  timestamp
}

type treasuryFantom_ProtocolMetric {
  block: BigInt!
  currentAPY: treasuryFantom_BigDecimal!
  currentIndex: treasuryFantom_BigDecimal!
  date: String!
  gOhmPrice: treasuryFantom_BigDecimal!
  gOhmSyntheticSupply: treasuryFantom_BigDecimal
  gOhmTotalSupply: treasuryFantom_BigDecimal!
  id: ID!
  marketCap: treasuryFantom_BigDecimal
  nextDistributedOhm: treasuryFantom_BigDecimal!
  nextEpochRebase: treasuryFantom_BigDecimal!
  ohmCirculatingSupply: treasuryFantom_BigDecimal
  ohmFloatingSupply: treasuryFantom_BigDecimal
  ohmPrice: treasuryFantom_BigDecimal!
  ohmTotalSupply: treasuryFantom_BigDecimal!
  sOhmCirculatingSupply: treasuryFantom_BigDecimal!
  timestamp: BigInt!
  totalValueLocked: treasuryFantom_BigDecimal!
  treasuryLiquidBacking: treasuryFantom_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic: treasuryFantom_BigDecimal
  treasuryLiquidBackingPerOhmFloating: treasuryFantom_BigDecimal
  treasuryMarketValue: treasuryFantom_BigDecimal
  _join: Query!
}

input treasuryFantom_ProtocolMetric_filter {
  """Filter for the block changed event."""
  _change_block: treasuryFantom_BlockChangedFilter
  and: [treasuryFantom_ProtocolMetric_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  currentAPY: treasuryFantom_BigDecimal
  currentAPY_gt: treasuryFantom_BigDecimal
  currentAPY_gte: treasuryFantom_BigDecimal
  currentAPY_in: [treasuryFantom_BigDecimal!]
  currentAPY_lt: treasuryFantom_BigDecimal
  currentAPY_lte: treasuryFantom_BigDecimal
  currentAPY_not: treasuryFantom_BigDecimal
  currentAPY_not_in: [treasuryFantom_BigDecimal!]
  currentIndex: treasuryFantom_BigDecimal
  currentIndex_gt: treasuryFantom_BigDecimal
  currentIndex_gte: treasuryFantom_BigDecimal
  currentIndex_in: [treasuryFantom_BigDecimal!]
  currentIndex_lt: treasuryFantom_BigDecimal
  currentIndex_lte: treasuryFantom_BigDecimal
  currentIndex_not: treasuryFantom_BigDecimal
  currentIndex_not_in: [treasuryFantom_BigDecimal!]
  date: String
  date_contains: String
  date_contains_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_gt: String
  date_gte: String
  date_in: [String!]
  date_lt: String
  date_lte: String
  date_not: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  date_not_in: [String!]
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  gOhmPrice: treasuryFantom_BigDecimal
  gOhmPrice_gt: treasuryFantom_BigDecimal
  gOhmPrice_gte: treasuryFantom_BigDecimal
  gOhmPrice_in: [treasuryFantom_BigDecimal!]
  gOhmPrice_lt: treasuryFantom_BigDecimal
  gOhmPrice_lte: treasuryFantom_BigDecimal
  gOhmPrice_not: treasuryFantom_BigDecimal
  gOhmPrice_not_in: [treasuryFantom_BigDecimal!]
  gOhmSyntheticSupply: treasuryFantom_BigDecimal
  gOhmSyntheticSupply_gt: treasuryFantom_BigDecimal
  gOhmSyntheticSupply_gte: treasuryFantom_BigDecimal
  gOhmSyntheticSupply_in: [treasuryFantom_BigDecimal!]
  gOhmSyntheticSupply_lt: treasuryFantom_BigDecimal
  gOhmSyntheticSupply_lte: treasuryFantom_BigDecimal
  gOhmSyntheticSupply_not: treasuryFantom_BigDecimal
  gOhmSyntheticSupply_not_in: [treasuryFantom_BigDecimal!]
  gOhmTotalSupply: treasuryFantom_BigDecimal
  gOhmTotalSupply_gt: treasuryFantom_BigDecimal
  gOhmTotalSupply_gte: treasuryFantom_BigDecimal
  gOhmTotalSupply_in: [treasuryFantom_BigDecimal!]
  gOhmTotalSupply_lt: treasuryFantom_BigDecimal
  gOhmTotalSupply_lte: treasuryFantom_BigDecimal
  gOhmTotalSupply_not: treasuryFantom_BigDecimal
  gOhmTotalSupply_not_in: [treasuryFantom_BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  marketCap: treasuryFantom_BigDecimal
  marketCap_gt: treasuryFantom_BigDecimal
  marketCap_gte: treasuryFantom_BigDecimal
  marketCap_in: [treasuryFantom_BigDecimal!]
  marketCap_lt: treasuryFantom_BigDecimal
  marketCap_lte: treasuryFantom_BigDecimal
  marketCap_not: treasuryFantom_BigDecimal
  marketCap_not_in: [treasuryFantom_BigDecimal!]
  nextDistributedOhm: treasuryFantom_BigDecimal
  nextDistributedOhm_gt: treasuryFantom_BigDecimal
  nextDistributedOhm_gte: treasuryFantom_BigDecimal
  nextDistributedOhm_in: [treasuryFantom_BigDecimal!]
  nextDistributedOhm_lt: treasuryFantom_BigDecimal
  nextDistributedOhm_lte: treasuryFantom_BigDecimal
  nextDistributedOhm_not: treasuryFantom_BigDecimal
  nextDistributedOhm_not_in: [treasuryFantom_BigDecimal!]
  nextEpochRebase: treasuryFantom_BigDecimal
  nextEpochRebase_gt: treasuryFantom_BigDecimal
  nextEpochRebase_gte: treasuryFantom_BigDecimal
  nextEpochRebase_in: [treasuryFantom_BigDecimal!]
  nextEpochRebase_lt: treasuryFantom_BigDecimal
  nextEpochRebase_lte: treasuryFantom_BigDecimal
  nextEpochRebase_not: treasuryFantom_BigDecimal
  nextEpochRebase_not_in: [treasuryFantom_BigDecimal!]
  ohmCirculatingSupply: treasuryFantom_BigDecimal
  ohmCirculatingSupply_gt: treasuryFantom_BigDecimal
  ohmCirculatingSupply_gte: treasuryFantom_BigDecimal
  ohmCirculatingSupply_in: [treasuryFantom_BigDecimal!]
  ohmCirculatingSupply_lt: treasuryFantom_BigDecimal
  ohmCirculatingSupply_lte: treasuryFantom_BigDecimal
  ohmCirculatingSupply_not: treasuryFantom_BigDecimal
  ohmCirculatingSupply_not_in: [treasuryFantom_BigDecimal!]
  ohmFloatingSupply: treasuryFantom_BigDecimal
  ohmFloatingSupply_gt: treasuryFantom_BigDecimal
  ohmFloatingSupply_gte: treasuryFantom_BigDecimal
  ohmFloatingSupply_in: [treasuryFantom_BigDecimal!]
  ohmFloatingSupply_lt: treasuryFantom_BigDecimal
  ohmFloatingSupply_lte: treasuryFantom_BigDecimal
  ohmFloatingSupply_not: treasuryFantom_BigDecimal
  ohmFloatingSupply_not_in: [treasuryFantom_BigDecimal!]
  ohmPrice: treasuryFantom_BigDecimal
  ohmPrice_gt: treasuryFantom_BigDecimal
  ohmPrice_gte: treasuryFantom_BigDecimal
  ohmPrice_in: [treasuryFantom_BigDecimal!]
  ohmPrice_lt: treasuryFantom_BigDecimal
  ohmPrice_lte: treasuryFantom_BigDecimal
  ohmPrice_not: treasuryFantom_BigDecimal
  ohmPrice_not_in: [treasuryFantom_BigDecimal!]
  ohmTotalSupply: treasuryFantom_BigDecimal
  ohmTotalSupply_gt: treasuryFantom_BigDecimal
  ohmTotalSupply_gte: treasuryFantom_BigDecimal
  ohmTotalSupply_in: [treasuryFantom_BigDecimal!]
  ohmTotalSupply_lt: treasuryFantom_BigDecimal
  ohmTotalSupply_lte: treasuryFantom_BigDecimal
  ohmTotalSupply_not: treasuryFantom_BigDecimal
  ohmTotalSupply_not_in: [treasuryFantom_BigDecimal!]
  or: [treasuryFantom_ProtocolMetric_filter]
  sOhmCirculatingSupply: treasuryFantom_BigDecimal
  sOhmCirculatingSupply_gt: treasuryFantom_BigDecimal
  sOhmCirculatingSupply_gte: treasuryFantom_BigDecimal
  sOhmCirculatingSupply_in: [treasuryFantom_BigDecimal!]
  sOhmCirculatingSupply_lt: treasuryFantom_BigDecimal
  sOhmCirculatingSupply_lte: treasuryFantom_BigDecimal
  sOhmCirculatingSupply_not: treasuryFantom_BigDecimal
  sOhmCirculatingSupply_not_in: [treasuryFantom_BigDecimal!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  totalValueLocked: treasuryFantom_BigDecimal
  totalValueLocked_gt: treasuryFantom_BigDecimal
  totalValueLocked_gte: treasuryFantom_BigDecimal
  totalValueLocked_in: [treasuryFantom_BigDecimal!]
  totalValueLocked_lt: treasuryFantom_BigDecimal
  totalValueLocked_lte: treasuryFantom_BigDecimal
  totalValueLocked_not: treasuryFantom_BigDecimal
  totalValueLocked_not_in: [treasuryFantom_BigDecimal!]
  treasuryLiquidBacking: treasuryFantom_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic: treasuryFantom_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_gt: treasuryFantom_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_gte: treasuryFantom_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_in: [treasuryFantom_BigDecimal!]
  treasuryLiquidBackingPerGOhmSynthetic_lt: treasuryFantom_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_lte: treasuryFantom_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_not: treasuryFantom_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_not_in: [treasuryFantom_BigDecimal!]
  treasuryLiquidBackingPerOhmFloating: treasuryFantom_BigDecimal
  treasuryLiquidBackingPerOhmFloating_gt: treasuryFantom_BigDecimal
  treasuryLiquidBackingPerOhmFloating_gte: treasuryFantom_BigDecimal
  treasuryLiquidBackingPerOhmFloating_in: [treasuryFantom_BigDecimal!]
  treasuryLiquidBackingPerOhmFloating_lt: treasuryFantom_BigDecimal
  treasuryLiquidBackingPerOhmFloating_lte: treasuryFantom_BigDecimal
  treasuryLiquidBackingPerOhmFloating_not: treasuryFantom_BigDecimal
  treasuryLiquidBackingPerOhmFloating_not_in: [treasuryFantom_BigDecimal!]
  treasuryLiquidBacking_gt: treasuryFantom_BigDecimal
  treasuryLiquidBacking_gte: treasuryFantom_BigDecimal
  treasuryLiquidBacking_in: [treasuryFantom_BigDecimal!]
  treasuryLiquidBacking_lt: treasuryFantom_BigDecimal
  treasuryLiquidBacking_lte: treasuryFantom_BigDecimal
  treasuryLiquidBacking_not: treasuryFantom_BigDecimal
  treasuryLiquidBacking_not_in: [treasuryFantom_BigDecimal!]
  treasuryMarketValue: treasuryFantom_BigDecimal
  treasuryMarketValue_gt: treasuryFantom_BigDecimal
  treasuryMarketValue_gte: treasuryFantom_BigDecimal
  treasuryMarketValue_in: [treasuryFantom_BigDecimal!]
  treasuryMarketValue_lt: treasuryFantom_BigDecimal
  treasuryMarketValue_lte: treasuryFantom_BigDecimal
  treasuryMarketValue_not: treasuryFantom_BigDecimal
  treasuryMarketValue_not_in: [treasuryFantom_BigDecimal!]
}

enum treasuryFantom_ProtocolMetric_orderBy {
  block
  currentAPY
  currentIndex
  date
  gOhmPrice
  gOhmSyntheticSupply
  gOhmTotalSupply
  id
  marketCap
  nextDistributedOhm
  nextEpochRebase
  ohmCirculatingSupply
  ohmFloatingSupply
  ohmPrice
  ohmTotalSupply
  sOhmCirculatingSupply
  timestamp
  totalValueLocked
  treasuryLiquidBacking
  treasuryLiquidBackingPerGOhmSynthetic
  treasuryLiquidBackingPerOhmFloating
  treasuryMarketValue
}

type treasuryFantom_Rebase {
  amount: treasuryFantom_BigDecimal!
  contract: String!
  id: ID!
  percentage: treasuryFantom_BigDecimal!
  stakedOhms: treasuryFantom_BigDecimal!
  timestamp: BigInt!
  value: treasuryFantom_BigDecimal!
  _join: Query!
}

input treasuryFantom_Rebase_filter {
  """Filter for the block changed event."""
  _change_block: treasuryFantom_BlockChangedFilter
  amount: treasuryFantom_BigDecimal
  amount_gt: treasuryFantom_BigDecimal
  amount_gte: treasuryFantom_BigDecimal
  amount_in: [treasuryFantom_BigDecimal!]
  amount_lt: treasuryFantom_BigDecimal
  amount_lte: treasuryFantom_BigDecimal
  amount_not: treasuryFantom_BigDecimal
  amount_not_in: [treasuryFantom_BigDecimal!]
  and: [treasuryFantom_Rebase_filter]
  contract: String
  contract_contains: String
  contract_contains_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_gt: String
  contract_gte: String
  contract_in: [String!]
  contract_lt: String
  contract_lte: String
  contract_not: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_not_in: [String!]
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryFantom_Rebase_filter]
  percentage: treasuryFantom_BigDecimal
  percentage_gt: treasuryFantom_BigDecimal
  percentage_gte: treasuryFantom_BigDecimal
  percentage_in: [treasuryFantom_BigDecimal!]
  percentage_lt: treasuryFantom_BigDecimal
  percentage_lte: treasuryFantom_BigDecimal
  percentage_not: treasuryFantom_BigDecimal
  percentage_not_in: [treasuryFantom_BigDecimal!]
  stakedOhms: treasuryFantom_BigDecimal
  stakedOhms_gt: treasuryFantom_BigDecimal
  stakedOhms_gte: treasuryFantom_BigDecimal
  stakedOhms_in: [treasuryFantom_BigDecimal!]
  stakedOhms_lt: treasuryFantom_BigDecimal
  stakedOhms_lte: treasuryFantom_BigDecimal
  stakedOhms_not: treasuryFantom_BigDecimal
  stakedOhms_not_in: [treasuryFantom_BigDecimal!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  value: treasuryFantom_BigDecimal
  value_gt: treasuryFantom_BigDecimal
  value_gte: treasuryFantom_BigDecimal
  value_in: [treasuryFantom_BigDecimal!]
  value_lt: treasuryFantom_BigDecimal
  value_lte: treasuryFantom_BigDecimal
  value_not: treasuryFantom_BigDecimal
  value_not_in: [treasuryFantom_BigDecimal!]
}

enum treasuryFantom_Rebase_orderBy {
  amount
  contract
  id
  percentage
  stakedOhms
  timestamp
  value
}

type treasuryFantom_StakingPoolSnapshot {
  block: BigInt!
  contractAddress: treasuryFantom_Bytes!
  id: ID!
  stakingToken: treasuryFantom_Bytes
  _join: Query!
}

input treasuryFantom_StakingPoolSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryFantom_BlockChangedFilter
  and: [treasuryFantom_StakingPoolSnapshot_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  contractAddress: treasuryFantom_Bytes
  contractAddress_contains: treasuryFantom_Bytes
  contractAddress_gt: treasuryFantom_Bytes
  contractAddress_gte: treasuryFantom_Bytes
  contractAddress_in: [treasuryFantom_Bytes!]
  contractAddress_lt: treasuryFantom_Bytes
  contractAddress_lte: treasuryFantom_Bytes
  contractAddress_not: treasuryFantom_Bytes
  contractAddress_not_contains: treasuryFantom_Bytes
  contractAddress_not_in: [treasuryFantom_Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryFantom_StakingPoolSnapshot_filter]
  stakingToken: treasuryFantom_Bytes
  stakingToken_contains: treasuryFantom_Bytes
  stakingToken_gt: treasuryFantom_Bytes
  stakingToken_gte: treasuryFantom_Bytes
  stakingToken_in: [treasuryFantom_Bytes!]
  stakingToken_lt: treasuryFantom_Bytes
  stakingToken_lte: treasuryFantom_Bytes
  stakingToken_not: treasuryFantom_Bytes
  stakingToken_not_contains: treasuryFantom_Bytes
  stakingToken_not_in: [treasuryFantom_Bytes!]
}

enum treasuryFantom_StakingPoolSnapshot_orderBy {
  block
  contractAddress
  id
  stakingToken
}

type treasuryFantom_Token {
  id: ID!
  _join: Query!
}

type treasuryFantom_TokenPriceSnapshot {
  block: BigInt!
  id: ID!
  price: treasuryFantom_BigDecimal!
  token: treasuryFantom_Bytes!
  _join: Query!
}

input treasuryFantom_TokenPriceSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryFantom_BlockChangedFilter
  and: [treasuryFantom_TokenPriceSnapshot_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryFantom_TokenPriceSnapshot_filter]
  price: treasuryFantom_BigDecimal
  price_gt: treasuryFantom_BigDecimal
  price_gte: treasuryFantom_BigDecimal
  price_in: [treasuryFantom_BigDecimal!]
  price_lt: treasuryFantom_BigDecimal
  price_lte: treasuryFantom_BigDecimal
  price_not: treasuryFantom_BigDecimal
  price_not_in: [treasuryFantom_BigDecimal!]
  token: treasuryFantom_Bytes
  token_contains: treasuryFantom_Bytes
  token_gt: treasuryFantom_Bytes
  token_gte: treasuryFantom_Bytes
  token_in: [treasuryFantom_Bytes!]
  token_lt: treasuryFantom_Bytes
  token_lte: treasuryFantom_Bytes
  token_not: treasuryFantom_Bytes
  token_not_contains: treasuryFantom_Bytes
  token_not_in: [treasuryFantom_Bytes!]
}

enum treasuryFantom_TokenPriceSnapshot_orderBy {
  block
  id
  price
  token
}

type treasuryFantom_TokenRecord {
  balance: treasuryFantom_BigDecimal!
  block: BigInt!
  blockchain: String!
  category: String!
  date: String!
  id: ID!
  isBluechip: Boolean!
  isLiquid: Boolean!
  multiplier: treasuryFantom_BigDecimal!
  rate: treasuryFantom_BigDecimal!
  source: String!
  sourceAddress: String!
  timestamp: BigInt!
  token: String!
  tokenAddress: String!
  value: treasuryFantom_BigDecimal!
  valueExcludingOhm: treasuryFantom_BigDecimal!
  _join: Query!
}

input treasuryFantom_TokenRecord_filter {
  """Filter for the block changed event."""
  _change_block: treasuryFantom_BlockChangedFilter
  and: [treasuryFantom_TokenRecord_filter]
  balance: treasuryFantom_BigDecimal
  balance_gt: treasuryFantom_BigDecimal
  balance_gte: treasuryFantom_BigDecimal
  balance_in: [treasuryFantom_BigDecimal!]
  balance_lt: treasuryFantom_BigDecimal
  balance_lte: treasuryFantom_BigDecimal
  balance_not: treasuryFantom_BigDecimal
  balance_not_in: [treasuryFantom_BigDecimal!]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  blockchain: String
  blockchain_contains: String
  blockchain_contains_nocase: String
  blockchain_ends_with: String
  blockchain_ends_with_nocase: String
  blockchain_gt: String
  blockchain_gte: String
  blockchain_in: [String!]
  blockchain_lt: String
  blockchain_lte: String
  blockchain_not: String
  blockchain_not_contains: String
  blockchain_not_contains_nocase: String
  blockchain_not_ends_with: String
  blockchain_not_ends_with_nocase: String
  blockchain_not_in: [String!]
  blockchain_not_starts_with: String
  blockchain_not_starts_with_nocase: String
  blockchain_starts_with: String
  blockchain_starts_with_nocase: String
  category: String
  category_contains: String
  category_contains_nocase: String
  category_ends_with: String
  category_ends_with_nocase: String
  category_gt: String
  category_gte: String
  category_in: [String!]
  category_lt: String
  category_lte: String
  category_not: String
  category_not_contains: String
  category_not_contains_nocase: String
  category_not_ends_with: String
  category_not_ends_with_nocase: String
  category_not_in: [String!]
  category_not_starts_with: String
  category_not_starts_with_nocase: String
  category_starts_with: String
  category_starts_with_nocase: String
  date: String
  date_contains: String
  date_contains_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_gt: String
  date_gte: String
  date_in: [String!]
  date_lt: String
  date_lte: String
  date_not: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  date_not_in: [String!]
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  isBluechip: Boolean
  isBluechip_in: [Boolean!]
  isBluechip_not: Boolean
  isBluechip_not_in: [Boolean!]
  isLiquid: Boolean
  isLiquid_in: [Boolean!]
  isLiquid_not: Boolean
  isLiquid_not_in: [Boolean!]
  multiplier: treasuryFantom_BigDecimal
  multiplier_gt: treasuryFantom_BigDecimal
  multiplier_gte: treasuryFantom_BigDecimal
  multiplier_in: [treasuryFantom_BigDecimal!]
  multiplier_lt: treasuryFantom_BigDecimal
  multiplier_lte: treasuryFantom_BigDecimal
  multiplier_not: treasuryFantom_BigDecimal
  multiplier_not_in: [treasuryFantom_BigDecimal!]
  or: [treasuryFantom_TokenRecord_filter]
  rate: treasuryFantom_BigDecimal
  rate_gt: treasuryFantom_BigDecimal
  rate_gte: treasuryFantom_BigDecimal
  rate_in: [treasuryFantom_BigDecimal!]
  rate_lt: treasuryFantom_BigDecimal
  rate_lte: treasuryFantom_BigDecimal
  rate_not: treasuryFantom_BigDecimal
  rate_not_in: [treasuryFantom_BigDecimal!]
  source: String
  sourceAddress: String
  sourceAddress_contains: String
  sourceAddress_contains_nocase: String
  sourceAddress_ends_with: String
  sourceAddress_ends_with_nocase: String
  sourceAddress_gt: String
  sourceAddress_gte: String
  sourceAddress_in: [String!]
  sourceAddress_lt: String
  sourceAddress_lte: String
  sourceAddress_not: String
  sourceAddress_not_contains: String
  sourceAddress_not_contains_nocase: String
  sourceAddress_not_ends_with: String
  sourceAddress_not_ends_with_nocase: String
  sourceAddress_not_in: [String!]
  sourceAddress_not_starts_with: String
  sourceAddress_not_starts_with_nocase: String
  sourceAddress_starts_with: String
  sourceAddress_starts_with_nocase: String
  source_contains: String
  source_contains_nocase: String
  source_ends_with: String
  source_ends_with_nocase: String
  source_gt: String
  source_gte: String
  source_in: [String!]
  source_lt: String
  source_lte: String
  source_not: String
  source_not_contains: String
  source_not_contains_nocase: String
  source_not_ends_with: String
  source_not_ends_with_nocase: String
  source_not_in: [String!]
  source_not_starts_with: String
  source_not_starts_with_nocase: String
  source_starts_with: String
  source_starts_with_nocase: String
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  token: String
  tokenAddress: String
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_gt: String
  tokenAddress_gte: String
  tokenAddress_in: [String!]
  tokenAddress_lt: String
  tokenAddress_lte: String
  tokenAddress_not: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  tokenAddress_not_in: [String!]
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  value: treasuryFantom_BigDecimal
  valueExcludingOhm: treasuryFantom_BigDecimal
  valueExcludingOhm_gt: treasuryFantom_BigDecimal
  valueExcludingOhm_gte: treasuryFantom_BigDecimal
  valueExcludingOhm_in: [treasuryFantom_BigDecimal!]
  valueExcludingOhm_lt: treasuryFantom_BigDecimal
  valueExcludingOhm_lte: treasuryFantom_BigDecimal
  valueExcludingOhm_not: treasuryFantom_BigDecimal
  valueExcludingOhm_not_in: [treasuryFantom_BigDecimal!]
  value_gt: treasuryFantom_BigDecimal
  value_gte: treasuryFantom_BigDecimal
  value_in: [treasuryFantom_BigDecimal!]
  value_lt: treasuryFantom_BigDecimal
  value_lte: treasuryFantom_BigDecimal
  value_not: treasuryFantom_BigDecimal
  value_not_in: [treasuryFantom_BigDecimal!]
}

enum treasuryFantom_TokenRecord_orderBy {
  balance
  block
  blockchain
  category
  date
  id
  isBluechip
  isLiquid
  multiplier
  rate
  source
  sourceAddress
  timestamp
  token
  tokenAddress
  value
  valueExcludingOhm
}

type treasuryFantom_TokenSupply {
  balance: treasuryFantom_BigDecimal!
  block: BigInt!
  date: String!
  id: ID!
  pool: String
  poolAddress: String
  source: String
  sourceAddress: String
  supplyBalance: treasuryFantom_BigDecimal!
  timestamp: BigInt!
  token: String!
  tokenAddress: String!
  type: String!
  _join: Query!
}

input treasuryFantom_TokenSupply_filter {
  """Filter for the block changed event."""
  _change_block: treasuryFantom_BlockChangedFilter
  and: [treasuryFantom_TokenSupply_filter]
  balance: treasuryFantom_BigDecimal
  balance_gt: treasuryFantom_BigDecimal
  balance_gte: treasuryFantom_BigDecimal
  balance_in: [treasuryFantom_BigDecimal!]
  balance_lt: treasuryFantom_BigDecimal
  balance_lte: treasuryFantom_BigDecimal
  balance_not: treasuryFantom_BigDecimal
  balance_not_in: [treasuryFantom_BigDecimal!]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  date: String
  date_contains: String
  date_contains_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_gt: String
  date_gte: String
  date_in: [String!]
  date_lt: String
  date_lte: String
  date_not: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  date_not_in: [String!]
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryFantom_TokenSupply_filter]
  pool: String
  poolAddress: String
  poolAddress_contains: String
  poolAddress_contains_nocase: String
  poolAddress_ends_with: String
  poolAddress_ends_with_nocase: String
  poolAddress_gt: String
  poolAddress_gte: String
  poolAddress_in: [String!]
  poolAddress_lt: String
  poolAddress_lte: String
  poolAddress_not: String
  poolAddress_not_contains: String
  poolAddress_not_contains_nocase: String
  poolAddress_not_ends_with: String
  poolAddress_not_ends_with_nocase: String
  poolAddress_not_in: [String!]
  poolAddress_not_starts_with: String
  poolAddress_not_starts_with_nocase: String
  poolAddress_starts_with: String
  poolAddress_starts_with_nocase: String
  pool_contains: String
  pool_contains_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  source: String
  sourceAddress: String
  sourceAddress_contains: String
  sourceAddress_contains_nocase: String
  sourceAddress_ends_with: String
  sourceAddress_ends_with_nocase: String
  sourceAddress_gt: String
  sourceAddress_gte: String
  sourceAddress_in: [String!]
  sourceAddress_lt: String
  sourceAddress_lte: String
  sourceAddress_not: String
  sourceAddress_not_contains: String
  sourceAddress_not_contains_nocase: String
  sourceAddress_not_ends_with: String
  sourceAddress_not_ends_with_nocase: String
  sourceAddress_not_in: [String!]
  sourceAddress_not_starts_with: String
  sourceAddress_not_starts_with_nocase: String
  sourceAddress_starts_with: String
  sourceAddress_starts_with_nocase: String
  source_contains: String
  source_contains_nocase: String
  source_ends_with: String
  source_ends_with_nocase: String
  source_gt: String
  source_gte: String
  source_in: [String!]
  source_lt: String
  source_lte: String
  source_not: String
  source_not_contains: String
  source_not_contains_nocase: String
  source_not_ends_with: String
  source_not_ends_with_nocase: String
  source_not_in: [String!]
  source_not_starts_with: String
  source_not_starts_with_nocase: String
  source_starts_with: String
  source_starts_with_nocase: String
  supplyBalance: treasuryFantom_BigDecimal
  supplyBalance_gt: treasuryFantom_BigDecimal
  supplyBalance_gte: treasuryFantom_BigDecimal
  supplyBalance_in: [treasuryFantom_BigDecimal!]
  supplyBalance_lt: treasuryFantom_BigDecimal
  supplyBalance_lte: treasuryFantom_BigDecimal
  supplyBalance_not: treasuryFantom_BigDecimal
  supplyBalance_not_in: [treasuryFantom_BigDecimal!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  token: String
  tokenAddress: String
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_gt: String
  tokenAddress_gte: String
  tokenAddress_in: [String!]
  tokenAddress_lt: String
  tokenAddress_lte: String
  tokenAddress_not: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  tokenAddress_not_in: [String!]
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  type: String
  type_contains: String
  type_contains_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_gt: String
  type_gte: String
  type_in: [String!]
  type_lt: String
  type_lte: String
  type_not: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  type_not_in: [String!]
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
}

enum treasuryFantom_TokenSupply_orderBy {
  balance
  block
  date
  id
  pool
  poolAddress
  source
  sourceAddress
  supplyBalance
  timestamp
  token
  tokenAddress
  type
}

input treasuryFantom_Token_filter {
  """Filter for the block changed event."""
  _change_block: treasuryFantom_BlockChangedFilter
  and: [treasuryFantom_Token_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryFantom_Token_filter]
}

enum treasuryFantom_Token_orderBy {
  id
}

type treasuryFantom__Block_ {
  """The hash of the block"""
  hash: treasuryFantom_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  _join: Query!
}

"""The type for the top-level _meta field"""
type treasuryFantom__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: treasuryFantom__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
  _join: Query!
}

enum treasuryFantom__SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type treasuryPolygon_BalancerPoolSnapshot {
  balances: [treasuryPolygon_BigDecimal!]!
  block: BigInt!
  decimals: Int!
  id: ID!
  pool: treasuryPolygon_Bytes!
  poolToken: treasuryPolygon_Bytes!
  tokens: [treasuryPolygon_Bytes!]!
  totalSupply: treasuryPolygon_BigDecimal!
  weights: [treasuryPolygon_BigDecimal!]!
  _join: Query!
}

input treasuryPolygon_BalancerPoolSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryPolygon_BlockChangedFilter
  and: [treasuryPolygon_BalancerPoolSnapshot_filter]
  balances: [treasuryPolygon_BigDecimal!]
  balances_contains: [treasuryPolygon_BigDecimal!]
  balances_contains_nocase: [treasuryPolygon_BigDecimal!]
  balances_not: [treasuryPolygon_BigDecimal!]
  balances_not_contains: [treasuryPolygon_BigDecimal!]
  balances_not_contains_nocase: [treasuryPolygon_BigDecimal!]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  decimals: Int
  decimals_gt: Int
  decimals_gte: Int
  decimals_in: [Int!]
  decimals_lt: Int
  decimals_lte: Int
  decimals_not: Int
  decimals_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryPolygon_BalancerPoolSnapshot_filter]
  pool: treasuryPolygon_Bytes
  poolToken: treasuryPolygon_Bytes
  poolToken_contains: treasuryPolygon_Bytes
  poolToken_gt: treasuryPolygon_Bytes
  poolToken_gte: treasuryPolygon_Bytes
  poolToken_in: [treasuryPolygon_Bytes!]
  poolToken_lt: treasuryPolygon_Bytes
  poolToken_lte: treasuryPolygon_Bytes
  poolToken_not: treasuryPolygon_Bytes
  poolToken_not_contains: treasuryPolygon_Bytes
  poolToken_not_in: [treasuryPolygon_Bytes!]
  pool_contains: treasuryPolygon_Bytes
  pool_gt: treasuryPolygon_Bytes
  pool_gte: treasuryPolygon_Bytes
  pool_in: [treasuryPolygon_Bytes!]
  pool_lt: treasuryPolygon_Bytes
  pool_lte: treasuryPolygon_Bytes
  pool_not: treasuryPolygon_Bytes
  pool_not_contains: treasuryPolygon_Bytes
  pool_not_in: [treasuryPolygon_Bytes!]
  tokens: [treasuryPolygon_Bytes!]
  tokens_contains: [treasuryPolygon_Bytes!]
  tokens_contains_nocase: [treasuryPolygon_Bytes!]
  tokens_not: [treasuryPolygon_Bytes!]
  tokens_not_contains: [treasuryPolygon_Bytes!]
  tokens_not_contains_nocase: [treasuryPolygon_Bytes!]
  totalSupply: treasuryPolygon_BigDecimal
  totalSupply_gt: treasuryPolygon_BigDecimal
  totalSupply_gte: treasuryPolygon_BigDecimal
  totalSupply_in: [treasuryPolygon_BigDecimal!]
  totalSupply_lt: treasuryPolygon_BigDecimal
  totalSupply_lte: treasuryPolygon_BigDecimal
  totalSupply_not: treasuryPolygon_BigDecimal
  totalSupply_not_in: [treasuryPolygon_BigDecimal!]
  weights: [treasuryPolygon_BigDecimal!]
  weights_contains: [treasuryPolygon_BigDecimal!]
  weights_contains_nocase: [treasuryPolygon_BigDecimal!]
  weights_not: [treasuryPolygon_BigDecimal!]
  weights_not_contains: [treasuryPolygon_BigDecimal!]
  weights_not_contains_nocase: [treasuryPolygon_BigDecimal!]
}

enum treasuryPolygon_BalancerPoolSnapshot_orderBy {
  balances
  block
  decimals
  id
  pool
  poolToken
  tokens
  totalSupply
  weights
}

scalar treasuryPolygon_BigDecimal

input treasuryPolygon_BlockChangedFilter {
  number_gte: Int!
}

input treasuryPolygon_Block_height {
  hash: treasuryPolygon_Bytes
  number: Int
  number_gte: Int
}

type treasuryPolygon_BondDiscount {
  dai_discount: treasuryPolygon_BigDecimal!
  eth_discount: treasuryPolygon_BigDecimal!
  frax_discount: treasuryPolygon_BigDecimal!
  id: ID!
  lusd_discount: treasuryPolygon_BigDecimal!
  ohmdai_discount: treasuryPolygon_BigDecimal!
  ohmfrax_discount: treasuryPolygon_BigDecimal!
  ohmlusd_discount: treasuryPolygon_BigDecimal!
  timestamp: BigInt!
  _join: Query!
}

input treasuryPolygon_BondDiscount_filter {
  """Filter for the block changed event."""
  _change_block: treasuryPolygon_BlockChangedFilter
  and: [treasuryPolygon_BondDiscount_filter]
  dai_discount: treasuryPolygon_BigDecimal
  dai_discount_gt: treasuryPolygon_BigDecimal
  dai_discount_gte: treasuryPolygon_BigDecimal
  dai_discount_in: [treasuryPolygon_BigDecimal!]
  dai_discount_lt: treasuryPolygon_BigDecimal
  dai_discount_lte: treasuryPolygon_BigDecimal
  dai_discount_not: treasuryPolygon_BigDecimal
  dai_discount_not_in: [treasuryPolygon_BigDecimal!]
  eth_discount: treasuryPolygon_BigDecimal
  eth_discount_gt: treasuryPolygon_BigDecimal
  eth_discount_gte: treasuryPolygon_BigDecimal
  eth_discount_in: [treasuryPolygon_BigDecimal!]
  eth_discount_lt: treasuryPolygon_BigDecimal
  eth_discount_lte: treasuryPolygon_BigDecimal
  eth_discount_not: treasuryPolygon_BigDecimal
  eth_discount_not_in: [treasuryPolygon_BigDecimal!]
  frax_discount: treasuryPolygon_BigDecimal
  frax_discount_gt: treasuryPolygon_BigDecimal
  frax_discount_gte: treasuryPolygon_BigDecimal
  frax_discount_in: [treasuryPolygon_BigDecimal!]
  frax_discount_lt: treasuryPolygon_BigDecimal
  frax_discount_lte: treasuryPolygon_BigDecimal
  frax_discount_not: treasuryPolygon_BigDecimal
  frax_discount_not_in: [treasuryPolygon_BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lusd_discount: treasuryPolygon_BigDecimal
  lusd_discount_gt: treasuryPolygon_BigDecimal
  lusd_discount_gte: treasuryPolygon_BigDecimal
  lusd_discount_in: [treasuryPolygon_BigDecimal!]
  lusd_discount_lt: treasuryPolygon_BigDecimal
  lusd_discount_lte: treasuryPolygon_BigDecimal
  lusd_discount_not: treasuryPolygon_BigDecimal
  lusd_discount_not_in: [treasuryPolygon_BigDecimal!]
  ohmdai_discount: treasuryPolygon_BigDecimal
  ohmdai_discount_gt: treasuryPolygon_BigDecimal
  ohmdai_discount_gte: treasuryPolygon_BigDecimal
  ohmdai_discount_in: [treasuryPolygon_BigDecimal!]
  ohmdai_discount_lt: treasuryPolygon_BigDecimal
  ohmdai_discount_lte: treasuryPolygon_BigDecimal
  ohmdai_discount_not: treasuryPolygon_BigDecimal
  ohmdai_discount_not_in: [treasuryPolygon_BigDecimal!]
  ohmfrax_discount: treasuryPolygon_BigDecimal
  ohmfrax_discount_gt: treasuryPolygon_BigDecimal
  ohmfrax_discount_gte: treasuryPolygon_BigDecimal
  ohmfrax_discount_in: [treasuryPolygon_BigDecimal!]
  ohmfrax_discount_lt: treasuryPolygon_BigDecimal
  ohmfrax_discount_lte: treasuryPolygon_BigDecimal
  ohmfrax_discount_not: treasuryPolygon_BigDecimal
  ohmfrax_discount_not_in: [treasuryPolygon_BigDecimal!]
  ohmlusd_discount: treasuryPolygon_BigDecimal
  ohmlusd_discount_gt: treasuryPolygon_BigDecimal
  ohmlusd_discount_gte: treasuryPolygon_BigDecimal
  ohmlusd_discount_in: [treasuryPolygon_BigDecimal!]
  ohmlusd_discount_lt: treasuryPolygon_BigDecimal
  ohmlusd_discount_lte: treasuryPolygon_BigDecimal
  ohmlusd_discount_not: treasuryPolygon_BigDecimal
  ohmlusd_discount_not_in: [treasuryPolygon_BigDecimal!]
  or: [treasuryPolygon_BondDiscount_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
}

enum treasuryPolygon_BondDiscount_orderBy {
  dai_discount
  eth_discount
  frax_discount
  id
  lusd_discount
  ohmdai_discount
  ohmfrax_discount
  ohmlusd_discount
  timestamp
}

scalar treasuryPolygon_Bytes

type treasuryPolygon_ConvexRewardPoolSnapshot {
  address: treasuryPolygon_Bytes!
  block: BigInt!
  id: ID!
  stakingToken: treasuryPolygon_Bytes!
  _join: Query!
}

input treasuryPolygon_ConvexRewardPoolSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryPolygon_BlockChangedFilter
  address: treasuryPolygon_Bytes
  address_contains: treasuryPolygon_Bytes
  address_gt: treasuryPolygon_Bytes
  address_gte: treasuryPolygon_Bytes
  address_in: [treasuryPolygon_Bytes!]
  address_lt: treasuryPolygon_Bytes
  address_lte: treasuryPolygon_Bytes
  address_not: treasuryPolygon_Bytes
  address_not_contains: treasuryPolygon_Bytes
  address_not_in: [treasuryPolygon_Bytes!]
  and: [treasuryPolygon_ConvexRewardPoolSnapshot_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryPolygon_ConvexRewardPoolSnapshot_filter]
  stakingToken: treasuryPolygon_Bytes
  stakingToken_contains: treasuryPolygon_Bytes
  stakingToken_gt: treasuryPolygon_Bytes
  stakingToken_gte: treasuryPolygon_Bytes
  stakingToken_in: [treasuryPolygon_Bytes!]
  stakingToken_lt: treasuryPolygon_Bytes
  stakingToken_lte: treasuryPolygon_Bytes
  stakingToken_not: treasuryPolygon_Bytes
  stakingToken_not_contains: treasuryPolygon_Bytes
  stakingToken_not_in: [treasuryPolygon_Bytes!]
}

enum treasuryPolygon_ConvexRewardPoolSnapshot_orderBy {
  address
  block
  id
  stakingToken
}

type treasuryPolygon_DailyBond {
  amount: treasuryPolygon_BigDecimal!
  id: ID!
  timestamp: BigInt!
  token: treasuryPolygon_Token!
  value: treasuryPolygon_BigDecimal!
  _join: Query!
}

input treasuryPolygon_DailyBond_filter {
  """Filter for the block changed event."""
  _change_block: treasuryPolygon_BlockChangedFilter
  amount: treasuryPolygon_BigDecimal
  amount_gt: treasuryPolygon_BigDecimal
  amount_gte: treasuryPolygon_BigDecimal
  amount_in: [treasuryPolygon_BigDecimal!]
  amount_lt: treasuryPolygon_BigDecimal
  amount_lte: treasuryPolygon_BigDecimal
  amount_not: treasuryPolygon_BigDecimal
  amount_not_in: [treasuryPolygon_BigDecimal!]
  and: [treasuryPolygon_DailyBond_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryPolygon_DailyBond_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  token: String
  token_: treasuryPolygon_Token_filter
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  value: treasuryPolygon_BigDecimal
  value_gt: treasuryPolygon_BigDecimal
  value_gte: treasuryPolygon_BigDecimal
  value_in: [treasuryPolygon_BigDecimal!]
  value_lt: treasuryPolygon_BigDecimal
  value_lte: treasuryPolygon_BigDecimal
  value_not: treasuryPolygon_BigDecimal
  value_not_in: [treasuryPolygon_BigDecimal!]
}

enum treasuryPolygon_DailyBond_orderBy {
  amount
  id
  timestamp
  token
  token__id
  value
}

type treasuryPolygon_DailyStakingReward {
  amount: treasuryPolygon_BigDecimal!
  id: ID!
  timestamp: BigInt!
  value: treasuryPolygon_BigDecimal!
  _join: Query!
}

input treasuryPolygon_DailyStakingReward_filter {
  """Filter for the block changed event."""
  _change_block: treasuryPolygon_BlockChangedFilter
  amount: treasuryPolygon_BigDecimal
  amount_gt: treasuryPolygon_BigDecimal
  amount_gte: treasuryPolygon_BigDecimal
  amount_in: [treasuryPolygon_BigDecimal!]
  amount_lt: treasuryPolygon_BigDecimal
  amount_lte: treasuryPolygon_BigDecimal
  amount_not: treasuryPolygon_BigDecimal
  amount_not_in: [treasuryPolygon_BigDecimal!]
  and: [treasuryPolygon_DailyStakingReward_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryPolygon_DailyStakingReward_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  value: treasuryPolygon_BigDecimal
  value_gt: treasuryPolygon_BigDecimal
  value_gte: treasuryPolygon_BigDecimal
  value_in: [treasuryPolygon_BigDecimal!]
  value_lt: treasuryPolygon_BigDecimal
  value_lte: treasuryPolygon_BigDecimal
  value_not: treasuryPolygon_BigDecimal
  value_not_in: [treasuryPolygon_BigDecimal!]
}

enum treasuryPolygon_DailyStakingReward_orderBy {
  amount
  id
  timestamp
  value
}

type treasuryPolygon_ERC20TokenSnapshot {
  address: treasuryPolygon_Bytes!
  decimals: Int!
  id: ID!
  totalSupply: treasuryPolygon_BigDecimal
  _join: Query!
}

input treasuryPolygon_ERC20TokenSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryPolygon_BlockChangedFilter
  address: treasuryPolygon_Bytes
  address_contains: treasuryPolygon_Bytes
  address_gt: treasuryPolygon_Bytes
  address_gte: treasuryPolygon_Bytes
  address_in: [treasuryPolygon_Bytes!]
  address_lt: treasuryPolygon_Bytes
  address_lte: treasuryPolygon_Bytes
  address_not: treasuryPolygon_Bytes
  address_not_contains: treasuryPolygon_Bytes
  address_not_in: [treasuryPolygon_Bytes!]
  and: [treasuryPolygon_ERC20TokenSnapshot_filter]
  decimals: Int
  decimals_gt: Int
  decimals_gte: Int
  decimals_in: [Int!]
  decimals_lt: Int
  decimals_lte: Int
  decimals_not: Int
  decimals_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryPolygon_ERC20TokenSnapshot_filter]
  totalSupply: treasuryPolygon_BigDecimal
  totalSupply_gt: treasuryPolygon_BigDecimal
  totalSupply_gte: treasuryPolygon_BigDecimal
  totalSupply_in: [treasuryPolygon_BigDecimal!]
  totalSupply_lt: treasuryPolygon_BigDecimal
  totalSupply_lte: treasuryPolygon_BigDecimal
  totalSupply_not: treasuryPolygon_BigDecimal
  totalSupply_not_in: [treasuryPolygon_BigDecimal!]
}

enum treasuryPolygon_ERC20TokenSnapshot_orderBy {
  address
  decimals
  id
  totalSupply
}

type treasuryPolygon_GnosisAuction {
  auctionCloseTimestamp: BigInt
  auctionOpenTimestamp: BigInt!
  bidQuantity: treasuryPolygon_BigDecimal
  id: ID!
  payoutCapacity: treasuryPolygon_BigDecimal!
  termSeconds: BigInt!
  _join: Query!
}

type treasuryPolygon_GnosisAuctionRoot {
  id: ID!
  markets: [BigInt!]!
  _join: Query!
}

input treasuryPolygon_GnosisAuctionRoot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryPolygon_BlockChangedFilter
  and: [treasuryPolygon_GnosisAuctionRoot_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  markets: [BigInt!]
  markets_contains: [BigInt!]
  markets_contains_nocase: [BigInt!]
  markets_not: [BigInt!]
  markets_not_contains: [BigInt!]
  markets_not_contains_nocase: [BigInt!]
  or: [treasuryPolygon_GnosisAuctionRoot_filter]
}

enum treasuryPolygon_GnosisAuctionRoot_orderBy {
  id
  markets
}

input treasuryPolygon_GnosisAuction_filter {
  """Filter for the block changed event."""
  _change_block: treasuryPolygon_BlockChangedFilter
  and: [treasuryPolygon_GnosisAuction_filter]
  auctionCloseTimestamp: BigInt
  auctionCloseTimestamp_gt: BigInt
  auctionCloseTimestamp_gte: BigInt
  auctionCloseTimestamp_in: [BigInt!]
  auctionCloseTimestamp_lt: BigInt
  auctionCloseTimestamp_lte: BigInt
  auctionCloseTimestamp_not: BigInt
  auctionCloseTimestamp_not_in: [BigInt!]
  auctionOpenTimestamp: BigInt
  auctionOpenTimestamp_gt: BigInt
  auctionOpenTimestamp_gte: BigInt
  auctionOpenTimestamp_in: [BigInt!]
  auctionOpenTimestamp_lt: BigInt
  auctionOpenTimestamp_lte: BigInt
  auctionOpenTimestamp_not: BigInt
  auctionOpenTimestamp_not_in: [BigInt!]
  bidQuantity: treasuryPolygon_BigDecimal
  bidQuantity_gt: treasuryPolygon_BigDecimal
  bidQuantity_gte: treasuryPolygon_BigDecimal
  bidQuantity_in: [treasuryPolygon_BigDecimal!]
  bidQuantity_lt: treasuryPolygon_BigDecimal
  bidQuantity_lte: treasuryPolygon_BigDecimal
  bidQuantity_not: treasuryPolygon_BigDecimal
  bidQuantity_not_in: [treasuryPolygon_BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryPolygon_GnosisAuction_filter]
  payoutCapacity: treasuryPolygon_BigDecimal
  payoutCapacity_gt: treasuryPolygon_BigDecimal
  payoutCapacity_gte: treasuryPolygon_BigDecimal
  payoutCapacity_in: [treasuryPolygon_BigDecimal!]
  payoutCapacity_lt: treasuryPolygon_BigDecimal
  payoutCapacity_lte: treasuryPolygon_BigDecimal
  payoutCapacity_not: treasuryPolygon_BigDecimal
  payoutCapacity_not_in: [treasuryPolygon_BigDecimal!]
  termSeconds: BigInt
  termSeconds_gt: BigInt
  termSeconds_gte: BigInt
  termSeconds_in: [BigInt!]
  termSeconds_lt: BigInt
  termSeconds_lte: BigInt
  termSeconds_not: BigInt
  termSeconds_not_in: [BigInt!]
}

enum treasuryPolygon_GnosisAuction_orderBy {
  auctionCloseTimestamp
  auctionOpenTimestamp
  bidQuantity
  id
  payoutCapacity
  termSeconds
}

"""Defines the order direction, either ascending or descending"""
enum treasuryPolygon_OrderDirection {
  asc
  desc
}

type treasuryPolygon_PoolSnapshot {
  balances: [treasuryPolygon_BigDecimal!]!
  block: BigInt!
  decimals: Int!
  id: ID!
  pool: treasuryPolygon_Bytes!
  poolToken: treasuryPolygon_Bytes
  tokens: [treasuryPolygon_Bytes!]!
  totalSupply: treasuryPolygon_BigDecimal!
  weights: [treasuryPolygon_BigDecimal!]
  _join: Query!
}

input treasuryPolygon_PoolSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryPolygon_BlockChangedFilter
  and: [treasuryPolygon_PoolSnapshot_filter]
  balances: [treasuryPolygon_BigDecimal!]
  balances_contains: [treasuryPolygon_BigDecimal!]
  balances_contains_nocase: [treasuryPolygon_BigDecimal!]
  balances_not: [treasuryPolygon_BigDecimal!]
  balances_not_contains: [treasuryPolygon_BigDecimal!]
  balances_not_contains_nocase: [treasuryPolygon_BigDecimal!]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  decimals: Int
  decimals_gt: Int
  decimals_gte: Int
  decimals_in: [Int!]
  decimals_lt: Int
  decimals_lte: Int
  decimals_not: Int
  decimals_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryPolygon_PoolSnapshot_filter]
  pool: treasuryPolygon_Bytes
  poolToken: treasuryPolygon_Bytes
  poolToken_contains: treasuryPolygon_Bytes
  poolToken_gt: treasuryPolygon_Bytes
  poolToken_gte: treasuryPolygon_Bytes
  poolToken_in: [treasuryPolygon_Bytes!]
  poolToken_lt: treasuryPolygon_Bytes
  poolToken_lte: treasuryPolygon_Bytes
  poolToken_not: treasuryPolygon_Bytes
  poolToken_not_contains: treasuryPolygon_Bytes
  poolToken_not_in: [treasuryPolygon_Bytes!]
  pool_contains: treasuryPolygon_Bytes
  pool_gt: treasuryPolygon_Bytes
  pool_gte: treasuryPolygon_Bytes
  pool_in: [treasuryPolygon_Bytes!]
  pool_lt: treasuryPolygon_Bytes
  pool_lte: treasuryPolygon_Bytes
  pool_not: treasuryPolygon_Bytes
  pool_not_contains: treasuryPolygon_Bytes
  pool_not_in: [treasuryPolygon_Bytes!]
  tokens: [treasuryPolygon_Bytes!]
  tokens_contains: [treasuryPolygon_Bytes!]
  tokens_contains_nocase: [treasuryPolygon_Bytes!]
  tokens_not: [treasuryPolygon_Bytes!]
  tokens_not_contains: [treasuryPolygon_Bytes!]
  tokens_not_contains_nocase: [treasuryPolygon_Bytes!]
  totalSupply: treasuryPolygon_BigDecimal
  totalSupply_gt: treasuryPolygon_BigDecimal
  totalSupply_gte: treasuryPolygon_BigDecimal
  totalSupply_in: [treasuryPolygon_BigDecimal!]
  totalSupply_lt: treasuryPolygon_BigDecimal
  totalSupply_lte: treasuryPolygon_BigDecimal
  totalSupply_not: treasuryPolygon_BigDecimal
  totalSupply_not_in: [treasuryPolygon_BigDecimal!]
  weights: [treasuryPolygon_BigDecimal!]
  weights_contains: [treasuryPolygon_BigDecimal!]
  weights_contains_nocase: [treasuryPolygon_BigDecimal!]
  weights_not: [treasuryPolygon_BigDecimal!]
  weights_not_contains: [treasuryPolygon_BigDecimal!]
  weights_not_contains_nocase: [treasuryPolygon_BigDecimal!]
}

enum treasuryPolygon_PoolSnapshot_orderBy {
  balances
  block
  decimals
  id
  pool
  poolToken
  tokens
  totalSupply
  weights
}

type treasuryPolygon_PriceSnapshot {
  block: BigInt!
  date: String!
  id: ID!
  priceGOhm: treasuryPolygon_BigDecimal!
  priceOhm: treasuryPolygon_BigDecimal!
  timestamp: BigInt!
  _join: Query!
}

input treasuryPolygon_PriceSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryPolygon_BlockChangedFilter
  and: [treasuryPolygon_PriceSnapshot_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  date: String
  date_contains: String
  date_contains_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_gt: String
  date_gte: String
  date_in: [String!]
  date_lt: String
  date_lte: String
  date_not: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  date_not_in: [String!]
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryPolygon_PriceSnapshot_filter]
  priceGOhm: treasuryPolygon_BigDecimal
  priceGOhm_gt: treasuryPolygon_BigDecimal
  priceGOhm_gte: treasuryPolygon_BigDecimal
  priceGOhm_in: [treasuryPolygon_BigDecimal!]
  priceGOhm_lt: treasuryPolygon_BigDecimal
  priceGOhm_lte: treasuryPolygon_BigDecimal
  priceGOhm_not: treasuryPolygon_BigDecimal
  priceGOhm_not_in: [treasuryPolygon_BigDecimal!]
  priceOhm: treasuryPolygon_BigDecimal
  priceOhm_gt: treasuryPolygon_BigDecimal
  priceOhm_gte: treasuryPolygon_BigDecimal
  priceOhm_in: [treasuryPolygon_BigDecimal!]
  priceOhm_lt: treasuryPolygon_BigDecimal
  priceOhm_lte: treasuryPolygon_BigDecimal
  priceOhm_not: treasuryPolygon_BigDecimal
  priceOhm_not_in: [treasuryPolygon_BigDecimal!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
}

enum treasuryPolygon_PriceSnapshot_orderBy {
  block
  date
  id
  priceGOhm
  priceOhm
  timestamp
}

type treasuryPolygon_ProtocolMetric {
  block: BigInt!
  currentAPY: treasuryPolygon_BigDecimal!
  currentIndex: treasuryPolygon_BigDecimal!
  date: String!
  gOhmPrice: treasuryPolygon_BigDecimal!
  gOhmSyntheticSupply: treasuryPolygon_BigDecimal
  gOhmTotalSupply: treasuryPolygon_BigDecimal!
  id: ID!
  marketCap: treasuryPolygon_BigDecimal
  nextDistributedOhm: treasuryPolygon_BigDecimal!
  nextEpochRebase: treasuryPolygon_BigDecimal!
  ohmCirculatingSupply: treasuryPolygon_BigDecimal
  ohmFloatingSupply: treasuryPolygon_BigDecimal
  ohmPrice: treasuryPolygon_BigDecimal!
  ohmTotalSupply: treasuryPolygon_BigDecimal!
  sOhmCirculatingSupply: treasuryPolygon_BigDecimal!
  timestamp: BigInt!
  totalValueLocked: treasuryPolygon_BigDecimal!
  treasuryLiquidBacking: treasuryPolygon_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic: treasuryPolygon_BigDecimal
  treasuryLiquidBackingPerOhmFloating: treasuryPolygon_BigDecimal
  treasuryMarketValue: treasuryPolygon_BigDecimal
  _join: Query!
}

input treasuryPolygon_ProtocolMetric_filter {
  """Filter for the block changed event."""
  _change_block: treasuryPolygon_BlockChangedFilter
  and: [treasuryPolygon_ProtocolMetric_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  currentAPY: treasuryPolygon_BigDecimal
  currentAPY_gt: treasuryPolygon_BigDecimal
  currentAPY_gte: treasuryPolygon_BigDecimal
  currentAPY_in: [treasuryPolygon_BigDecimal!]
  currentAPY_lt: treasuryPolygon_BigDecimal
  currentAPY_lte: treasuryPolygon_BigDecimal
  currentAPY_not: treasuryPolygon_BigDecimal
  currentAPY_not_in: [treasuryPolygon_BigDecimal!]
  currentIndex: treasuryPolygon_BigDecimal
  currentIndex_gt: treasuryPolygon_BigDecimal
  currentIndex_gte: treasuryPolygon_BigDecimal
  currentIndex_in: [treasuryPolygon_BigDecimal!]
  currentIndex_lt: treasuryPolygon_BigDecimal
  currentIndex_lte: treasuryPolygon_BigDecimal
  currentIndex_not: treasuryPolygon_BigDecimal
  currentIndex_not_in: [treasuryPolygon_BigDecimal!]
  date: String
  date_contains: String
  date_contains_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_gt: String
  date_gte: String
  date_in: [String!]
  date_lt: String
  date_lte: String
  date_not: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  date_not_in: [String!]
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  gOhmPrice: treasuryPolygon_BigDecimal
  gOhmPrice_gt: treasuryPolygon_BigDecimal
  gOhmPrice_gte: treasuryPolygon_BigDecimal
  gOhmPrice_in: [treasuryPolygon_BigDecimal!]
  gOhmPrice_lt: treasuryPolygon_BigDecimal
  gOhmPrice_lte: treasuryPolygon_BigDecimal
  gOhmPrice_not: treasuryPolygon_BigDecimal
  gOhmPrice_not_in: [treasuryPolygon_BigDecimal!]
  gOhmSyntheticSupply: treasuryPolygon_BigDecimal
  gOhmSyntheticSupply_gt: treasuryPolygon_BigDecimal
  gOhmSyntheticSupply_gte: treasuryPolygon_BigDecimal
  gOhmSyntheticSupply_in: [treasuryPolygon_BigDecimal!]
  gOhmSyntheticSupply_lt: treasuryPolygon_BigDecimal
  gOhmSyntheticSupply_lte: treasuryPolygon_BigDecimal
  gOhmSyntheticSupply_not: treasuryPolygon_BigDecimal
  gOhmSyntheticSupply_not_in: [treasuryPolygon_BigDecimal!]
  gOhmTotalSupply: treasuryPolygon_BigDecimal
  gOhmTotalSupply_gt: treasuryPolygon_BigDecimal
  gOhmTotalSupply_gte: treasuryPolygon_BigDecimal
  gOhmTotalSupply_in: [treasuryPolygon_BigDecimal!]
  gOhmTotalSupply_lt: treasuryPolygon_BigDecimal
  gOhmTotalSupply_lte: treasuryPolygon_BigDecimal
  gOhmTotalSupply_not: treasuryPolygon_BigDecimal
  gOhmTotalSupply_not_in: [treasuryPolygon_BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  marketCap: treasuryPolygon_BigDecimal
  marketCap_gt: treasuryPolygon_BigDecimal
  marketCap_gte: treasuryPolygon_BigDecimal
  marketCap_in: [treasuryPolygon_BigDecimal!]
  marketCap_lt: treasuryPolygon_BigDecimal
  marketCap_lte: treasuryPolygon_BigDecimal
  marketCap_not: treasuryPolygon_BigDecimal
  marketCap_not_in: [treasuryPolygon_BigDecimal!]
  nextDistributedOhm: treasuryPolygon_BigDecimal
  nextDistributedOhm_gt: treasuryPolygon_BigDecimal
  nextDistributedOhm_gte: treasuryPolygon_BigDecimal
  nextDistributedOhm_in: [treasuryPolygon_BigDecimal!]
  nextDistributedOhm_lt: treasuryPolygon_BigDecimal
  nextDistributedOhm_lte: treasuryPolygon_BigDecimal
  nextDistributedOhm_not: treasuryPolygon_BigDecimal
  nextDistributedOhm_not_in: [treasuryPolygon_BigDecimal!]
  nextEpochRebase: treasuryPolygon_BigDecimal
  nextEpochRebase_gt: treasuryPolygon_BigDecimal
  nextEpochRebase_gte: treasuryPolygon_BigDecimal
  nextEpochRebase_in: [treasuryPolygon_BigDecimal!]
  nextEpochRebase_lt: treasuryPolygon_BigDecimal
  nextEpochRebase_lte: treasuryPolygon_BigDecimal
  nextEpochRebase_not: treasuryPolygon_BigDecimal
  nextEpochRebase_not_in: [treasuryPolygon_BigDecimal!]
  ohmCirculatingSupply: treasuryPolygon_BigDecimal
  ohmCirculatingSupply_gt: treasuryPolygon_BigDecimal
  ohmCirculatingSupply_gte: treasuryPolygon_BigDecimal
  ohmCirculatingSupply_in: [treasuryPolygon_BigDecimal!]
  ohmCirculatingSupply_lt: treasuryPolygon_BigDecimal
  ohmCirculatingSupply_lte: treasuryPolygon_BigDecimal
  ohmCirculatingSupply_not: treasuryPolygon_BigDecimal
  ohmCirculatingSupply_not_in: [treasuryPolygon_BigDecimal!]
  ohmFloatingSupply: treasuryPolygon_BigDecimal
  ohmFloatingSupply_gt: treasuryPolygon_BigDecimal
  ohmFloatingSupply_gte: treasuryPolygon_BigDecimal
  ohmFloatingSupply_in: [treasuryPolygon_BigDecimal!]
  ohmFloatingSupply_lt: treasuryPolygon_BigDecimal
  ohmFloatingSupply_lte: treasuryPolygon_BigDecimal
  ohmFloatingSupply_not: treasuryPolygon_BigDecimal
  ohmFloatingSupply_not_in: [treasuryPolygon_BigDecimal!]
  ohmPrice: treasuryPolygon_BigDecimal
  ohmPrice_gt: treasuryPolygon_BigDecimal
  ohmPrice_gte: treasuryPolygon_BigDecimal
  ohmPrice_in: [treasuryPolygon_BigDecimal!]
  ohmPrice_lt: treasuryPolygon_BigDecimal
  ohmPrice_lte: treasuryPolygon_BigDecimal
  ohmPrice_not: treasuryPolygon_BigDecimal
  ohmPrice_not_in: [treasuryPolygon_BigDecimal!]
  ohmTotalSupply: treasuryPolygon_BigDecimal
  ohmTotalSupply_gt: treasuryPolygon_BigDecimal
  ohmTotalSupply_gte: treasuryPolygon_BigDecimal
  ohmTotalSupply_in: [treasuryPolygon_BigDecimal!]
  ohmTotalSupply_lt: treasuryPolygon_BigDecimal
  ohmTotalSupply_lte: treasuryPolygon_BigDecimal
  ohmTotalSupply_not: treasuryPolygon_BigDecimal
  ohmTotalSupply_not_in: [treasuryPolygon_BigDecimal!]
  or: [treasuryPolygon_ProtocolMetric_filter]
  sOhmCirculatingSupply: treasuryPolygon_BigDecimal
  sOhmCirculatingSupply_gt: treasuryPolygon_BigDecimal
  sOhmCirculatingSupply_gte: treasuryPolygon_BigDecimal
  sOhmCirculatingSupply_in: [treasuryPolygon_BigDecimal!]
  sOhmCirculatingSupply_lt: treasuryPolygon_BigDecimal
  sOhmCirculatingSupply_lte: treasuryPolygon_BigDecimal
  sOhmCirculatingSupply_not: treasuryPolygon_BigDecimal
  sOhmCirculatingSupply_not_in: [treasuryPolygon_BigDecimal!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  totalValueLocked: treasuryPolygon_BigDecimal
  totalValueLocked_gt: treasuryPolygon_BigDecimal
  totalValueLocked_gte: treasuryPolygon_BigDecimal
  totalValueLocked_in: [treasuryPolygon_BigDecimal!]
  totalValueLocked_lt: treasuryPolygon_BigDecimal
  totalValueLocked_lte: treasuryPolygon_BigDecimal
  totalValueLocked_not: treasuryPolygon_BigDecimal
  totalValueLocked_not_in: [treasuryPolygon_BigDecimal!]
  treasuryLiquidBacking: treasuryPolygon_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic: treasuryPolygon_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_gt: treasuryPolygon_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_gte: treasuryPolygon_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_in: [treasuryPolygon_BigDecimal!]
  treasuryLiquidBackingPerGOhmSynthetic_lt: treasuryPolygon_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_lte: treasuryPolygon_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_not: treasuryPolygon_BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic_not_in: [treasuryPolygon_BigDecimal!]
  treasuryLiquidBackingPerOhmFloating: treasuryPolygon_BigDecimal
  treasuryLiquidBackingPerOhmFloating_gt: treasuryPolygon_BigDecimal
  treasuryLiquidBackingPerOhmFloating_gte: treasuryPolygon_BigDecimal
  treasuryLiquidBackingPerOhmFloating_in: [treasuryPolygon_BigDecimal!]
  treasuryLiquidBackingPerOhmFloating_lt: treasuryPolygon_BigDecimal
  treasuryLiquidBackingPerOhmFloating_lte: treasuryPolygon_BigDecimal
  treasuryLiquidBackingPerOhmFloating_not: treasuryPolygon_BigDecimal
  treasuryLiquidBackingPerOhmFloating_not_in: [treasuryPolygon_BigDecimal!]
  treasuryLiquidBacking_gt: treasuryPolygon_BigDecimal
  treasuryLiquidBacking_gte: treasuryPolygon_BigDecimal
  treasuryLiquidBacking_in: [treasuryPolygon_BigDecimal!]
  treasuryLiquidBacking_lt: treasuryPolygon_BigDecimal
  treasuryLiquidBacking_lte: treasuryPolygon_BigDecimal
  treasuryLiquidBacking_not: treasuryPolygon_BigDecimal
  treasuryLiquidBacking_not_in: [treasuryPolygon_BigDecimal!]
  treasuryMarketValue: treasuryPolygon_BigDecimal
  treasuryMarketValue_gt: treasuryPolygon_BigDecimal
  treasuryMarketValue_gte: treasuryPolygon_BigDecimal
  treasuryMarketValue_in: [treasuryPolygon_BigDecimal!]
  treasuryMarketValue_lt: treasuryPolygon_BigDecimal
  treasuryMarketValue_lte: treasuryPolygon_BigDecimal
  treasuryMarketValue_not: treasuryPolygon_BigDecimal
  treasuryMarketValue_not_in: [treasuryPolygon_BigDecimal!]
}

enum treasuryPolygon_ProtocolMetric_orderBy {
  block
  currentAPY
  currentIndex
  date
  gOhmPrice
  gOhmSyntheticSupply
  gOhmTotalSupply
  id
  marketCap
  nextDistributedOhm
  nextEpochRebase
  ohmCirculatingSupply
  ohmFloatingSupply
  ohmPrice
  ohmTotalSupply
  sOhmCirculatingSupply
  timestamp
  totalValueLocked
  treasuryLiquidBacking
  treasuryLiquidBackingPerGOhmSynthetic
  treasuryLiquidBackingPerOhmFloating
  treasuryMarketValue
}

type treasuryPolygon_Rebase {
  amount: treasuryPolygon_BigDecimal!
  contract: String!
  id: ID!
  percentage: treasuryPolygon_BigDecimal!
  stakedOhms: treasuryPolygon_BigDecimal!
  timestamp: BigInt!
  value: treasuryPolygon_BigDecimal!
  _join: Query!
}

input treasuryPolygon_Rebase_filter {
  """Filter for the block changed event."""
  _change_block: treasuryPolygon_BlockChangedFilter
  amount: treasuryPolygon_BigDecimal
  amount_gt: treasuryPolygon_BigDecimal
  amount_gte: treasuryPolygon_BigDecimal
  amount_in: [treasuryPolygon_BigDecimal!]
  amount_lt: treasuryPolygon_BigDecimal
  amount_lte: treasuryPolygon_BigDecimal
  amount_not: treasuryPolygon_BigDecimal
  amount_not_in: [treasuryPolygon_BigDecimal!]
  and: [treasuryPolygon_Rebase_filter]
  contract: String
  contract_contains: String
  contract_contains_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_gt: String
  contract_gte: String
  contract_in: [String!]
  contract_lt: String
  contract_lte: String
  contract_not: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_not_in: [String!]
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryPolygon_Rebase_filter]
  percentage: treasuryPolygon_BigDecimal
  percentage_gt: treasuryPolygon_BigDecimal
  percentage_gte: treasuryPolygon_BigDecimal
  percentage_in: [treasuryPolygon_BigDecimal!]
  percentage_lt: treasuryPolygon_BigDecimal
  percentage_lte: treasuryPolygon_BigDecimal
  percentage_not: treasuryPolygon_BigDecimal
  percentage_not_in: [treasuryPolygon_BigDecimal!]
  stakedOhms: treasuryPolygon_BigDecimal
  stakedOhms_gt: treasuryPolygon_BigDecimal
  stakedOhms_gte: treasuryPolygon_BigDecimal
  stakedOhms_in: [treasuryPolygon_BigDecimal!]
  stakedOhms_lt: treasuryPolygon_BigDecimal
  stakedOhms_lte: treasuryPolygon_BigDecimal
  stakedOhms_not: treasuryPolygon_BigDecimal
  stakedOhms_not_in: [treasuryPolygon_BigDecimal!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  value: treasuryPolygon_BigDecimal
  value_gt: treasuryPolygon_BigDecimal
  value_gte: treasuryPolygon_BigDecimal
  value_in: [treasuryPolygon_BigDecimal!]
  value_lt: treasuryPolygon_BigDecimal
  value_lte: treasuryPolygon_BigDecimal
  value_not: treasuryPolygon_BigDecimal
  value_not_in: [treasuryPolygon_BigDecimal!]
}

enum treasuryPolygon_Rebase_orderBy {
  amount
  contract
  id
  percentage
  stakedOhms
  timestamp
  value
}

type treasuryPolygon_StakingPoolSnapshot {
  block: BigInt!
  contractAddress: treasuryPolygon_Bytes!
  id: ID!
  stakingToken: treasuryPolygon_Bytes
  _join: Query!
}

input treasuryPolygon_StakingPoolSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryPolygon_BlockChangedFilter
  and: [treasuryPolygon_StakingPoolSnapshot_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  contractAddress: treasuryPolygon_Bytes
  contractAddress_contains: treasuryPolygon_Bytes
  contractAddress_gt: treasuryPolygon_Bytes
  contractAddress_gte: treasuryPolygon_Bytes
  contractAddress_in: [treasuryPolygon_Bytes!]
  contractAddress_lt: treasuryPolygon_Bytes
  contractAddress_lte: treasuryPolygon_Bytes
  contractAddress_not: treasuryPolygon_Bytes
  contractAddress_not_contains: treasuryPolygon_Bytes
  contractAddress_not_in: [treasuryPolygon_Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryPolygon_StakingPoolSnapshot_filter]
  stakingToken: treasuryPolygon_Bytes
  stakingToken_contains: treasuryPolygon_Bytes
  stakingToken_gt: treasuryPolygon_Bytes
  stakingToken_gte: treasuryPolygon_Bytes
  stakingToken_in: [treasuryPolygon_Bytes!]
  stakingToken_lt: treasuryPolygon_Bytes
  stakingToken_lte: treasuryPolygon_Bytes
  stakingToken_not: treasuryPolygon_Bytes
  stakingToken_not_contains: treasuryPolygon_Bytes
  stakingToken_not_in: [treasuryPolygon_Bytes!]
}

enum treasuryPolygon_StakingPoolSnapshot_orderBy {
  block
  contractAddress
  id
  stakingToken
}

type treasuryPolygon_Token {
  id: ID!
  _join: Query!
}

type treasuryPolygon_TokenPriceSnapshot {
  block: BigInt!
  id: ID!
  price: treasuryPolygon_BigDecimal!
  token: treasuryPolygon_Bytes!
  _join: Query!
}

input treasuryPolygon_TokenPriceSnapshot_filter {
  """Filter for the block changed event."""
  _change_block: treasuryPolygon_BlockChangedFilter
  and: [treasuryPolygon_TokenPriceSnapshot_filter]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryPolygon_TokenPriceSnapshot_filter]
  price: treasuryPolygon_BigDecimal
  price_gt: treasuryPolygon_BigDecimal
  price_gte: treasuryPolygon_BigDecimal
  price_in: [treasuryPolygon_BigDecimal!]
  price_lt: treasuryPolygon_BigDecimal
  price_lte: treasuryPolygon_BigDecimal
  price_not: treasuryPolygon_BigDecimal
  price_not_in: [treasuryPolygon_BigDecimal!]
  token: treasuryPolygon_Bytes
  token_contains: treasuryPolygon_Bytes
  token_gt: treasuryPolygon_Bytes
  token_gte: treasuryPolygon_Bytes
  token_in: [treasuryPolygon_Bytes!]
  token_lt: treasuryPolygon_Bytes
  token_lte: treasuryPolygon_Bytes
  token_not: treasuryPolygon_Bytes
  token_not_contains: treasuryPolygon_Bytes
  token_not_in: [treasuryPolygon_Bytes!]
}

enum treasuryPolygon_TokenPriceSnapshot_orderBy {
  block
  id
  price
  token
}

type treasuryPolygon_TokenRecord {
  balance: treasuryPolygon_BigDecimal!
  block: BigInt!
  blockchain: String!
  category: String!
  date: String!
  id: ID!
  isBluechip: Boolean!
  isLiquid: Boolean!
  multiplier: treasuryPolygon_BigDecimal!
  rate: treasuryPolygon_BigDecimal!
  source: String!
  sourceAddress: String!
  timestamp: BigInt!
  token: String!
  tokenAddress: String!
  value: treasuryPolygon_BigDecimal!
  valueExcludingOhm: treasuryPolygon_BigDecimal!
  _join: Query!
}

input treasuryPolygon_TokenRecord_filter {
  """Filter for the block changed event."""
  _change_block: treasuryPolygon_BlockChangedFilter
  and: [treasuryPolygon_TokenRecord_filter]
  balance: treasuryPolygon_BigDecimal
  balance_gt: treasuryPolygon_BigDecimal
  balance_gte: treasuryPolygon_BigDecimal
  balance_in: [treasuryPolygon_BigDecimal!]
  balance_lt: treasuryPolygon_BigDecimal
  balance_lte: treasuryPolygon_BigDecimal
  balance_not: treasuryPolygon_BigDecimal
  balance_not_in: [treasuryPolygon_BigDecimal!]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  blockchain: String
  blockchain_contains: String
  blockchain_contains_nocase: String
  blockchain_ends_with: String
  blockchain_ends_with_nocase: String
  blockchain_gt: String
  blockchain_gte: String
  blockchain_in: [String!]
  blockchain_lt: String
  blockchain_lte: String
  blockchain_not: String
  blockchain_not_contains: String
  blockchain_not_contains_nocase: String
  blockchain_not_ends_with: String
  blockchain_not_ends_with_nocase: String
  blockchain_not_in: [String!]
  blockchain_not_starts_with: String
  blockchain_not_starts_with_nocase: String
  blockchain_starts_with: String
  blockchain_starts_with_nocase: String
  category: String
  category_contains: String
  category_contains_nocase: String
  category_ends_with: String
  category_ends_with_nocase: String
  category_gt: String
  category_gte: String
  category_in: [String!]
  category_lt: String
  category_lte: String
  category_not: String
  category_not_contains: String
  category_not_contains_nocase: String
  category_not_ends_with: String
  category_not_ends_with_nocase: String
  category_not_in: [String!]
  category_not_starts_with: String
  category_not_starts_with_nocase: String
  category_starts_with: String
  category_starts_with_nocase: String
  date: String
  date_contains: String
  date_contains_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_gt: String
  date_gte: String
  date_in: [String!]
  date_lt: String
  date_lte: String
  date_not: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  date_not_in: [String!]
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  isBluechip: Boolean
  isBluechip_in: [Boolean!]
  isBluechip_not: Boolean
  isBluechip_not_in: [Boolean!]
  isLiquid: Boolean
  isLiquid_in: [Boolean!]
  isLiquid_not: Boolean
  isLiquid_not_in: [Boolean!]
  multiplier: treasuryPolygon_BigDecimal
  multiplier_gt: treasuryPolygon_BigDecimal
  multiplier_gte: treasuryPolygon_BigDecimal
  multiplier_in: [treasuryPolygon_BigDecimal!]
  multiplier_lt: treasuryPolygon_BigDecimal
  multiplier_lte: treasuryPolygon_BigDecimal
  multiplier_not: treasuryPolygon_BigDecimal
  multiplier_not_in: [treasuryPolygon_BigDecimal!]
  or: [treasuryPolygon_TokenRecord_filter]
  rate: treasuryPolygon_BigDecimal
  rate_gt: treasuryPolygon_BigDecimal
  rate_gte: treasuryPolygon_BigDecimal
  rate_in: [treasuryPolygon_BigDecimal!]
  rate_lt: treasuryPolygon_BigDecimal
  rate_lte: treasuryPolygon_BigDecimal
  rate_not: treasuryPolygon_BigDecimal
  rate_not_in: [treasuryPolygon_BigDecimal!]
  source: String
  sourceAddress: String
  sourceAddress_contains: String
  sourceAddress_contains_nocase: String
  sourceAddress_ends_with: String
  sourceAddress_ends_with_nocase: String
  sourceAddress_gt: String
  sourceAddress_gte: String
  sourceAddress_in: [String!]
  sourceAddress_lt: String
  sourceAddress_lte: String
  sourceAddress_not: String
  sourceAddress_not_contains: String
  sourceAddress_not_contains_nocase: String
  sourceAddress_not_ends_with: String
  sourceAddress_not_ends_with_nocase: String
  sourceAddress_not_in: [String!]
  sourceAddress_not_starts_with: String
  sourceAddress_not_starts_with_nocase: String
  sourceAddress_starts_with: String
  sourceAddress_starts_with_nocase: String
  source_contains: String
  source_contains_nocase: String
  source_ends_with: String
  source_ends_with_nocase: String
  source_gt: String
  source_gte: String
  source_in: [String!]
  source_lt: String
  source_lte: String
  source_not: String
  source_not_contains: String
  source_not_contains_nocase: String
  source_not_ends_with: String
  source_not_ends_with_nocase: String
  source_not_in: [String!]
  source_not_starts_with: String
  source_not_starts_with_nocase: String
  source_starts_with: String
  source_starts_with_nocase: String
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  token: String
  tokenAddress: String
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_gt: String
  tokenAddress_gte: String
  tokenAddress_in: [String!]
  tokenAddress_lt: String
  tokenAddress_lte: String
  tokenAddress_not: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  tokenAddress_not_in: [String!]
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  value: treasuryPolygon_BigDecimal
  valueExcludingOhm: treasuryPolygon_BigDecimal
  valueExcludingOhm_gt: treasuryPolygon_BigDecimal
  valueExcludingOhm_gte: treasuryPolygon_BigDecimal
  valueExcludingOhm_in: [treasuryPolygon_BigDecimal!]
  valueExcludingOhm_lt: treasuryPolygon_BigDecimal
  valueExcludingOhm_lte: treasuryPolygon_BigDecimal
  valueExcludingOhm_not: treasuryPolygon_BigDecimal
  valueExcludingOhm_not_in: [treasuryPolygon_BigDecimal!]
  value_gt: treasuryPolygon_BigDecimal
  value_gte: treasuryPolygon_BigDecimal
  value_in: [treasuryPolygon_BigDecimal!]
  value_lt: treasuryPolygon_BigDecimal
  value_lte: treasuryPolygon_BigDecimal
  value_not: treasuryPolygon_BigDecimal
  value_not_in: [treasuryPolygon_BigDecimal!]
}

enum treasuryPolygon_TokenRecord_orderBy {
  balance
  block
  blockchain
  category
  date
  id
  isBluechip
  isLiquid
  multiplier
  rate
  source
  sourceAddress
  timestamp
  token
  tokenAddress
  value
  valueExcludingOhm
}

type treasuryPolygon_TokenSupply {
  balance: treasuryPolygon_BigDecimal!
  block: BigInt!
  date: String!
  id: ID!
  pool: String
  poolAddress: String
  source: String
  sourceAddress: String
  supplyBalance: treasuryPolygon_BigDecimal!
  timestamp: BigInt!
  token: String!
  tokenAddress: String!
  type: String!
  _join: Query!
}

input treasuryPolygon_TokenSupply_filter {
  """Filter for the block changed event."""
  _change_block: treasuryPolygon_BlockChangedFilter
  and: [treasuryPolygon_TokenSupply_filter]
  balance: treasuryPolygon_BigDecimal
  balance_gt: treasuryPolygon_BigDecimal
  balance_gte: treasuryPolygon_BigDecimal
  balance_in: [treasuryPolygon_BigDecimal!]
  balance_lt: treasuryPolygon_BigDecimal
  balance_lte: treasuryPolygon_BigDecimal
  balance_not: treasuryPolygon_BigDecimal
  balance_not_in: [treasuryPolygon_BigDecimal!]
  block: BigInt
  block_gt: BigInt
  block_gte: BigInt
  block_in: [BigInt!]
  block_lt: BigInt
  block_lte: BigInt
  block_not: BigInt
  block_not_in: [BigInt!]
  date: String
  date_contains: String
  date_contains_nocase: String
  date_ends_with: String
  date_ends_with_nocase: String
  date_gt: String
  date_gte: String
  date_in: [String!]
  date_lt: String
  date_lte: String
  date_not: String
  date_not_contains: String
  date_not_contains_nocase: String
  date_not_ends_with: String
  date_not_ends_with_nocase: String
  date_not_in: [String!]
  date_not_starts_with: String
  date_not_starts_with_nocase: String
  date_starts_with: String
  date_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryPolygon_TokenSupply_filter]
  pool: String
  poolAddress: String
  poolAddress_contains: String
  poolAddress_contains_nocase: String
  poolAddress_ends_with: String
  poolAddress_ends_with_nocase: String
  poolAddress_gt: String
  poolAddress_gte: String
  poolAddress_in: [String!]
  poolAddress_lt: String
  poolAddress_lte: String
  poolAddress_not: String
  poolAddress_not_contains: String
  poolAddress_not_contains_nocase: String
  poolAddress_not_ends_with: String
  poolAddress_not_ends_with_nocase: String
  poolAddress_not_in: [String!]
  poolAddress_not_starts_with: String
  poolAddress_not_starts_with_nocase: String
  poolAddress_starts_with: String
  poolAddress_starts_with_nocase: String
  pool_contains: String
  pool_contains_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  source: String
  sourceAddress: String
  sourceAddress_contains: String
  sourceAddress_contains_nocase: String
  sourceAddress_ends_with: String
  sourceAddress_ends_with_nocase: String
  sourceAddress_gt: String
  sourceAddress_gte: String
  sourceAddress_in: [String!]
  sourceAddress_lt: String
  sourceAddress_lte: String
  sourceAddress_not: String
  sourceAddress_not_contains: String
  sourceAddress_not_contains_nocase: String
  sourceAddress_not_ends_with: String
  sourceAddress_not_ends_with_nocase: String
  sourceAddress_not_in: [String!]
  sourceAddress_not_starts_with: String
  sourceAddress_not_starts_with_nocase: String
  sourceAddress_starts_with: String
  sourceAddress_starts_with_nocase: String
  source_contains: String
  source_contains_nocase: String
  source_ends_with: String
  source_ends_with_nocase: String
  source_gt: String
  source_gte: String
  source_in: [String!]
  source_lt: String
  source_lte: String
  source_not: String
  source_not_contains: String
  source_not_contains_nocase: String
  source_not_ends_with: String
  source_not_ends_with_nocase: String
  source_not_in: [String!]
  source_not_starts_with: String
  source_not_starts_with_nocase: String
  source_starts_with: String
  source_starts_with_nocase: String
  supplyBalance: treasuryPolygon_BigDecimal
  supplyBalance_gt: treasuryPolygon_BigDecimal
  supplyBalance_gte: treasuryPolygon_BigDecimal
  supplyBalance_in: [treasuryPolygon_BigDecimal!]
  supplyBalance_lt: treasuryPolygon_BigDecimal
  supplyBalance_lte: treasuryPolygon_BigDecimal
  supplyBalance_not: treasuryPolygon_BigDecimal
  supplyBalance_not_in: [treasuryPolygon_BigDecimal!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  token: String
  tokenAddress: String
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_gt: String
  tokenAddress_gte: String
  tokenAddress_in: [String!]
  tokenAddress_lt: String
  tokenAddress_lte: String
  tokenAddress_not: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  tokenAddress_not_in: [String!]
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  type: String
  type_contains: String
  type_contains_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_gt: String
  type_gte: String
  type_in: [String!]
  type_lt: String
  type_lte: String
  type_not: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  type_not_in: [String!]
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
}

enum treasuryPolygon_TokenSupply_orderBy {
  balance
  block
  date
  id
  pool
  poolAddress
  source
  sourceAddress
  supplyBalance
  timestamp
  token
  tokenAddress
  type
}

input treasuryPolygon_Token_filter {
  """Filter for the block changed event."""
  _change_block: treasuryPolygon_BlockChangedFilter
  and: [treasuryPolygon_Token_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [treasuryPolygon_Token_filter]
}

enum treasuryPolygon_Token_orderBy {
  id
}

type treasuryPolygon__Block_ {
  """The hash of the block"""
  hash: treasuryPolygon_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  _join: Query!
}

"""The type for the top-level _meta field"""
type treasuryPolygon__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: treasuryPolygon__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
  _join: Query!
}

enum treasuryPolygon__SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

enum COMMON_REGEX_PATTERN {
  EMAIL
  DOMAIN
}

enum WG_ROLE {
  admin
  user
}

"""Well known claims - https://www.iana.org/assignments/jwt/jwt.xhtml"""
enum WG_CLAIM {
  """iss"""
  ISSUER
  """deprecated alias for ISSUER"""
  PROVIDER
  """sub"""
  SUBJECT
  """alias for sub"""
  USERID
  """name"""
  NAME
  """given_name"""
  GIVEN_NAME
  """family_name"""
  FAMILY_NAME
  """middle_name"""
  MIDDLE_NAME
  """nickname"""
  NICKNAME
  """preferred_username"""
  PREFERRED_USERNAME
  """profile"""
  PROFILE
  """picture"""
  PICTURE
  """website"""
  WEBSITE
  """email"""
  EMAIL
  """email_verified"""
  EMAIL_VERIFIED
  """gender"""
  GENDER
  """birthdate"""
  BIRTH_DATE
  """zoneinfo"""
  ZONE_INFO
  """locale"""
  LOCALE
  """location"""
  LOCATION
}

enum WunderGraphDateTimeFormat {
  """2006-01-02T15:04:05-0700"""
  ISO8601
  """Mon Jan _2 15:04:05 2006"""
  ANSIC
  """Mon Jan _2 15:04:05 MST 2006"""
  UnixDate
  """Mon Jan 02 15:04:05 -0700 2006"""
  RubyDate
  """02 Jan 06 15:04 MST"""
  RFC822
  """02 Jan 06 15:04 -0700"""
  RFC822Z
  """Monday, 02-Jan-06 15:04:05 MST"""
  RFC850
  """Mon, 02 Jan 2006 15:04:05 MST"""
  RFC1123
  """Mon, 02 Jan 2006 15:04:05 -0700"""
  RFC1123Z
  """2006-01-02T15:04:05Z07:00"""
  RFC3339
  """2006-01-02T15:04:05.999999999Z07:00"""
  RFC3339Nano
  """3:04PM"""
  Kitchen
  """Jan _2 15:04:05"""
  Stamp
  """Jan _2 15:04:05.000"""
  StampMilli
  """Jan _2 15:04:05.000000"""
  StampMicro
  """Jan _2 15:04:05.000000000"""
  StampNano
}